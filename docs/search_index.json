[["introduction.html", "Estimating Social Animal Models in Stan Introduction", " Estimating Social Animal Models in Stan Jordan S. Martin &amp; Adrian V. Jaeggi 2021-07-14 Introduction body { text-align: justify} This guidebook provides a comprehensive overview of how to estimate social animal models (SAMs) with the Stan statistical programming language (Carpenter et al. 2017) in R (R Core Team 2020). A detailed theoretical treatment of SAMs and their empirical motivation can be found in the forthcoming paper (Martin and Jaeggi 2021) Social animal models for quantifying plasticity, assortment, and selection on interacting phenotypes. This guide focuses on various issues related to coding SAMs in Stan for varying study designs and more complex trait interactions. The overarching goal of the guidebook is to aid researchers in flexibly and appropriately applying SAMs to their own empirical datasets. Therefore, in addition to basic coding tutorials, we also intend to add worked examples relevant to specific challenges such as modeling spatial autocorrelation or hierarchical phenotypes. Please contact Jordan Scott Martin if you have any questions, as well as if youd like to suggest a worked example of interest to your own research. The guidebook is a work in progress and will be updated over time. Resources "],["using-stan-in-r.html", "1 Using Stan in R 1.1 Why Stan? 1.2 Getting Started 1.3 Bayesian inference 1.4 Basic coding tutorial 1.5 Animal models", " 1 Using Stan in R body { text-align: justify} 1.1 Why Stan? SAMs cannot be straightforwardly implemented with currently available software for quantitative genetic analysis, such as the frequentist ASREML program (Butler et al. 2018) or the Bayesian open-source R package MCMCglmm (Hadfield 2010). The classical animal models estimated by these programs can be used to describe reaction norms defined over non-social environments, with reaction norm slopes estimated on directly measured environmental gradients. However, social environments defined by partner phenotypes present novel challenges for animal models, such as accounting for temporal feedback between social partners phenotypes, differentiating the effects of assortment and social plasticity between partners, and avoiding bias due to correlated residual effects on measurements taken within and among social interactions (Martin and Jaeggi 2021). SAMs address these challenges by estimating plasticity, assortment, and selection directly on the latent social reaction norms (SRNs) governing repeatable individual variation. A highly flexible modeling framework is required to estimate these latent (i.e. indirectly measured) interactions with raw empirical data, as well as to use them for predicting social evolutionary change. Stan (Carpenter et al. 2017) is an open-source programming language for estimating probabilistic models of arbitrary complexity, which can interface with multiple statistical environments such as R (R Core Team 2020). Stan also facilitates fully Bayesian inference using state-of-the-art Markov Chain Monte Carlo (MCMC) sampling techniques. In particular, the No U-Turn Sampler (NUTS) implimented in Stan has been found to perform particularly well for quantitative genetic analysis (Nishio and Arakawa 2019). Stan is thus an ideal platform for flexibly estimating SAMs in any empirical system, as is further discussed in the main text (Martin and Jaeggi 2021). Using Bayesian posteriors rather than point estimates will also promote more robust biological inferences with SAMs, as statistical uncertainty can be easily carried forward across multiple stages of analysis (Stinchcombe, Simonsen, and Blows 2014). This provides a crucial means of quantifying uncertainty in the predicted direction and magnitude of social evolution. 1.2 Getting Started Stan interfaces with R through the RStan package (Carpenter et al. 2017), providing an efficient means of integrating SAMs into pre-existing data analysis pipelines. However, you will first need to install Stan on your computer and ensure that it is appropriately configured with your C++ toolchain. This can be accomplished by following the instructions for your operating system on the RStan Getting Started page. Once you are able to effectively use RStan, you can begin creating the .stan files necessary for estimating SAMs. These files can be composed using RStudio or any text editor, as well as directly in R with write() write(&quot;// for Stan comments functions{...} // Stan models are composed of data {...} // multiple programming blocks transformed data {...} //only data, parameters, and model parameters {...} //blocks are necessary transformed parameters {...} model {...} generated quantities {...} &quot;, &quot;mod1.stan&quot;) Once an appropriate .stan file is prepared, it can be compiled in R for the C++ toolchain using the stan_model() function and subsequently estimated with an appropriate list of empirical data using the sampling() function. The resulting posteriors of a model can then be accessed with the extract() function and manipulated for any further quantities or analyses of interest. #load package library(rstan) #compiles the model in C++ for MCMC estimation mod1 = stan_model(&quot;mod1.stan&quot;) #samples posterior distribution of the model with default MCMC settings results = sampling(object = mod1, data = data) #extracts posterior estimates samples = extract(results) 1.3 Bayesian inference A detailed overview of the benefits of Bayesian inference is beyond the scope of this guidebook, as attention is placed on coding and computational concerns rather than interpretation. We encourage researchers unfamiliar with fully Bayesian inference to see McElreath (2020) for further discussion. Lemoine (2019) also demonstrates why weakly regularizing (or weakly informative) priors are often preferable to the flat or diffuse priors more commonly used in evolutionary ecology. In general, we encourage researchers to utilize the benefits of fully Bayesian inference while working in Stan, rather than attempting to mimic classical inference and null-hypothesis testing approaches. Gelman et al. (2020) provide a very useful general discussion of Bayesian workflow from initial estimation to model comparison and selection. A basic understanding of MCMC and prior and posterior distributions is necessary to fully understand model estimation in Stan. MCMC provides a means of approximating any continous probability distribution, with a finite set of samples taken in proportion to the underlying target probability density. As a consequence, Stan models return objects with many MCMC samples for each model parameter, rather than single point estimates. These samples can then be summarized to approximate the shape of the truly continous target posterior distribution, as is shown throughout the coding tutorials. 1.4 Basic coding tutorial Stan uses its own language for writing probabilistic models, including a variety of built-in functions designed to aid in efficient computation. The biggest conceptual hurdle for new users of Stan is likely to be the absence of an intuitive R-like syntax for specifying model formulas, such as formulas like y ~ x + (1|z) that can be used to quickly specify complex generalized linear mixed-effects models. These formulas facilitate highly efficient statistical modeling, but do so at the cost of limiting users ability to specify atypical model structures. Instead, Stan provides the benefit of nearly unlimited flexibility in model specification, with the added cost of a steeper learning curve. In particular, models must be formally specified with mathematically appropriate likelihood functions, rather than this process being handled on the back-end through textual inputs from the user such as family= poisson(link = \"log\"). This may at first seem like a cumbersome task, but it provides a degree of independence and creativity for data analysis that is otherwise unavailable. It is this autonomy that makes it possible to unbiasedly estimate SAMs in Stan, which to the best of our knowledge cannot be accomplished with any other mainstream statistical software. Nonetheless, it is important to recognize that some practice and trial-and-error will be required to gain competency and comfortability with Stan. We therefore encourage those interested in SAMs to review the Stan Reference Manual, as well the extensive collection of Stan Case Studies, which will provide a more robust foundation for estimating any model of interest in Stan. Here we review some basics of Stan that will be necessary for following the coding tutorials in the rest of the guidebook. To make this introduction more concrete, we simulate a simple data structure appropriately described by a Gaussian random regression model, with 50 subjects and 2 repeated measures per subject across an environmental gradient \\(x\\). Formally, the model for observation i of individual j is given by \\[z_{ij}=\\mu_0+\\mu_{j}+\\left( \\beta_0 + \\beta_{j} \\right) x_{ij}+\\epsilon_i\\] \\[ \\begin{bmatrix} \\boldsymbol{\\mu} \\\\ \\boldsymbol{\\beta_{\\mathrm{ }}} \\end{bmatrix} \\sim \\mathrm{MVNormal}(\\boldsymbol{0}, \\boldsymbol{\\mathrm{P}} ) : \\boldsymbol{\\mathrm{ }} = \\begin{bmatrix} \\mathrm{Var}( {\\mu} ) &amp; \\mathrm{Cov}( {\\mu}, \\boldsymbol{\\beta_{\\mathrm{ }}}) \\\\ \\mathrm{Cov}(\\boldsymbol{\\beta_{\\mathrm{ }}}, {\\mu} ) &amp; \\mathrm{Var}( \\boldsymbol{\\beta_{\\mathrm{ }}} ) \\end{bmatrix} \\] \\[ \\boldsymbol{\\epsilon} \\sim \\mathrm{Normal}(0, \\boldsymbol{\\Sigma} ): \\boldsymbol{\\Sigma} = [\\mathrm{Var}(\\boldsymbol{\\epsilon})]\\] where \\(\\mu_0\\) and \\(\\beta_1\\) are fixed population-level intercepts and slopes respectively, with the vectors \\(\\boldsymbol{\\mu_{\\mathrm{ }}}\\) and \\(\\boldsymbol{\\beta_{\\mathrm{ }}}\\) containing individual-specific phenotypic deviations from the population values (i.e. random intercepts and slopes). The probability density function of this Gaussian variable can be equivalently written as \\[z_{ij} \\sim \\mathrm{Normal}(\\mu_0 + \\mu_{j}+ \\left( \\beta_1 + \\beta_{j} \\right) x_{ij}, \\boldsymbol{\\Sigma})\\] It is often easier to specify model likelihoods and priors over standard deviations and correlation matrices in Stan, rather than the variances and covariances represented in the formal model. These parameters can always be derived from one another with simple transformations. For variances and standard deviations \\[\\mathrm{SD}( \\boldsymbol{\\mu_{\\mathrm{ }}} ) = \\mathrm{Sqrt(Var} (\\boldsymbol{\\boldsymbol{\\mu_{\\mathrm{ }}} }) ) , \\quad \\mathrm{SD}( \\boldsymbol{\\beta_{\\mathrm{ }}} ) = \\mathrm{Sqrt(Var} (\\boldsymbol{\\boldsymbol{\\beta_{\\mathrm{ }}} }) )\\] Similarly, the covariance matrix \\(\\boldsymbol{\\mathrm{P_{cov}}}\\) can be derived by pre- and post-multiplying the correlation matrix \\(\\boldsymbol{\\mathrm{P_{cor}}}\\) with diagonal matrices \\(\\boldsymbol{\\mathrm{P_{sd}}}\\) of these standard deviations \\[\\boldsymbol{\\mathrm{P_{cov}}} = \\boldsymbol{\\mathrm{P_{sd}}} \\boldsymbol{\\mathrm{P_{cor}}}\\boldsymbol{\\mathrm{P_{sd}}}\\] \\[\\boldsymbol{\\mathrm{P_{sd}}}= \\begin{bmatrix} \\mathrm{SD}( \\boldsymbol{\\mu_{\\mathrm{ }}} ) &amp; 0 \\\\ 0 &amp; \\mathrm{SD}( \\boldsymbol{\\beta_{\\mathrm{ }}} ) \\end{bmatrix}, \\quad \\boldsymbol{\\mathrm{P_{cor}}} = \\begin{bmatrix} 1 &amp; \\mathrm{Cor}( \\boldsymbol{\\mu_{\\mathrm{ }}}, \\boldsymbol{\\beta_{\\mathrm{ }}} ) \\\\ \\mathrm{Cor}( \\boldsymbol{\\beta_{\\mathrm{ }}} , \\boldsymbol{\\mu_{\\mathrm{ }}} ) &amp; 1 \\end{bmatrix} \\] We can simulate a random dataset from this model in R, along with an index variable id that tracks which individual (I = 1 - 50) is being measured at each observation (N = 1-100). library(mvtnorm) N = 100 #total observations I = 50 #total individuals intercept = 1 #global intercept beta1 = 0.3 #fixed effect regression coefficient SD_intercept = 0.3 #standard deviation of random intercepts SD_slope = 0.3 SD_residual = 1 cor_RE = 0.3 #correlation of random intercepts and slopes #individual-level index id = rep(seq(1, I), each = N/I) #i.e. two observations per individual #simulate fixed effect covariate x = rnorm(100,0,1) #simulate random individual deviations Pcor = matrix( c(1, cor_RE, cor_RE, 1), nrow = 2, ncol = 2 ) Psd = matrix( c(SD_intercept, 0, 0, SD_slope), nrow = 2, ncol = 2 ) Pcov = Psd %*% Pcor %*% Psd re_P = rmvnorm(I, mean = c(0,0), sigma = Pcov) #rows = I, cols = intercepts and slopes #individual-level parameters mu = re_P[,1] beta = re_P[,2] #residual effects epsilon = rnorm(100, 0, SD_residual ) #measured response (100 response values for 50 subjects) z = intercept + mu[id] + (beta1 + beta[id])*x + epsilon #combine into list for Stan #other values are empirically unobserved and will be model parameters stan_data = list(z = z, x = x, id = id, N = N, I = I) We can now program a Stan model to infer the data-generating process with these empirical observations. For any .stan file composed with a text editor, the following programming blocks will be recognized and all model code inside each block will be processed sequentially. functions { } data { } transformed data { } parameters { } transformed parameters { } model { } generated quantities { } The data, parameters, and model blocks are specified for any model, while the other blocks provide optional declarations and statements. In most statistical software, empirical data are input with a single matrix or dataframe. Rather than inputting a single dataframe or matix to RStan, a list can be provided with data for each scalar (real or integer), vector, or matrix declared in the .stan file. The names of these data objects are declared along with their expected dimensions, which ensures that inappropriate data structures or likelihood functions will throw errors. For the simulated data, we first declare all the measured variables and indices relevant to model estimation. We use // rather than # for comments in Stan. data { int&lt;lower=1&gt; N; //length of response vector/total observations int&lt;lower=1&gt; I; //number of individuals int&lt;lower=1&gt; id[N]; //N integer indices matching observations of z to the individual identity vector[N] x; //vector of covariate values for fixed effect vector[N] z; //vector of response values } This declarative approach requires that particular attention is given to the order of data input to the model, as values will need to be appropriately aligned and indexed throughout the model specification. However, it also provides additional benefits such as facilitating multi-response models with heterogeneous dimensions, as well as allowing for arbitrarily complex forms of social interaction to be specified in the model likelihood using appropriate indices of the relevant vectors or matrices. We specify model parameters in accordance with the formal model used for the simulation, with standard deviations and correlation matrices replacing variances and covariance matrices. For simplicity, we use _P to indicate phenotypic (co)variances and values in the Stan code, with _R used to indicate residual (co)variance terms. parameters { //fixed effects real mu_0; //global intercept real beta_1; //fixed effect coefficient for covariate x //random effects corr_matrix[2] Pcor; //correlation matrix of random effects vector&lt;lower=0&gt;[2] sd_P; //standard deviations of random effects real&lt;lower=0&gt; sd_R; //standard deviation of residuals matrix[I,2] re_P; //individual-level phenotypic deviations (random intercepts and slopes) } Note that rather than declaring the random effects as separate vectors, we instead declare a matrix for both individual intercept and slope values, which we use in the model block for declaring the covariance between these parameters. It is necessary to specify &lt;lower=0&gt; so that the standard deviation parameters are lower bound at zero. The other parameters in the formal model are simply combinations of these fundamental parameters. The transformed parameters block of a .stan file is intended for such purposes. In particular, the covariance matrix \\(\\boldsymbol{\\mathrm{P_{cov}}}\\) can be derived with the standard deviations sd_P and the correlation matrix Pcor as shown above. Separating these parameters is useful for increasing model clarity, as well for enhancing the efficiency of MCMC sampling as demonstrated further below. transformed parameters { cov_matrix[2] Pcov = diag_matrix(sd_P) * Pcor * diag_matrix(sd_P); //cov of random effects } This new transformed parameter P can now be used in the model block to more clearly express the likelihood function. Note that new objects can also be declared inside the model block prior to specifying the likelihood. However, any objects created in the model block are temporary and will not be saved along with the MCMC samples of objects declared in the parameters and transformed parametrs blocks. This can be useful for creating pragmatic objects that enable more efficient coding but do not need to be directly interpreted. For instance, rather than subsetting the matrix of individual random effects re_P inside the model likelihood, we can instead create two temporary vectors mu and beta to more intuitively write the likelihood function. Following the formal model above, we specify the response \\(z_{ij}\\) as a function of the linear predictor containing population parameters as well as individual intercepts \\(\\mu_j\\) and slopes in response to the environmental covariate \\(\\beta_j\\), as well as stochastic effects with standard deviation \\(\\mathrm{SD(\\boldsymbol{\\epsilon})}=\\)sd_R. The random effects are sampled from a zero-centered multivariate normal with covariance matrix \\(\\boldsymbol{\\mathrm{P_{cov}}}\\). model { vector[I] mu = col(re_P, 1); //temporary individual-level intercepts vector[I] beta = col(re_P, 2); //temporary individual-level slopes //model likelihood //use index id to match response vector length z ~ normal(mu_0 + mu[id] + (beta_1 + beta[id]).*x, sd_R); for(i in 1:I) //each individual&#39;s random effects ~ MVN(0,P_cov) re_P[i] ~ multi_normal([0,0], Pcov); //priors //fixed effects mu_0 ~ normal(0,1); beta_1 ~ normal(0,1); //random effects Pcor ~ lkj_corr(2); to_vector(sd_P) ~ cauchy(0,1); sd_R ~ cauchy(0,1); } Model priors are set for all parameters declared in the original programming block, while transformed parameters do not receive priors. We use general purpose, weakly regularizing priors to reduce the risk of inferential bias and enhance model identification, which will be crucial for SAMs relying on interactions among many latent variables. Interested readers should see Lemoine (2019) and McElreath (2020) for further discussion on the choice of model priors, as well as the clear limitations of using highly diffuse, flat, and/or improper priors that are more commonly utilized. Finally, rather than post-processing the posterior SDs ourselves to derive variances, we can instead use the generated quantities block to calculate the variances during model estimation. generated quantities { vector[2] V_P = sd_P .* sd_P; //RN intercept [1] and slope [2] variance real V_R = sd_R * sd_R; //residual variance (=Sigma matrix) } The posterior object returned from this model will now contain the random effects variances and covariance matrix, along with the SDs and correlation matrix. Each of the blocks can now be saved together in a single .stan file, which can be accomplished with a text editor or inside R. write(&quot; data { int&lt;lower=1&gt; N; //length of response vector/total observations int&lt;lower=1&gt; I; //number of individuals int&lt;lower=1&gt; id[N]; //N integer indices matching observations of z to the individual identity vector[N] x; //vector of covariate values for fixed effect vector[N] z; //vector of response values } parameters { //fixed effects real mu_0; //global intercept real beta_1; //fixed effect coefficient for covariate x //random effects corr_matrix[2] Pcor; //correlation matrix of random effects vector&lt;lower=0&gt;[2] sd_P; //standard deviations of random effects real&lt;lower=0&gt; sd_R; //standard deviation of residuals matrix[I,2] re_P; //individual-level phenotypic deviations (random intercepts and slopes) } transformed parameters { cov_matrix[2] Pcov = diag_matrix(sd_P) * Pcor * diag_matrix(sd_P); //cov of random effects } model { vector[I] mu = col(re_P, 1); //temporary individual-level intercepts vector[I] beta = col(re_P, 2); //temporary individual-level slopes //model likelihood //use index id to match response vector length z ~ normal(mu_0 + mu[id] + (beta_1 + beta[id]).*x, sd_R); for(i in 1:I) //each individual&#39;s random effects ~ MVN(0,P_cov) re_P[i] ~ multi_normal([0,0], Pcov); //priors //fixed effects mu_0 ~ normal(0,1); beta_1 ~ normal(0,1); //random effects Pcor ~ lkj_corr(2); to_vector(sd_P) ~ cauchy(0,1); sd_R ~ cauchy(0,1); } generated quantities { vector[2] V_P = sd_P .* sd_P; //RN intercept [1] and slope [2] variance real V_R = sd_R * sd_R; //residual variance (=Sigma matrix) }&quot;, &quot;mod1.stan&quot;) The model is now ready for estimation. We manually specify that the MCMC sampler should use 1500 iterations per chain to converge on the target joint posterior distribution warmup=1500, with the subsequent 1000 iterations used as posterior samples iter = 2500 (i.e. iter - warmup = number of MCMC samples per chain). init = 0 initializes the samplers near null values. Four MCMC chains are used to assess model convergence across independent random samplers chains=4, with one core assigned to each chain for parallel processing cores=4. The adapt_delta=0.90 argument reduces the risk of divergent transitions during sampling. library(rstan) ## Loading required package: StanHeaders ## Loading required package: ggplot2 ## rstan (Version 2.21.2, GitRev: 2e1f913d3ca3) ## For execution on a local, multicore CPU with excess RAM we recommend calling ## options(mc.cores = parallel::detectCores()). ## To avoid recompilation of unchanged Stan programs, we recommend calling ## rstan_options(auto_write = TRUE) ## Do not specify &#39;-march=native&#39; in &#39;LOCAL_CPPFLAGS&#39; or a Makevars file mod1 = stan_model(&quot;mod1.stan&quot;) ## Warning in system(paste(CXX, ARGS), ignore.stdout = TRUE, ignore.stderr = TRUE): &#39;C:/rtools40/usr/mingw_/bin/g++&#39; not found stan_results &lt;- sampling(mod1, data=stan_data, init = 0, warmup=1500, iter = 2500, chains=4, cores=4, control=list(adapt_delta=0.90) ) ## Warning: There were 4 chains where the estimated Bayesian Fraction of Missing Information was low. See ## http://mc-stan.org/misc/warnings.html#bfmi-low ## Warning: Examine the pairs() plot to diagnose sampling problems ## Warning: The largest R-hat is NA, indicating chains have not mixed. ## Running the chains for more iterations may help. See ## http://mc-stan.org/misc/warnings.html#r-hat ## Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. ## Running the chains for more iterations may help. See ## http://mc-stan.org/misc/warnings.html#bulk-ess ## Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. ## Running the chains for more iterations may help. See ## http://mc-stan.org/misc/warnings.html#tail-ess Stan flags a few potential issues with the MCMC sampler. Note that the warning ## Warning in system(paste(CXX, ARGS), ignore.stdout = TRUE, ignore.stderr = TRUE): 'C:/rtools40/usr/mingw_/bin/g++' not found during compilation of the model will sometimes appear on Windows computers and can be safely ignored. Further description of the sampler warnings can be found in the Stan Warning Guide. One warning is that The largest R-hat is NA, indicating chains have not mixed. Stan does not know whether some parameter values are fixed (causing Rhat = NA) because the sampler is stuck, or because the model has been intentionally specified with fixed parameter values (e.g. diagonals fixed to 1 in a correlation matrix or an intercept forced to 0). For the specified model, this is a harmless warning that can be safely ignored. However, we can also check for issues by looking at the Rhat values of all model parameters using summary() on the saved results. If an expected parameter is missing from the table or shows NA, this likely indicates an unintentional error in the model code. summary(stan_results)$summary[,&quot;Rhat&quot;] ## mu_0 beta_1 Pcor[1,1] Pcor[1,2] Pcor[2,1] Pcor[2,2] sd_P[1] sd_P[2] sd_R re_P[1,1] re_P[1,2] re_P[2,1] re_P[2,2] ## 1.0001866 1.0010615 NaN 1.0038601 1.0038601 0.9989995 1.0812931 1.1696989 1.0424103 0.9995142 1.0212424 1.0061121 1.0317552 ## re_P[3,1] re_P[3,2] re_P[4,1] re_P[4,2] re_P[5,1] re_P[5,2] re_P[6,1] re_P[6,2] re_P[7,1] re_P[7,2] re_P[8,1] re_P[8,2] re_P[9,1] ## 1.0040134 1.0028653 1.0325136 1.0098195 1.0088487 1.0006551 1.0018481 1.0251804 1.0013540 0.9998871 1.0062003 1.0012302 1.0007093 ## re_P[9,2] re_P[10,1] re_P[10,2] re_P[11,1] re_P[11,2] re_P[12,1] re_P[12,2] re_P[13,1] re_P[13,2] re_P[14,1] re_P[14,2] re_P[15,1] re_P[15,2] ## 1.0004638 1.0008705 1.0064663 1.0100113 1.0174203 1.0039323 1.0173238 1.0073904 1.0034650 0.9998718 1.0017536 1.0195640 1.0004734 ## re_P[16,1] re_P[16,2] re_P[17,1] re_P[17,2] re_P[18,1] re_P[18,2] re_P[19,1] re_P[19,2] re_P[20,1] re_P[20,2] re_P[21,1] re_P[21,2] re_P[22,1] ## 1.0138966 1.0162388 1.0150671 1.0041542 1.0000026 1.0013208 1.0012233 1.0171752 1.0273275 1.0415374 1.0107036 1.0012705 1.0146563 ## re_P[22,2] re_P[23,1] re_P[23,2] re_P[24,1] re_P[24,2] re_P[25,1] re_P[25,2] re_P[26,1] re_P[26,2] re_P[27,1] re_P[27,2] re_P[28,1] re_P[28,2] ## 1.0428521 1.0081453 1.0193742 1.0008234 1.0001678 0.9998535 1.0222851 1.0087062 1.0160052 1.0164832 1.0009385 1.0049143 1.0072258 ## re_P[29,1] re_P[29,2] re_P[30,1] re_P[30,2] re_P[31,1] re_P[31,2] re_P[32,1] re_P[32,2] re_P[33,1] re_P[33,2] re_P[34,1] re_P[34,2] re_P[35,1] ## 0.9997115 1.0019752 1.0049654 1.0039056 1.0012116 1.0003003 1.0007067 0.9999861 1.0126292 1.0262567 1.0038914 1.0032399 1.0104413 ## re_P[35,2] re_P[36,1] re_P[36,2] re_P[37,1] re_P[37,2] re_P[38,1] re_P[38,2] re_P[39,1] re_P[39,2] re_P[40,1] re_P[40,2] re_P[41,1] re_P[41,2] ## 1.0579144 1.0062571 1.0582066 1.0025473 1.0006752 1.0079226 1.0063486 0.9993380 1.0035424 1.0026680 1.0283883 1.0131400 1.0278803 ## re_P[42,1] re_P[42,2] re_P[43,1] re_P[43,2] re_P[44,1] re_P[44,2] re_P[45,1] re_P[45,2] re_P[46,1] re_P[46,2] re_P[47,1] re_P[47,2] re_P[48,1] ## 0.9997732 1.0004531 1.0000031 1.0013029 1.0014162 1.0134261 1.0078277 1.0396596 1.0012853 0.9994068 1.0092825 0.9996345 1.0046620 ## re_P[48,2] re_P[49,1] re_P[49,2] re_P[50,1] re_P[50,2] Pcov[1,1] Pcov[1,2] Pcov[2,1] Pcov[2,2] V_P[1] V_P[2] V_R lp__ ## 1.0410539 1.0025657 1.0428440 1.0028445 1.0056605 1.0447255 1.0101876 1.0101876 1.0868016 1.0447255 1.0868016 1.0431303 1.3330570 In addition to the Rhat warning, the effective sample sizes of some model parameters are too low to ensure accurate inferences. It is helpful to see which parameters are causing these warnings by sorting on the lowest n_eff values in the summary table. sort(summary(stan_results)$summary[,&quot;n_eff&quot;]) ## lp__ sd_P[2] Pcov[2,2] V_P[2] re_P[35,2] sd_P[1] re_P[36,2] re_P[22,2] re_P[48,2] re_P[20,2] re_P[49,2] Pcov[1,1] V_P[1] ## 15.26822 23.96759 54.29768 54.29768 67.74263 75.18947 90.40546 105.27222 117.21219 119.78104 122.29901 123.14807 123.14807 ## re_P[45,2] V_R sd_R re_P[4,1] re_P[2,2] re_P[33,2] re_P[20,1] re_P[41,2] re_P[6,2] re_P[40,2] re_P[25,2] re_P[1,2] re_P[15,1] ## 128.28017 130.15963 132.48614 166.61107 184.12711 190.35046 209.90368 227.34437 234.16746 237.50135 263.78795 264.21056 288.17499 ## re_P[27,1] re_P[11,2] re_P[12,2] re_P[17,1] re_P[22,1] re_P[23,2] re_P[26,2] re_P[41,1] re_P[19,2] re_P[16,2] re_P[16,1] re_P[33,1] re_P[11,1] ## 295.29151 321.94692 362.92326 367.02533 370.28266 383.04544 417.13313 424.19677 430.85809 436.20201 438.08393 465.09093 485.39701 ## re_P[21,1] re_P[35,1] re_P[47,1] re_P[26,1] re_P[44,2] re_P[4,2] re_P[5,1] Pcov[1,2] Pcov[2,1] re_P[23,1] re_P[13,1] re_P[45,1] re_P[8,1] ## 498.76377 534.16603 559.78227 581.00302 584.22534 665.03142 668.88452 730.44467 730.44467 749.83008 756.59351 766.75672 789.25258 ## re_P[38,1] Pcor[1,2] Pcor[2,1] re_P[34,1] re_P[12,1] re_P[28,1] re_P[36,1] re_P[38,2] re_P[30,1] re_P[48,1] re_P[10,2] re_P[2,1] re_P[40,1] ## 821.67929 849.11656 849.11656 1039.31075 1112.46000 1119.26195 1214.65385 1438.31862 1438.43464 1466.94702 1506.05643 1649.23484 1660.77412 ## re_P[3,1] re_P[28,2] re_P[50,2] re_P[7,1] re_P[37,1] re_P[34,2] re_P[13,2] re_P[6,1] re_P[49,1] re_P[17,2] re_P[50,1] re_P[14,2] beta_1 ## 1687.27203 1707.66604 1781.46118 1802.79710 1856.65935 1947.21636 2248.38892 2365.55163 2418.72437 2479.45321 2690.66471 2721.74756 2806.94114 ## re_P[3,2] re_P[9,1] re_P[31,1] mu_0 re_P[30,2] re_P[29,2] re_P[43,1] re_P[21,2] re_P[10,1] re_P[15,2] re_P[39,2] re_P[29,1] re_P[37,2] ## 2931.29664 2986.20288 3084.52637 3119.08045 3218.64641 3247.08911 3272.43918 3377.79375 3424.60753 3449.88436 3482.38910 3637.78696 3689.06814 ## re_P[32,1] re_P[19,1] re_P[8,2] re_P[46,1] Pcor[2,2] re_P[24,1] re_P[31,2] re_P[18,1] re_P[43,2] re_P[25,1] re_P[27,2] re_P[32,2] re_P[47,2] ## 3771.65506 3787.67248 3910.75487 3934.58602 4063.76982 4065.65170 4091.74611 4105.41199 4141.32326 4152.60398 4201.58872 4239.71420 4245.17486 ## re_P[44,1] re_P[9,2] re_P[5,2] re_P[18,2] re_P[46,2] re_P[14,1] re_P[1,1] re_P[7,2] re_P[24,2] re_P[39,1] re_P[42,2] re_P[42,1] ## 4261.74091 4390.40171 4427.03077 4451.85435 4515.64231 4518.27656 4745.37540 4927.73741 5025.49838 5121.03508 5373.80767 5425.80465 It is typical that individual-specific trait values in re_P have relatively lower effective sample sizes than the population-level parameters of primary interest. More damningly, however, we also see an extremely low effective sample for lp__, which is the joint log density of the model (up to a constant internally defined scale factor). This provides further evidence that the model, as currently defined, is poorly identified. The key random effect SDs sd_P and variances V_P are also very poorly sampled, along with the residual SD sd_R and variance V_R. We could run the MCMC sampler for more iterations, increase the warm-up period, and change various other manual control settings. However, the deeper issue here is not that the model is formally mispecified but rather that we have inefficiently parametrized the model for sampling. 1.4.1 Cholesky decompositions Although the .stan file appropriately represents the formal model, it is programmed in such a way that the MCMC sampler has troubling sampling from the joint posterior distribution of the model. One of the first things we can do to increase efficiency is to reduce redundant computation over matrices in our model. This can be done with Cholesky decompositions. For any positive definite matrix \\(\\boldsymbol{\\Omega}\\), a Cholesky decomposition can be defined such that \\[\\boldsymbol{\\Omega} = \\boldsymbol{\\mathrm{L}_{\\Omega}} \\boldsymbol{\\mathrm{L}_{\\Omega}}^{\\mathrm{T}}\\] where \\(\\boldsymbol{\\mathrm{L}_{\\Omega}}\\) is a lower-triangular matrix and \\(^{\\mathrm{T}}\\) indicates matrix transposition. This property means that we can always do computations of reduced dimensionality on the lower-triangular matrix \\(\\boldsymbol{\\mathrm{L}_{\\Omega}}\\) and subsequently recover the full positive-definitive matrix \\(\\boldsymbol{\\Omega}\\) by post-multiplying \\(\\boldsymbol{\\mathrm{L}_{\\Omega}}\\) with its transpose. Stan provides many built-in functions for easily defining and manipulating Cholesky decomposed matrices, which we can use to reparametrize the .stan file. Comments are added below where Cholesky decompositions have been introduced. data { int&lt;lower=1&gt; N; int&lt;lower=1&gt; I; int&lt;lower=1&gt; id[N]; vector[N] x; vector[N] z; } parameters { real mu_0; real beta_1; cholesky_factor_corr[2] LPcor; //lower tri Cholesky of random effect cor matrix vector&lt;lower=0&gt;[2] sd_P; real&lt;lower=0&gt; sd_R; matrix[I,2] re_P; } transformed parameters { cholesky_factor_cov[2] LPcov = diag_pre_multiply(sd_P, LPcor); //Cholesky of random effect cov } model { vector[I] mu = col(re_P, 1); vector[I] beta = col(re_P, 2); z ~ normal(mu_0 + mu[id] + (beta_1 + beta[id]).*x, sd_R); for(i in 1:I) re_P[i] ~ multi_normal_cholesky([0,0], LPcov); //likelihood expecting Cholesky cov mu_0 ~ normal(0,1); beta_1 ~ normal(0,1); LPcor ~ lkj_corr_cholesky(2); //prior for Cholesky matrix to_vector(sd_P) ~ cauchy(0,1); sd_R ~ cauchy(0,1); } generated quantities { vector[2] V_P = sd_P .* sd_P; real V_R = sd_R * sd_R; corr_matrix[2] Pcor = LPcor*LPcor&#39; ; //multiply by transpose to get full cor matrix cov_matrix[2] Pcov = diag_matrix(V_P) * Pcor * diag_matrix(V_P); //full cov matrix The full covariance and correlation matrices are now specified in the generated quantities block. 1.4.2 Non-centered random effects Before running this model, we can also reparametrize the random effects to further enhance efficiency. Currently, we express the unobserved random effects in re_P as being generated from a distribution with unobserved lower Cholesky covariance matrix LPcov. While mathematically appropriate, this specification can make it difficult for the model to identify the scale of the random effects. An alternative but mathematically equivalent parametrization can be used to separate out the scale of the random effect deviations from the population-level (co)variances, which often will enhance model identification. Note that any normally distributed random variable \\(\\boldsymbol{z}\\) where \\[\\boldsymbol{z} \\sim \\mathrm{Normal}(0,\\sigma_z)\\] can also be expressed as a standard normal variable \\(z_{std}\\) scaled by the original SD \\[\\boldsymbol{z} \\equiv \\boldsymbol{z_{\\mathrm{std}}}\\sigma_z\\] \\[\\boldsymbol{z_{\\mathrm{std}}} \\sim \\mathrm{Normal}(0,1)\\] Similarly for a n x p matrix \\(\\boldsymbol{Z}\\) of p multivariate phenotypes with covariance matrix \\(\\boldsymbol{\\mathrm{C}}\\) \\[\\boldsymbol{Z} \\equiv \\boldsymbol{Z_{\\mathrm{std}}} \\boldsymbol{\\mathrm{L}_{\\boldsymbol{\\mathrm{C}}}}^{\\mathrm{T}}\\] \\[\\mathrm{vec}(\\boldsymbol{Z_{\\mathrm{std}}}) \\sim \\mathrm{MVNormal}(\\boldsymbol{0},\\boldsymbol{\\mathrm{I}})\\] where \\(\\boldsymbol{\\mathrm{L}_{\\boldsymbol{\\mathrm{C}}}}\\) is the lower-triangular Cholesky decomposition. Implementing this so-called non-centered parametrization is straightforward in Stan and can of course also be applied to correlation matrices. Building on the Cholesky decompositions added in the previous subsection, and using the ' symbol for the transpose function write(&quot; data { int&lt;lower=1&gt; N; int&lt;lower=1&gt; I; int&lt;lower=1&gt; id[N]; vector[N] x; vector[N] z; } parameters { real mu_0; real beta_1; cholesky_factor_corr[2] LPcor; vector&lt;lower=0&gt;[2] sd_P; real&lt;lower=0&gt; sd_R; matrix[I,2] std_P; //now matrix of standard normals (see priors below) } transformed parameters { matrix[I,2] re_P = std_P * diag_pre_multiply(sd_P,LPcor)&#39;; //non-centered parameterization } model { vector[I] mu = col(re_P, 1); vector[I] beta = col(re_P, 2); z ~ normal(mu_0 + mu[id] + (beta_1 + beta[id]).*x, sd_R); mu_0 ~ normal(0,1); beta_1 ~ normal(0,1); to_vector(std_P) ~ std_normal(); //new prior distribution over standard normal deviations LPcor ~ lkj_corr_cholesky(2); to_vector(sd_P) ~ cauchy(0,1); sd_R ~ cauchy(0,1); } generated quantities { vector[2] V_P = sd_P .* sd_P; real V_R = sd_R * sd_R; corr_matrix[2] Pcor = LPcor*LPcor&#39; ; cov_matrix[2] Pcov = diag_matrix(V_P) * Pcor * diag_matrix(V_P); }&quot;, &quot;mod1.stan&quot;) Note that the specification of the random effects has been greatly simplified with the non-centered parametrization. By separating out the scale of the deviations and the population-level (co)variances, it becomes unnecessary to directly specify the generative distribution of the full random effects as above. Instead, the full distribution is partitioned into three independent priors over the random effect standard normal deviations, SDs, and correlations, and the generative distribution of these values is specified directly through the scaling of the standard normals, i.e. re_P = std_P * diag_pre_multiply(sd_P,LP_cor)'=\\(\\boldsymbol{Z} \\equiv \\boldsymbol{Z_{\\mathrm{std}}} \\boldsymbol{\\mathrm{L}_{\\boldsymbol{\\mathrm{C}}}}^{\\mathrm{T}}\\) above. This should make the model much easier to sample from. library(rstan) mod1 = stan_model(&quot;mod1.stan&quot;) ## Warning in system(paste(CXX, ARGS), ignore.stdout = TRUE, ignore.stderr = TRUE): &#39;C:/rtools40/usr/mingw_/bin/g++&#39; not found stan_results2 &lt;- sampling(mod1, data=stan_data, init = 0, warmup=1500, iter = 2500, chains=4, cores=4, control=list(adapt_delta=0.90) ) #extracts posterior estimates MCMCsamples &lt;- extract(stan_results2) The absence of warning messages indicates that our mathematically equivalent reparametrizations have enhanced the efficiency of the MCMC sampler. The posterior samples of the model can subsequently be extracted, summarized, visualized, and manipulated. E.g. post_beta_1 = MCMCsamples$beta_1 #extract population-level slope median(post_beta_1) #central tendency of posterior ## [1] 0.3888556 mad(post_beta_1) #dispersion around central tendency ## [1] 0.1251317 quantile(post_beta_1, c(0.05,0.95)) #90% credible interval ## 5% 95% ## 0.1735154 0.5951586 sum(post_beta_1 &gt; 0)/length(post_beta_1) #posterior probability of + effect ## [1] 0.99875 hist(post_beta_1) #MCMC approximation of posterior distribution We encourage the use of the shinystan R package for deeper inspection of model convergence and results with a GUI. In general, researchers should be skeptical of reporting results accompanied with sampler warnings and should seek to remove any diagnostic concerns prior to biological interpretation of the estimates. 1.5 Animal models The model presented above assumes a single set of individual-specific intercepts and slopes, as defined by the mu and beta vectors in the .stan file. For quantitative genetic analysis with an animal model, these phenotypic effects can be further decomposed into distinct genetic and permanent environmental trait values. In particular, we expand the random phenotypic deviations so that \\[ \\boldsymbol{\\mu_{\\mathrm{ }}} = \\boldsymbol{\\mu_{\\mathrm{A}}} + \\boldsymbol{\\mu_{\\mathrm{E}}}, \\quad \\boldsymbol{\\beta_{\\mathrm{ }}} = \\boldsymbol{\\beta_{\\mathrm{A}}} + \\boldsymbol{\\beta_{\\mathrm{E}}}\\] \\[ \\begin{bmatrix} \\boldsymbol{\\mu_{\\mathrm{A}}} \\\\ \\boldsymbol{\\beta_{\\mathrm{A}}} \\end{bmatrix} \\sim \\mathrm{MVNormal}(\\boldsymbol{0}, \\boldsymbol{\\mathrm{G}} \\otimes \\boldsymbol{\\mathrm{A}}) : \\boldsymbol{\\mathrm{G}} = \\begin{bmatrix} \\mathrm{Var}( \\boldsymbol{\\mu_{\\mathrm{A}}} ) &amp; \\mathrm{Cov}( \\boldsymbol{\\mu_{\\mathrm{A}}}, \\boldsymbol{\\beta_{\\mathrm{A}}}) \\\\ \\mathrm{Cov}(\\boldsymbol{\\beta_{\\mathrm{A}}}, \\boldsymbol{\\mu_{\\mathrm{A}}} ) &amp; \\mathrm{Var}( \\boldsymbol{\\beta_{\\mathrm{A}}} ) \\end{bmatrix} \\] \\[ \\begin{bmatrix} \\boldsymbol{\\mu_{\\mathrm{E}}} \\\\ \\boldsymbol{\\beta_{\\mathrm{E}}} \\end{bmatrix} \\sim \\mathrm{MVNormal}(\\boldsymbol{0}, \\boldsymbol{\\mathrm{E}} \\otimes \\boldsymbol{\\mathrm{I}}) : \\boldsymbol{\\mathrm{E}} = \\begin{bmatrix} \\mathrm{Var}( \\boldsymbol{\\mu_{\\mathrm{E}}} ) &amp; \\mathrm{Cov}( \\boldsymbol{\\mu_{\\mathrm{E}}}, \\boldsymbol{\\beta_{\\mathrm{E}}}) \\\\ \\mathrm{Cov}(\\boldsymbol{\\beta_{\\mathrm{E}}}, \\boldsymbol{\\mu_{\\mathrm{E}}} ) &amp; \\mathrm{Var}( \\boldsymbol{\\beta_{\\mathrm{E}}} ) \\end{bmatrix} \\] where \\(\\boldsymbol{\\mathrm{A}}\\) is a positive-definite relatedness matrix derived from pedigree or molecular data. As we explain below, challenges arise when estimating such a model in Stan due to the difficulty of computing Kronecker products and the identification of genetic effects. 1.5.1 Simulate data We use a custom function pedfun to generate an appropriately sized, positive-definite matrix for data simulation, which has been modified from prior work by Thomson et al. (2018). This function is also utilized in the simulation code provided on the Github page. We supply basic demographic settings and generate \\(\\boldsymbol{\\mathrm{A}}\\), and we increase the sample size to N=300 to aid parameter estimate. #custom function library(MCMCglmm) library(Matrix) pedfun &lt;- function(popmin, popmax, ngenerations, epm, nonb, nids, I, missing=FALSE){ # get list of individuals and their generations gener&lt;-1:ngenerations genern &lt;- rep(1:ngenerations, times = nids) ID &lt;- 1:sum(nids) # runs on generation-by-generation basis for(i in 1:ngenerations){ id&lt;-ID[which(genern==i)] dam&lt;-rep(NA, nids[i]) sire&lt;-rep(NA, nids[i]) # randomly allocates sex (0 = male, 1 = female) sex&lt;-sample(c(0,1), length(id), replace=TRUE) # for first generation, no dams or sires are known # so remain NA if(i==1){ # combine into single data frame pedigree&lt;-data.frame(id=id, dam=dam, sire=sire, generation=i, sex=sex) } else if(i&gt;1){ # for all generations after first # list of all possible dams and sires # from previous generation pdams&lt;-pedigree$id[which(pedigree$generation==(i-1) &amp; pedigree$sex==1)] psires&lt;-pedigree$id[which(pedigree$generation==(i-1) &amp; pedigree$sex==0)] # determine number of pairs # depending on how many males and females # and the proportion of the population that is non-breeding npairs&lt;-min(length(pdams), length(psires)) - round(min(length(pdams), length(psires))*nonb) # selects breeding males and females pdams&lt;-pedigree$id[which(pedigree$generation==(i-1) &amp; pedigree$sex==1)] psires&lt;-pedigree$id[which(pedigree$generation==(i-1) &amp; pedigree$sex==0)] if(length(pdams)&lt;npairs | length(psires)&lt;npairs){ npairs&lt;-min(length(pdams), length(psires)) } # selects pairs from possible dams and sires pairs&lt;-data.frame(dam=sample(pdams, npairs, replace=FALSE), sire=sample(psires, npairs, replace=FALSE)) # gives each offspring their parental pair pairid&lt;-as.numeric(sample(rownames(pairs), length(id), replace=TRUE)) # gives each offspring their sex sex&lt;-sample(c(0,1), length(id), replace=TRUE) # put into dataframe format addped&lt;-data.frame(id=id, dam=pairs$dam[pairid], sire=pairs$sire[pairid], generation=i, sex=sex) # deals with extra-pair mating (if included) if(!is.null(epm)){ # for each individual, sample if they are extra pair # if 0 not extra pair # if 1 sire resampled from breeding population # if 2 dam resampled ext&lt;-sample(c(0,1,2), nrow(addped), replace=TRUE, prob = c(1-epm, epm/2, epm/2)) for(j in 1:nrow(addped)){ if(ext[j]&gt;0){ if(ext[j]==1){ addped$sire[j]&lt;-sample(psires,1,replace=TRUE) }else if (ext[j]==2){ addped$dam[j]&lt;-sample(pdams,1,replace=TRUE) } } } } # add new generation to the whole pedigree pedigree&lt;-rbind(pedigree, addped) } } ped &lt;- pedigree # make id&#39;s non-numeric ped$id&lt;-paste(&quot;ID&quot;,ped$id, sep=&quot;&quot;) ped$dam[which(!is.na(ped$dam))]&lt;-paste(&quot;ID&quot;,ped$dam[which(!is.na(ped$dam))], sep=&quot;&quot;) ped$sire[which(!is.na(ped$sire))]&lt;-paste(&quot;ID&quot;,ped$sire[which(!is.na(ped$sire))], sep=&quot;&quot;) ped$id&lt;-as.character(ped$id) ped$dam&lt;-as.character(ped$dam) ped$sire&lt;-as.character(ped$sire) IDs &lt;- sample(ped[ped$generation==ngenerations, &quot;id&quot;], I, replace=FALSE) ped &lt;- prunePed(ped, keep = IDs, make.base=TRUE) inv.phylo &lt;- inverseA(ped[,c(&quot;id&quot;,&quot;dam&quot;,&quot;sire&quot;)]) A &lt;- solve(inv.phylo$Ainv) A &lt;- cov2cor(A) A = (A + t(A))/2 # Not always symmetric after inversion A &lt;- as.matrix(A) rownames(A) &lt;- rownames(inv.phylo$Ainv) colnames(A) &lt;- rownames(inv.phylo$Ainv) #subset to final generation A_sub&lt;-A[IDs,IDs] A_mat &lt;- as.matrix(nearPD(A_sub)$mat) A_mat &lt;- cov2cor(A_mat) return(A_mat) } #population properties I=300 #total individuals for simulation popmin=400 popmax=600 ngenerations = 10 nids&lt;-sample(popmin:popmax, ngenerations, replace=TRUE) #N / generation epm = sample(seq(0.15, 0.25,by=0.05),1) #extra-pair mating nonb = sample(seq(0.4,0.6,by=0.05),1) #proportion of non-breeding / generation #relatedness matrix A_mat &lt;- pedfun(popmin=popmin, popmax=popmax, ngenerations=ngenerations, epm=epm, nonb=nonb, nids=nids, I=I, missing=FALSE) We can now simulate a new dataset using the code from above, partitioning the distinct additive genetic and permanent environmental trait values. We include a third measurement per individual to enhance estimation of the individual-level RN intercepts and slopes. library(mvtnorm) N = 900 #total observations (3x/individual) I = 300 #total individuals intercept = 1 #global intercept beta1 = 0.3 #fixed effect regression coefficient SD_intercept = 0.3 #standard deviation of random intercepts SD_slope = 0.3 SD_residual = 1 r_G = 0.5 #genetic correlation of random intercepts and slopes r_E = -0.5 #environmental correlation V_G = 0.3 #genetic variance of REs V_E = 0.3 #genetic variance of REs #Random effect correlations G_cor &lt;- matrix(c(1,r_G,r_G,1), nrow=2, ncol=2) #mu_A, beta_A G_sd &lt;- c(sqrt(V_G),sqrt(V_G)) #G effect sds G_cov &lt;- diag(G_sd) %*% G_cor %*% diag(G_sd) E_cor &lt;- matrix(c(1,r_E,r_E,1), nrow=2, ncol=2) #mu_E, beta_E E_sd &lt;- c(sqrt(V_E),sqrt(V_E)) #E effect sds E_cov &lt;- diag(E_sd) %*% E_cor %*% diag(E_sd) #matrices G_block &lt;- G_cov %x% A_mat E_block &lt;- E_cov %x% diag(1,I) #generate correlated REs Gvalues &lt;- rmvnorm(1, mean=rep(0,I*2), sigma=G_block) G_val = data.frame(matrix(Gvalues, nrow=I, ncol=2)) cor(G_val) ## X1 X2 ## X1 1.0000000 0.5379933 ## X2 0.5379933 1.0000000 Evalues &lt;- rmvnorm(1, mean=rep(0,I*2), sigma=E_block) E_val = data.frame(matrix(Evalues, nrow=I, ncol=2)) cor(E_val) ## X1 X2 ## X1 1.0000000 -0.4239667 ## X2 -0.4239667 1.0000000 #combine re_P = cbind(G_val,E_val) colnames(re_P) = c(&quot;mu_A&quot;, &quot;beta_A&quot;, &quot;mu_E&quot;, &quot;beta_E&quot;) #individual-level index id = rep(seq(1, I), each = N/I) #i.e. two observations per individual #simulate fixed effect covariate x = rnorm(N,0,1) #individual phenotypic REs mu = re_P$mu_A + re_P$mu_E beta = re_P$beta_A + re_P$beta_E #residual effects epsilon = rnorm(N, 0, SD_residual ) #measured response z = intercept + mu[id] + (beta1 + beta[id])*x + epsilon #combine into list for Stan stan_data = list(z = z, x = x, id = id, N = N, I = I, A = A_mat) 1.5.2 Kronecker products We now need to edit the Stan file to partition the genetic and environmental values. Unfortunately, there are no in-built Stan functions for efficiently computing Kronecker products \\(\\otimes\\). This could be overcome by manually specifying the Kronecker product function in the optional functions block of the model. However, Kronecker products can be incredibly costly to compute, particularly for large matrices. Its thus desirable to find another alternative but mathematically equivalent parametrization to return random effects appropriately scaled by \\(\\boldsymbol{\\mathrm{G}} \\otimes \\boldsymbol{\\mathrm{A}}\\) without directly computing this term, as we did above with the Cholesky decomposition and non-centered random effects. Fortunately, this can be easily accomplished by exploiting the properties of the matrix normal distribution, which generalizes the multivariate normal distribution to random variables described by matrices (Gupta and Nagar 2018). In particular, the matrix normal distribution for some n x p matrix \\(\\boldsymbol{\\mathrm{Z}}\\) of p phenotypes is given by \\[ \\boldsymbol{\\mathrm{Z}} \\sim \\mathrm{Matrix\\ Normal_{n \\ x \\ p}}(\\boldsymbol{\\mathrm{M}}, \\boldsymbol{\\mathrm{U}}, \\boldsymbol{\\mathrm{V}}) \\] where \\(\\boldsymbol{\\mathrm{M}}\\) is a matrix of expected values and \\(\\boldsymbol{\\mathrm{U}}\\) and \\(\\boldsymbol{\\mathrm{V}}\\) are scaling matrices describing the among-row and among-column (co)variance respectively. This lesser known distribution generalizes from the multivariate normal distribution such that any matrix \\(\\boldsymbol{\\mathrm{Z}}\\) will be matrix normally distributed if and only if \\[ \\mathrm{vec}(\\boldsymbol{\\mathrm{Z}}) \\sim \\mathrm{MVNormal_{np}}(\\mathrm{vec}(\\boldsymbol{\\mathrm{M}}), \\boldsymbol{\\mathrm{V}} \\otimes \\boldsymbol{\\mathrm{U}} ) \\] where \\(\\mathrm{vec}()\\) is the vector operator, as used above in the mod1.stan file. Given that we are interested in generating random effects with covariance \\(\\boldsymbol{\\mathrm{G}} \\otimes \\boldsymbol{\\mathrm{A}}\\), direct computation of the Kronecker product can be avoided by instead sampling the random effects from a matrix normal distribution with the appropriate scaling matrices, i.e. for the for the I x 2 matrix of additive genetic intercepts and slope deviations for I individuals \\[ \\begin{bmatrix} \\boldsymbol{\\mu_{\\mathrm{A}}} &amp; \\boldsymbol{\\beta_{\\mathrm{A}}} \\end{bmatrix} \\sim \\mathrm{Matrix\\ Normal_{I \\ x \\ 2}}(\\boldsymbol{\\mathrm{0}}, \\boldsymbol{\\mathrm{A}}, \\boldsymbol{\\mathrm{G}}) \\] We can use the non-centered parameterization described above for the multivariate normal distribution to also more efficiently sample from this matrix normal distribution. In particular, a matrix \\(\\boldsymbol{\\mathrm{Z_{_{I \\ x \\ 2}}}}\\) can be defined for I individual standard normal deviations on each of 2 random effects, which are distributed such that \\[\\boldsymbol{\\mathrm{Z_{std}}} \\sim \\mathrm{Matrix\\ Normal_{I \\ x \\ 2}}(\\boldsymbol{\\mathrm{0}}, \\boldsymbol{\\mathrm{I}}, \\boldsymbol{\\mathrm{I}}) \\] The desired matrix of appropriately scaled, zero-centered random effects can then be defined such that \\[\\begin{bmatrix} \\boldsymbol{\\mu_{\\mathrm{A}}} &amp; \\boldsymbol{\\beta_{\\mathrm{A}}} \\end{bmatrix} = \\boldsymbol{0}+\\boldsymbol{\\mathrm{L_A}} \\boldsymbol{\\mathrm{Z_{std}}} \\boldsymbol{\\mathrm{L_G}}^{\\mathrm{T}}\\] where \\[\\begin{bmatrix} \\boldsymbol{\\mu_{\\mathrm{A}}} &amp; \\boldsymbol{\\beta_{\\mathrm{A}}} \\end{bmatrix} \\sim \\mathrm{Matrix\\ Normal_{I \\ x \\ 2}}(\\boldsymbol{0}, \\boldsymbol{\\mathrm{L_A}} \\boldsymbol{\\mathrm{L_A}}^{\\mathrm{T}}, \\boldsymbol{\\mathrm{L_G}} \\boldsymbol{\\mathrm{L_G}}^{\\mathrm{T}} )\\] As explained above, \\(\\boldsymbol{\\mathrm{L_A}}\\) is the lower triangular Cholesky decomposition of the \\(\\boldsymbol{\\mathrm{A}}\\) matrix, while \\(\\boldsymbol{\\mathrm{L_G}}^{\\mathrm{T}}\\) is the transpose of the lower triangular Cholesky decomposition of the \\(\\boldsymbol{\\mathrm{G}}\\) covariance matrix. This sampling property of the matrix normal distribution therefore facilitates sampling from \\[ \\mathrm{vec}( \\begin{bmatrix} \\boldsymbol{\\mu_{\\mathrm{A}}} &amp; \\boldsymbol{\\beta_{\\mathrm{A}}} \\end{bmatrix} ) \\sim \\mathrm{MVNormal_{np}}(\\mathrm{vec}(\\boldsymbol{\\mathrm{0}}), \\boldsymbol{\\mathrm{G}} \\otimes \\boldsymbol{\\mathrm{A}} )\\] through the multiplication of the \\(\\boldsymbol{\\mathrm{Z_{std}}}\\), \\(\\boldsymbol{\\mathrm{L_A}}\\), and \\(\\boldsymbol{\\mathrm{L_G}}^{\\mathrm{T}}\\) matrices. This useful sampling property is straightforward to implement in Stan with appropriate data and can be used to account for any form of random effect covariation among individuals, which may extend beyond \\(\\boldsymbol{\\mathrm{A}}\\) alone. Thomson et al. (2018) provide an extensive review of various additional sources of autocorrelation that should be considered in quantitative genetic analyses. Note that this matrix normal approach is key to efficient estimation of the SAM as well, as demonstrated in the subsequent tutorials. Here we review the relevant code in Stan to highlight how any Kronecker product could be implemented more generally. The code of mod1.stan can be modified accordingly, so that the basic linear mixed-effects model for phenotypic analysis becomes a linear animal model for quantitative genetic analysis. The relatedness matrix \\(\\boldsymbol{{\\mathrm{A}}}\\) is now declared in the data block, while the lower triangle Cholesky decomposition matrix \\(\\boldsymbol{\\mathrm{L_A}}\\) is generated in the transformed data block. data { int&lt;lower=0&gt; N; int&lt;lower=0&gt; I; int&lt;lower=0&gt; id[N]; vector[N] x; vector[N] z; matrix[I,I] A; //new relatedness matrix } transformed data{ matrix[I,I] LA = cholesky_decompose(A); //lower triangle relatedness matrix } New parameters are also declared for the separate genetic (G) and permanent environmental (E) effects. parameters { //fixed effects real mu_0; real beta_1; //random effects cholesky_factor_corr[2] LGcor; //LC genetic correlation matrix cholesky_factor_corr[2] LEcor; //LC permanent environmental correlation matrix vector&lt;lower=0&gt;[2] sd_G; //SD of genetic effects vector&lt;lower=0&gt;[2] sd_E; //SD of environmental effects real&lt;lower=0&gt; sd_R; matrix[I,2] std_G; //matrix of standard normals for G effects matrix[I,2] std_E; //matrix of standard normals for E effects } The appropriately scaled random deviations can then be specified in the transformed parameters block. The matrix normal parametrization, i.e. \\(\\left[ \\boldsymbol{\\mu_A}, \\boldsymbol{\\beta_A}\\right] =0+\\mathrm{L_A}\\mathrm{Z_{std_G}}(\\mathrm{G_{sd}}\\mathrm{L}_{G_{cor}})^{\\mathrm{T}}\\) where \\(\\mathrm{G_{sd}}\\mathrm{L}_{G_{cor}}=\\mathrm{L}_{G_{}}\\) is the lower Cholesky covariance matrix, is required for the additive genetic random effects, while the simpler non-centered approach may instead be used for the permanent environmental effects that are independently distributed among individuals. The ' function can again be used to return the transpose of the Cholesky decomposed covariance matrices in Stan. transformed parameters { matrix[I,2] re_G = LA * std_G * diag_pre_multiply(sd_G,LGcor)&#39; ; //matrix normal matrix[I,2] re_E = std_E * diag_pre_multiply(sd_E,LEcor)&#39;; //non-centered vector[I] mu = col(re_G, 1) + col(re_E, 1); //P = G + E vector[I] beta = col(re_G, 2) + col(re_E, 2); //P = G + E } With the addition of new priors in the model block to_vector(std_devG) ~ std_normal(); //standard normal deviates to_vector(std_devE) ~ std_normal(); LGcor ~ lkj_corr_cholesky(2); LEcor ~ lkj_corr_cholesky(2); to_vector(sd_G) ~ cauchy(0,1); to_vector(sd_E) ~ cauchy(0,1); the model will be well defined and equivalent to the simpler formal model defined with Kronecker products of covariance matrices. Note that the permanent environmental effects are defined as they were for the purely phenotypic effects above, without consideration of the Kronecker product \\(\\boldsymbol{\\mathrm{E}}\\otimes\\boldsymbol{\\mathrm{I}}\\). This product indicates that individuals trait values are independent and identically distributed, so that ignoring the Kronecker product in Stan with re_E = std_E * diag_pre_multiply(sd_E,LEcor)' is equivalent to specifying the matrix normal parameterization with additional Cholesky identity matrix \\(\\boldsymbol{\\mathrm{L_{I}}}\\), i.e. re_E = LI * std_E * diag_pre_multiply(sd_E,LE_cor)'. 1.5.3 Identifying genetic effects This matrix normal approach makes the animal model computationally efficient, but a more fundamental issue remains for identifying the scales of the distinct \\(\\boldsymbol{\\mathrm{G}}\\) and \\(\\boldsymbol{\\mathrm{E}}\\) effects during model estimation. Given that \\(\\boldsymbol{\\mathrm{P}}=\\boldsymbol{\\mathrm{G}} + \\boldsymbol{\\mathrm{E}}\\) under the assumption of independent additive effects, it can be difficult to uniquely identify the scale of the distinct genetic and environmental trait values, as any increase/decrease in genetic trait values can be compensated by an equivalent decrease/increase in the environmental trait value to achieve equivalent phenotypic values. In principle, this issue is addressed by the fixed information in \\(\\boldsymbol{\\mathrm{A}}\\) that is provided to the model prior to estimation. In reality, however, relatedness matrices in the wild are often quite sparse, with most elements at or near 0. As a consequence, when a single individual-level parameter is expressed as the sum of two distinct parameters, as differentiated by the scaling of \\(\\boldsymbol{\\mathrm{A}}\\) and \\(\\boldsymbol{\\mathrm{I}}\\), it can be challenging to identify the proportion of variance attributable to each effect. Note that in the simplest case of completely unrelated individuals, i.e. \\(\\boldsymbol{\\mathrm{A}} = \\boldsymbol{\\mathrm{I}}\\), genetic and environmental effects are completely confounded and cannot be uniquely identified without introducing further assumptions, as any combination of genetic and environmental values summing to the same value will fit the data equally well. Fortunately, in spite of the empirical reality of sparse relatedness matrices, it is possible to parameterize an animal model in Stan so that even weakly identified genetic effects can be disentangled from environmental effects, using whatever information is provided by the fixed relatedness matrix and empirical data. This is accomplished by re-expressing the scale of the \\(\\boldsymbol{\\mathrm{G}}\\) and \\(\\boldsymbol{\\mathrm{E}}\\) effects not as independent parameters, but rather as dependent variances derived from their proportion of a common phenotypic variance parameter. In other words, the model only has to identify the scale of the total phenotypic trait values rather than attempting to identify two independent but potentially confounded random effect variances, i.e. \\[\\mathrm{Var}(\\boldsymbol{\\mu_\\mathrm{ }}) = \\frac { \\mathrm{Var}(\\boldsymbol{\\mu_{\\mathrm{A}}}) }{\\mathrm{Var}(\\boldsymbol{\\mu_{\\mathrm{P}}})}\\mathrm{Var}(\\boldsymbol{\\mu_\\mathrm{ }}) + \\frac { \\mathrm{Var}(\\boldsymbol{\\mu_{\\mathrm{E}}}) }{\\mathrm{Var}(\\boldsymbol{\\mu_{\\mathrm{P}}})}\\mathrm{Var}(\\boldsymbol{\\mu_\\mathrm{ }})\\] \\[\\mathrm{Var}(\\boldsymbol{\\beta_\\mathrm{ }}) = \\frac { \\mathrm{Var}(\\boldsymbol{\\beta_{\\mathrm{A}}}) }{\\mathrm{Var}(\\boldsymbol{\\beta_{\\mathrm{ }}})}\\mathrm{Var}(\\boldsymbol{\\beta_\\mathrm{ }}) + \\frac { \\mathrm{Var}(\\boldsymbol{\\beta_{\\mathrm{E}}}) }{\\mathrm{Var}(\\boldsymbol{\\beta_{\\mathrm{P}}})}\\mathrm{Var}(\\boldsymbol{\\beta_\\mathrm{ }})\\] The additive genetic proportions can be conceptualized as reaction norm heritabilities for the intercept and slope parameters \\[h_{\\mu}^{2} =\\frac { \\mathrm{Var}(\\boldsymbol{\\mu_{\\mathrm{A}}}) }{\\mathrm{Var}(\\boldsymbol{\\mu_{\\mathrm{ }}})}\\] \\[h_{\\beta}^{2}=\\frac { \\mathrm{Var}(\\boldsymbol{\\beta_{\\mathrm{A}}}) }{\\mathrm{Var}(\\boldsymbol{\\beta_{\\mathrm{ }}})}\\] Given that there are only two individual-level random effects, the proportion of variance attributable to environmental effects is necessarily \\(1-h_{\\mu}^{2}\\) and \\(1-h_{\\beta}^{2}\\) for intercepts and slopes respectively. This alternative parametrization is again mathematically equivalent to the previous model, but it is much easier for Stan to estimate appropriately. To implement this trick, we respecify the model parameters, removing the distinct genetic and environmental SDs and replacing them with common phenotypic SD scale parameters and reaction norm heritability parameters, which can subsequently be used to scale the distinct genetic and environmental standard normal deviates and correlation matrices in the transformed parameters block. This final model can thus be written as write(&quot; data { int&lt;lower=0&gt; N; int&lt;lower=0&gt; I; int&lt;lower=0&gt; id[N]; vector[N] x; vector[N] z; matrix[I,I] A; //new relatedness matrix } transformed data{ matrix[I,I] LA = cholesky_decompose(A); //lower triangle relatedness matrix } parameters { //fixed effects real mu_0; real beta_1; //random effects cholesky_factor_corr[2] LGcor; //additive genetic cor matrix cholesky_factor_corr[2] LEcor; //permanent environmental cor matrix vector&lt;lower=0&gt;[2] sd_P; //total phenotypic SD (removed distinct G and E SDs) real&lt;lower=0&gt; sd_R; matrix[I,2] std_G; //matrix of standard normals for G effects matrix[I,2] std_E; //matrix of standard normals for E effects //RN heritability (proportion between 0 and 1) vector&lt;lower=0,upper=1&gt;[2] RN_h2; } transformed parameters { vector&lt;lower=0&gt;[2] sd_G; //SDs of G effects vector&lt;lower=0&gt;[2] sd_E; //SDs of E effects matrix[I,2] re_G; //scaled G random effects matrix[I,2] re_E; //scaled E random effects vector[I] mu; //phenotypic individual intercepts vector[I] beta; //phenotypic individual slopes //SDs of genetic effects, sqrt(phenotypic variance * h2) sd_G[1] = sd_P[1] * sqrt(RN_h2[1]); //genetic SD for ind intercepts sd_G[2] = sd_P[2] * sqrt(RN_h2[2]); //genetic SD for ind slopes //SDs of environmental effects, sqrt(phenotypic variance * [1-h2]) sd_E[1] = sd_P[1] * sqrt(1 - RN_h2[1]); //environment SD for ind intercepts sd_E[2] = sd_P[2] * sqrt(1 - RN_h2[2]); //environment SD for ind slopes //matrix normal parameterization re_G = LA * std_G * diag_pre_multiply(sd_G, LGcor)&#39; ; //non-centered parameterization re_E = std_E * diag_pre_multiply(sd_E, LEcor)&#39; ; //separate intercepts and slopes mu = col(re_G, 1) + col(re_E, 1); //P = G + E beta = col(re_G, 2) + col(re_E, 2); //P = G + E } model { //model likelihood z ~ normal(mu_0 + mu[id] + (beta_1 + beta[id]).*x, sd_R); //priors //fixed effects mu_0 ~ normal(0,1); beta_1 ~ normal(0,1); //random effects to_vector(std_G) ~ std_normal(); //genetic std normal deviates to_vector(std_E) ~ std_normal(); //environmental std normal deviates LGcor ~ lkj_corr_cholesky(2); //genetic correlations LEcor ~ lkj_corr_cholesky(2); //environmental correlations to_vector(sd_P) ~ cauchy(0,1); //only phenotypic scale sd_R ~ cauchy(0,1); //reaction norm heritability to_vector(RN_h2) ~ beta(1.2,1.2); } generated quantities { corr_matrix[2] Gcor = LGcor * LGcor&#39;; //genetic cor corr_matrix[2] Ecor = LEcor * LEcor&#39;; //environmental cor matrix[2,2] Gcov = diag_matrix(sd_G)*Gcor*diag_matrix(sd_G); //genetic cov matrix[2,2] Ecov = diag_matrix(sd_E)*Ecor*diag_matrix(sd_E); //environmental cov matrix[2,2] Pcov = Gcov + Ecov; //phenotypic covariance (assuming independent effects) matrix[2,2] Pcor = inverse(diag_matrix(sd_P))*Pcov*inverse(diag_matrix(sd_P)); //phenotypic cor //variances vector&lt;lower=0&gt;[2] V_P = sd_P .* sd_P; vector&lt;lower=0&gt;[2] V_G = sd_G .* sd_G; vector&lt;lower=0&gt;[2] V_E = sd_E .* sd_E; real V_R = sd_R * sd_R; }&quot;, &quot;mod1_QG.stan&quot;) Note that because we specify phenotypic SDs sd_P, the genetic SDs sd_G are calculated as \\(\\mathrm{sqrt} ({\\mathrm{Var}(\\boldsymbol{\\mu_{\\mathrm{}}})}h_{\\mu}^{2})= {\\mathrm{SD}(\\boldsymbol{\\mu_{\\mathrm{}}})}\\mathrm{sqrt}(h_{\\mu}^{2})\\) and \\(\\mathrm{sqrt} ({\\mathrm{Var}(\\boldsymbol{\\beta_{\\mathrm{}}})}h_{\\beta}^{2})= {\\mathrm{SD}(\\boldsymbol{\\beta_{\\mathrm{}}})}\\mathrm{sqrt}(h_{\\beta}^{2})\\), with the same approach taken for the proportion of environmental effects \\(1- h_{\\mu}^{2}\\) and \\(1-h_{\\beta}^{2}\\). A weakly regularizing \\(\\mathrm{Beta}(1.2,1.2)\\) prior is placed on the reaction norm heritability parameters, which are constrained between 0 and 1. This and any other prior can be easily visualized in R by randomly sampling from the relevant distribution. hist( rbeta(1e5, 1.2, 1.2), prob = TRUE ) This prior is therefore relatively flat and uninformative over the range of plausible values, but provides very weak regularization by giving lower relative probability at the extreme ends approaching 0 (no genetic effect) and 1 (complete genetic effect). With more than two individual-level random effects, such as when specifying multiple matrices of individual autocorrelation (Thomson et al. 2018), SDs and variances can instead be parameterized as scaled simplexes. We can now estimate our animal model in Stan. library(rstan) mod1_QG = stan_model(&quot;mod1_QG.stan&quot;) ## Warning in system(paste(CXX, ARGS), ignore.stdout = TRUE, ignore.stderr = TRUE): &#39;C:/rtools40/usr/mingw_/bin/g++&#39; not found stan_resultsQG &lt;- sampling(mod1_QG, data=stan_data, init = 0, warmup=1500, iter = 4500, chains=4, cores=4, control=list(adapt_delta=0.90) ) ## Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. ## Running the chains for more iterations may help. See ## http://mc-stan.org/misc/warnings.html#bulk-ess #extracts posterior estimates post = extract(stan_resultsQG) Lets see how well we recovered the genetic and environmental (co)variances of the reaction norm parameters. Due to random sampling and our relatively small sample size, we should anticipate noisy estimates. #RN intercepts [1] and slopes [2] apply(post$V_P, 2, median) #phenotypic variance ## [1] 0.5298082 0.6511081 apply(post$V_G, 2, median) #genetic variance ## [1] 0.3276764 0.2139834 apply(post$V_E, 2, median) #environmental variance ## [1] 0.1932046 0.4262568 #RN intercept and slope correlation median(post$Pcor[,1,2]) #phenotypic corr ## [1] 0.3038031 median(post$Gcor[,1,2]) #genetic corr ## [1] 0.4475964 median(post$Ecor[,1,2]) #environmental corr ## [1] 0.2471007 Resources "],["within-partner-sam.html", "2 Within partner SAM 2.1 Formal overview 2.2 Computational approach 2.3 Simulate data 2.4 Coding the model 2.5 Estimating the model 2.6 Failure to detect assortment 2.7 Phenotypic model", " 2 Within partner SAM SAMs build on the Stan code we used for a basic animal model (1.5) in three key ways: (i) by implementing an autoregressive moving average (ARMA) function between the social reaction norms (SRNs) of individuals and their partners, (ii) within-individual centering of SRNs, and (iii) estimating selection gradients on SRN parameters. Note that (ii) is only applicable to study designs in which individuals are measured across multiple partners, and thus does not apply to the within partner model presented here. As is explained below, this model can effectively estimate social plasticity (SRN slopes) but does not effectively estimate assortment, due to confounding in the absence of multiple partners (2.6). The fitness model addressing (iii) is handled in a subsequent chapter ((5)). The theoretical and statistical motivation behind each of these extensions is explained in detail by Martin and Jaeggi (2021). After estimating a SAM, we also want to extract the model posteriors and subsequently estimate the assortment matrix \\(\\boldsymbol{\\mathrm{B_{\\alpha}}}\\), the selection gradients \\(\\mathrm{s_{\\mu}}\\) and \\(\\mathrm{s_{\\psi}}\\), and the responses to selection \\(\\Delta \\bar{\\mathrm{\\mu}}\\) and \\(\\Delta \\bar{\\mathrm{\\psi}}\\). Here we provide a tutorial for the within-partner SAM, presented as Eq 3.1 in Martin and Jaeggi (2021), which is appropriate for sampling designs where each individual is measured interacting with a single partner over multiple time intervals, e.g. \\(t= \\left \\{ 1,2,3 \\right \\}\\) to index the first, second, and third observation of a focal individual with the same social partner. For clarity, we focus on the simple linear models presented in the paper, largely ignoring complications such as the inclusion of additional random and fixed effects for adjusting estimates, which can be accomplished using basic approaches for any Stan model. See the Stan Reference Manual and Stan Case Studies for further details. The detailed coding tutorials in Chapter 1 are also crucial for understanding the Cholesky decompositions, reaction norm heritabilities, and non-centered and matrix normal parametrizations used below, which we do not review again in detail. 2.1 Formal overview The formal model for a measurement of aggression \\(z_{jt}\\) in focal individual \\(j\\) at time \\(t\\) is given by \\[z_{jt} = \\mu_0 + \\eta_{jt} + \\xi_{jt}\\] \\[\\eta_{jt} = \\begin{Bmatrix} \\mu_j + \\left( \\psi_1 + \\psi_j \\right)\\mu_k&#39; &amp; \\mathrm{if} \\ t = 1 \\\\ \\mu_j + \\left( \\psi_1 + \\psi_j \\right)\\eta_{kt-1}&#39; &amp; \\mathrm{else} \\end{Bmatrix} \\] \\[\\xi_{jt} = \\begin{Bmatrix} \\epsilon_{jt} &amp; \\mathrm{if} \\ t = 1 \\\\ \\epsilon_{jt} + \\phi\\epsilon_{kt-1}&#39; &amp; \\mathrm{else} \\end{Bmatrix} \\] \\[\\mu_j = \\mu_{\\mathrm{A}j} + \\mu_{\\mathrm{E}j}, \\quad \\psi_j = \\psi_{\\mathrm{A}j} + \\psi_{\\mathrm{E}j}\\] with the equivalent specification for the social partners aggression measure \\(z_{kt}&#39;\\) \\[z_{kt}&#39; = \\mu_0 + \\eta_{kt}&#39; + \\xi_{kt}&#39;\\] \\[\\eta_{kt}&#39; = \\begin{Bmatrix} \\mu_k&#39; + \\left( \\psi_1 + \\psi_k&#39; \\right)\\mu_j &amp; \\mathrm{if} \\ t = 1 \\\\ \\mu_k&#39; + \\left( \\psi_1 + \\psi_k&#39; \\right)\\eta_{jt-1} &amp; \\mathrm{else} \\end{Bmatrix} \\] \\[\\xi_{kt}&#39; = \\begin{Bmatrix} \\epsilon_{kt}&#39; &amp; \\mathrm{if} \\ t = 1 \\\\ \\epsilon_{kt}&#39; + \\phi\\epsilon_{jt-1} &amp; \\mathrm{else} \\end{Bmatrix} \\] \\[\\mu_k&#39; = \\mu_{\\mathrm{A}k}&#39; + \\mu_{\\mathrm{E}j}&#39;, \\quad \\psi_k&#39; = \\psi_{\\mathrm{A}k}&#39; + \\psi_{\\mathrm{E}k}&#39;\\] The random effects are assumed to be well-described by multivariate normal distributions. \\[\\begin{bmatrix} \\boldsymbol{\\mu_{\\mathrm{A}}}, \\boldsymbol{\\mu&#39;_{\\mathrm{A}}},\\boldsymbol{\\psi_{\\mathrm{A}}},\\boldsymbol{\\psi}&#39;_{\\mathrm{A}} \\end{bmatrix}^{\\mathrm{T}} \\sim \\mathrm{MVNormal}(\\boldsymbol{0}, \\boldsymbol{\\mathrm{G}} \\otimes \\boldsymbol{\\mathrm{A}} ) \\] \\[\\begin{bmatrix} \\boldsymbol{\\mu_{\\mathrm{E}}}, \\boldsymbol{\\mu&#39;_{\\mathrm{E}}},\\boldsymbol{\\psi_{\\mathrm{E}}},\\boldsymbol{\\psi}&#39;_{\\mathrm{E}} \\end{bmatrix}^{\\mathrm{T}} \\sim \\mathrm{MVNormal}(\\boldsymbol{0}, \\boldsymbol{\\mathrm{E}} \\otimes \\boldsymbol{\\mathrm{I}} ) \\] \\[\\begin{bmatrix} \\boldsymbol{\\epsilon}, \\boldsymbol{\\epsilon}&#39; \\end{bmatrix}^{\\mathrm{T}} \\sim \\mathrm{MVNormal}(\\boldsymbol{0}, \\boldsymbol{\\mathrm{\\Sigma}} ) \\] We also assume that the social reaction norm (SRN) intercept and slope (co)variances are equivalent for focal (\\(\\boldsymbol{\\mu},\\boldsymbol{\\psi}\\)) and social partners (\\(\\boldsymbol{\\mu}&#39;,\\boldsymbol{\\psi}&#39;\\)). The G matrix can therefore be reduced to a 2x2 matrix for all individuals in the population \\[\\boldsymbol{\\mathrm{G}}= \\begin{bmatrix} \\mathrm{var([\\boldsymbol{\\mu},\\boldsymbol{\\mu}&#39;])} &amp; \\mathrm{cov([\\boldsymbol{\\mu},\\boldsymbol{\\mu}&#39;],[\\boldsymbol{\\psi},\\boldsymbol{\\psi}&#39;])} \\\\ \\mathrm{cov([\\boldsymbol{\\psi},\\boldsymbol{\\psi}&#39;],[\\boldsymbol{\\mu},\\boldsymbol{\\mu}&#39;])} &amp; \\mathrm{var([\\boldsymbol{\\psi},\\boldsymbol{\\psi}&#39;])} \\end{bmatrix}\\] The residual matrix \\(\\boldsymbol{\\Sigma}\\), however, estimates separate variances and covariances for the focal and partner residuals, which allows the model to account for residual covariance and feedback effects (collectively referred to as SRN measurement errors \\(\\boldsymbol{\\xi}\\) and \\(\\boldsymbol{\\xi}&#39;\\)). \\[\\boldsymbol{\\Sigma}= \\begin{bmatrix} \\mathrm{var(\\boldsymbol{\\epsilon})} &amp; \\mathrm{cov}(\\boldsymbol{\\epsilon},\\boldsymbol{\\epsilon}&#39;) \\\\ \\mathrm{cov}(\\boldsymbol{\\epsilon}&#39;,\\boldsymbol{\\epsilon}) &amp; \\mathrm{var(\\boldsymbol{\\epsilon&#39;})} \\end{bmatrix}\\] This model is, therefore, appropriate for situations where the distinction between focal and partner is semi-arbitrary, e.g. when measuring within-sex interactions or when males and females exhibit similar patterns of phenotypic variation. In this case, we make the latter assumption for simplicity. To account for differences between the responses of focal individuals and social partners, the model can simply be extended with additional parameters, e.g. specifying separate \\(G_M\\) and \\(G_F\\) matrices for males and female respective genetic (co)variances and so on. 2.2 Computational approach As shown in Chapter 1, we can express the formal model above in a mathematically equivalent but more computationally efficient manner by decomposing the covariance matrices into matrices of correlations and SDs, using lower triangular Cholesky decompositions on the correlation matrices. For example, the genetic covariance is given by \\[\\boldsymbol{\\mathrm{G}}_{cov}= \\boldsymbol{\\mathrm{G}_{sd}} \\boldsymbol{\\mathrm{G}}_{cor} \\boldsymbol{\\mathrm{G}_{sd}}\\] \\[\\boldsymbol{\\mathrm{G}}_{cor} = \\boldsymbol{\\mathrm{L}}_{Gcor} \\boldsymbol{\\mathrm{L}}_{Gcor}^{\\mathrm{T}} = \\begin{bmatrix} 1 &amp; \\mathrm{cor}([\\boldsymbol{\\mu},\\boldsymbol{\\mu&#39;}],[\\boldsymbol{\\psi},\\boldsymbol{\\psi&#39;}] ) \\\\ \\mathrm{cor}([\\boldsymbol{\\psi},\\boldsymbol{\\psi&#39;}], [\\boldsymbol{\\mu},\\boldsymbol{\\mu&#39;}] ) &amp; 1 \\end{bmatrix}\\] \\[\\boldsymbol{\\mathrm{G}_{sd}}=\\begin{bmatrix} \\mathrm{sd}([\\boldsymbol{\\mu},\\boldsymbol{\\mu&#39;}]) &amp; 0 \\\\ 0 &amp; \\mathrm{sd}([\\boldsymbol{\\psi},\\boldsymbol{\\psi&#39;}]) \\end{bmatrix}\\] The estimation of the Kronecker product \\(\\boldsymbol{\\mathrm{G}} \\otimes \\boldsymbol{\\mathrm{A}}\\) is achieved through sampling of a non-centered matrix normal distribution \\[\\begin{bmatrix} [\\boldsymbol{\\mu_{\\mathrm{A}}}, \\boldsymbol{\\mu_{\\mathrm{A}}}&#39;]^{\\mathrm{T}} &amp; [\\boldsymbol{\\psi_{\\mathrm{A}}}, \\boldsymbol{\\psi_{\\mathrm{A}}}&#39;]^{\\mathrm{T}} \\end{bmatrix} = \\boldsymbol{L_{\\mathrm{A}}} \\begin{bmatrix} [\\boldsymbol{\\mu_{\\mathrm{A.std}}}, \\boldsymbol{\\mu_{\\mathrm{A.std}}}&#39;]^{\\mathrm{T}} &amp; [\\boldsymbol{\\psi_{\\mathrm{A.std}}}, \\boldsymbol{\\psi_{\\mathrm{A.std}}}&#39;]^{\\mathrm{T}} \\end{bmatrix} (\\boldsymbol{\\mathrm{G}_{sd}}\\boldsymbol{\\mathrm{L}_{Gcor}})^{\\mathrm{T}} \\] which is appropriate for estimating values drawn from \\[\\begin{bmatrix}[\\boldsymbol{\\mu_{\\mathrm{A}}}, \\boldsymbol{\\mu_{\\mathrm{A}}}&#39;]^{\\mathrm{T}} &amp; [\\boldsymbol{\\psi_{\\mathrm{A}}}, \\boldsymbol{\\psi_{\\mathrm{A}}}&#39;]^{\\mathrm{T}} \\end{bmatrix} \\sim \\mathrm{Matrix\\ Normal}(\\boldsymbol{0}, \\boldsymbol{\\mathrm{L_A}} \\boldsymbol{\\mathrm{L_A}}^{\\mathrm{T}}, \\boldsymbol{\\mathrm{L_{Gcov}}} \\boldsymbol{\\mathrm{L_{Gcov}}}^{\\mathrm{T}} ) \\equiv \\\\ \\mathrm{vec}( \\begin{bmatrix} [\\boldsymbol{\\mu_{\\mathrm{A}}}, \\boldsymbol{\\mu_{\\mathrm{A}}}&#39;]^{\\mathrm{T}} &amp; [\\boldsymbol{\\psi_{\\mathrm{A}}}, \\boldsymbol{\\psi_{\\mathrm{A}}}&#39;]^{\\mathrm{T}} \\end{bmatrix}) \\sim \\mathrm{MVNormal}(\\mathrm{vec}(\\boldsymbol{\\mathrm{0}}), \\boldsymbol{\\mathrm{G_{cov}}} \\otimes \\boldsymbol{\\mathrm{A}} ) \\] The environmental effects are estimated with a standard non-centered multivariate normal parametrization \\[\\mathrm{SRN}_{\\mathrm{E}}=\\left[ \\boldsymbol{\\mu_{\\mathrm{E}}} \\ \\boldsymbol{\\mu_{\\mathrm{E}}}&#39; \\right]=\\left[ \\boldsymbol{\\mu_{\\mathrm{E.std}}} \\ \\boldsymbol{\\mu_{\\mathrm{E.std}}}&#39; \\right] (\\boldsymbol{\\mathrm{E}_{sd}}\\boldsymbol{\\mathrm{L}_{Ecor}})^{\\mathrm{T}} \\] The \\(\\mathrm{std}\\) values are standard normal deviates, i.e. \\(\\mathrm{std~\\sim Normal}(0, 1)\\), that are scaled to appropriate (co)variance through the separated SD and correlation parameters. For Bayesian estimation, we place very weakly regularizing priors on the fixed population intercept, slope, and residual feedback parameters. \\[\\mu_0, \\psi_1, \\phi \\sim \\mathrm{Normal}(0, 1)\\] As explained in Chapter 1 (1.5), we also place priors on the total phenotypic variance of the SRN intercepts and slopes, as well as SRN heritability parameters that are used to derive the additive genetic and permanent environmental variance. \\[\\mathrm{sd}([\\boldsymbol{\\mu},\\boldsymbol{\\mu&#39;}]), \\mathrm{sd}([\\boldsymbol{\\psi},\\boldsymbol{\\psi&#39;}])\\sim \\mathrm{Half-Cauchy}(0,1)\\] \\[h_{\\mu}^{2}, h_{\\psi}^{2} \\sim \\mathrm{Beta}(1.2,1.2) \\] where \\[\\mathrm{Var}(\\boldsymbol{\\mu_\\mathrm{A}}) = h_{\\mu}^{2} \\mathrm{Var}(\\boldsymbol{\\mu_\\mathrm{ }}) \\\\ \\mathrm{Var}(\\boldsymbol{\\mu_\\mathrm{E}}) = (1-h_{\\mu}^{2})\\mathrm{Var}(\\boldsymbol{\\mu_\\mathrm{ }})\\] \\[\\mathrm{Var}(\\boldsymbol{\\psi_\\mathrm{A}}) = h_{\\psi}^{2} \\mathrm{Var}(\\boldsymbol{\\psi_\\mathrm{ }}) \\\\ \\mathrm{Var}(\\boldsymbol{\\psi_\\mathrm{E}}) = (1-h_{\\psi}^{2})\\mathrm{Var}(\\boldsymbol{\\psi_\\mathrm{ }})\\] Priors can also be placed on the genetic and permanent environmental correlations \\[\\boldsymbol{\\mathrm{G}_{cor}},\\boldsymbol{\\mathrm{E}_{cor}} \\sim \\mathrm{LKJ}(2)\\] The same approach is used for decomposing the residual covariance matrix \\(\\boldsymbol{\\Sigma}\\). \\[\\mathrm{sd}([\\boldsymbol{\\epsilon},\\boldsymbol{\\epsilon&#39;}]) \\sim \\mathrm{Half-Cauchy}(0,1)\\] \\[\\boldsymbol{\\mathrm{\\Sigma}_{cor}} \\sim \\mathrm{LKJ}(2)\\] 2.3 Simulate data 2.3.1 SRN parameters Here we rely on the custom pedfun() function introduced in Chapter 1 to generate an \\(\\boldsymbol{\\mathrm{A}}\\) matrix. We begin by setting the population parameters and simulating the SRN intercepts and slopes of males and females, assuming as stated above that their SRN parameters are characterized by equivalent covariance matrices. library(mvtnorm) #population properties I=300 #total individuals for simulation popmin=400 popmax=600 ngenerations = 10 nids&lt;-sample(popmin:popmax, ngenerations, replace=TRUE) #N / generation epm = sample(seq(0.15, 0.25,by=0.05),1) #extra-pair mating nonb = sample(seq(0.4,0.6,by=0.05),1) #proportion of non-breeding / generation #relatedness matrix A_mat &lt;- pedfun(popmin=popmin, popmax=popmax, ngenerations=ngenerations, epm=epm, nonb=nonb, nids=nids, I=I, missing=FALSE) ##################################################################### #Parameter values ##################################################################### alpha_0 = 0 #global intercept psi_1 = -0.5 #population interaction coefficient phi = 0.5 #residual feedback coefficient (epsilon_j ~ epsilon_t-1k) SD_intercept = 0.3 #standard deviation of SRN intercepts SD_slope = 0.3 #SD of SRN slopes r_alpha = 0.3 #assortment coefficient (expressed as correlation) r_G = 0.3 #genetic correlation of random intercepts and slopes r_E = 0.3 #environmental correlation r_R = -0.3 #residual effect correlation (epsilon_tj = epsilon_tk) V_G = 0.3 #genetic variance of REs V_E = 0.3 #genetic variance of REs res_V = 1 #Random effect correlations G_cor &lt;- matrix(c(1,r_G,r_G,1), nrow=2, ncol=2) #mu_A, beta_A G_sd &lt;- c(sqrt(V_G),sqrt(V_G)) #G effect sds G_cov &lt;- diag(G_sd) %*% G_cor %*% diag(G_sd) E_cor &lt;- matrix(c(1,r_E,r_E,1), nrow=2, ncol=2) #mu_E, beta_E E_sd &lt;- c(sqrt(V_E),sqrt(V_E)) #E effect sds E_cov &lt;- diag(E_sd) %*% E_cor %*% diag(E_sd) #matrices G_block &lt;- G_cov %x% A_mat E_block &lt;- E_cov %x% diag(1,I) #generate correlated REs Gvalues &lt;- rmvnorm(1, mean=rep(0,I*2), sigma=G_block) G_val = data.frame(matrix(Gvalues, nrow=I, ncol=2)) cor(G_val) ## X1 X2 ## X1 1.000000 0.304685 ## X2 0.304685 1.000000 Evalues &lt;- rmvnorm(1, mean=rep(0,I*2), sigma=E_block) E_val = data.frame(matrix(Evalues, nrow=I, ncol=2)) cor(E_val) ## X1 X2 ## X1 1.0000000 0.2616562 ## X2 0.2616562 1.0000000 #combine temporary object for all SRN parameters #use shorthand mu = 0, psi = 1 P = cbind(G_val,E_val) colnames(P) = c(&quot;A0&quot;, &quot;A1&quot;, &quot;E0&quot;, &quot;E1&quot;) #individual phenotypic REs #use shorthand mu = 0, psi = 1 P$P0 = P$A0 + P$E0 P$P1 = P$A1 + P$E1 #add ID P$ID = seq(1:I) 2.3.2 Assortment We can now split the generated values into male and female values, assuming both sexes are evenly sampled so that \\(N_M = N_F=N/2\\). As is explained in Appendix S1 of Martin and Jaeggi (2021), we can then use a simple sorting procedure to assortment individuals on a single SRN parameter. In this case, we use the SRN intercepts \\(\\boldsymbol{\\mu}\\) for assortment, assuming random partnering with respect to the other SRN parameter combinations. A more general approach would be use to an additional social matrix \\(\\boldsymbol{\\mathrm{S}}\\) to add to the relatedness matrix \\(\\boldsymbol{\\mathrm{A}}\\) prior to scaling the additive genetic values. library(MASS) #split male and female values + add arbitrary ID #use P0=mu and P1=psi for shorthand sort.m = data.frame(P0_m = P$P0[1:(I/2)], ID_m = 1:(I/2) ) sort.f = data.frame(P0_f = P$P0[(I/2+1):I], ID_f = (I/2+1):I) #sort by SRN intercept value sort.m&lt;-sort.m[order(sort.m[,&quot;P0_m&quot;]),] sort.f&lt;-sort.f[order(sort.f[,&quot;P0_f&quot;]),] #generate random dataset with desired rank-order correlation temp_mat &lt;- matrix(r_alpha, ncol = 2, nrow = 2) #cor of male and female values diag(temp_mat) &lt;- 1 #cor matrix temp_data1&lt;-mvrnorm(n = I/2, mu = c(0, 0), Sigma = temp_mat, empirical=TRUE) #ranks of random data rm &lt;- rank(temp_data1[ , 1], ties.method = &quot;first&quot;) rf &lt;- rank(temp_data1[ , 2], ties.method = &quot;first&quot;) #induce cor through rank-ordering of RN vectors cor(sort.m$P0_m[rm], sort.f$P0_f[rf]) ## [1] 0.2878976 #sort partner ids into dataframe (order on male ID) partner.id = data.frame(ID_m = sort.m$ID_m[rm], ID_f = sort.f$ID_f[rf]) partner.id = partner.id[order(partner.id[,&quot;ID_m&quot;]),] With the assorted ranks in partner.id, we can then structure the dataframe appropriately to match male and female partners with the desired correlation in SRN intercepts. #put all dyads together partner.id$dyadn = seq(1:nrow(partner.id)) #add values back to dataframe (male and joint) partner.id$P0m &lt;- P$P0[match(partner.id$ID_m,P$ID)] partner.id$P0f &lt;- P$P0[match(partner.id$ID_f,P$ID)] partner.id$P1m &lt;- P$P1[match(partner.id$ID_m,P$ID)] partner.id$P1f &lt;- P$P1[match(partner.id$ID_f,P$ID)] partner.id$A0m &lt;- P$A0[match(partner.id$ID_m,P$ID)] partner.id$A0f &lt;- P$A0[match(partner.id$ID_f,P$ID)] partner.id$A1m &lt;- P$A1[match(partner.id$ID_m,P$ID)] partner.id$A1f &lt;- P$A1[match(partner.id$ID_f,P$ID)] partner.id$E0m &lt;- P$E0[match(partner.id$ID_m,P$ID)] partner.id$E0f &lt;- P$E0[match(partner.id$ID_f,P$ID)] partner.id$E1m &lt;- P$E1[match(partner.id$ID_m,P$ID)] partner.id$E1f &lt;- P$E1[match(partner.id$ID_f,P$ID)] #check correlation again cor(partner.id$P0m, partner.id$P0f) ## [1] 0.2878976 #check data structure head(partner.id) ## ID_m ID_f dyadn P0m P0f P1m P1f A0m A0f A1m A1f E0m E0f E1m ## 144 1 211 1 -0.3362844 0.55359552 -0.4716844 0.1680523 -0.3928461 0.2466208 -0.23616485 0.61582421 0.05656163 0.30697475 -0.2355195 ## 132 2 153 2 -1.3827380 -0.46005597 1.1182695 1.1883706 0.3082942 -0.2284622 1.28902006 0.98606209 -1.69103227 -0.23159380 -0.1707506 ## 55 3 291 3 -0.1642577 0.09431228 0.2578453 2.0378855 0.3952356 0.1251219 0.04830177 0.22571496 -0.55949331 -0.03080957 0.2095435 ## 122 4 218 4 0.2730146 0.62874310 -1.3471198 0.9325634 0.3475614 0.4118645 -0.87670549 0.02981423 -0.07454672 0.21687862 -0.4704143 ## 118 5 289 5 1.5694370 0.54837582 0.4027351 0.4732385 0.6246285 1.1124168 -0.28763461 -0.03044839 0.94480855 -0.56404098 0.6903698 ## 35 6 160 6 0.7715038 0.92235246 0.4736115 0.1179626 -0.2123559 -0.1469862 -0.50871772 0.15565027 0.98385963 1.06933871 0.9823292 ## E1f ## 144 -0.44777192 ## 132 0.20230856 ## 55 1.81217055 ## 122 0.90274912 ## 118 0.50368691 ## 35 -0.03768771 2.3.3 Repeated measurements within the partner For simplicity we consider a case with measurements of focal individuals and social partners taken over two discrete sampling periods, so that the time index \\(t= \\left \\{ 1,2 \\right \\}\\). We begin by expanding the dataframe for two measurements. #number of dyads ndyad = nrow(partner.id) #expand for repeated measures partner.id$rep &lt;- 2 #two repeated measurements pair_df &lt;- partner.id[rep(row.names(partner.id), partner.id$rep),] We can first calculate the partner residuals for each observation, which will be used in the residual feedback component of the autoregressive moving average (ARMA) function specified in the next step. #correlated residuals between male and females R_cor &lt;- matrix(c(1,r_R,r_R,1), nrow=2, ncol=2) res_sd &lt;- sqrt(res_V) R_cov &lt;- diag(c(res_sd,res_sd)) %*% R_cor %*% diag(c(res_sd,res_sd)) res_ind&lt;-data.frame(rmvnorm(nrow(pair_df), c(0,0), R_cov)) pair_df$resAGm = res_ind$X1 pair_df$resAGf = res_ind$X2 We can now specify our ARMA process across measurement time 1 and 2 for the latent SRN trait values for males \\(\\boldsymbol{\\eta}\\) and females \\(\\boldsymbol{\\eta&#39;}\\), as well as the SRN measurement errors \\(\\boldsymbol{\\xi}\\) and \\(\\boldsymbol{\\xi&#39;}\\). ##################################################################### #Simulate responses over t = {1,2} per partner ##################################################################### #add interaction number pair_df$turn = rep(c(1,2),ndyad) #individual prediction at t = 1 #males #eta_j{t=1} = mu_j + (psi + psi_j)*mu_k pair_df[pair_df$turn==1,&quot;eta_m&quot;] = pair_df[pair_df$turn==1,&quot;P0m&quot;] + (psi_1 + pair_df[pair_df$turn==1,&quot;P1m&quot;])*(pair_df[pair_df$turn==1,&quot;P0f&quot;]) #females #eta_k{t=1} = mu_k +(psi + psi_k)*mu_j pair_df[pair_df$turn==1,&quot;eta_f&quot;] = pair_df[pair_df$turn==1,&quot;P0f&quot;] + (psi_1 + pair_df[pair_df$turn==1,&quot;P1f&quot;])*(pair_df[pair_df$turn==1,&quot;P0m&quot;]) #individual prediction at t = 2 #males #eta_j{t=2} = mu_j + (psi + psi_j)*(eta_k{t=1}) pair_df[pair_df$turn==2,&quot;eta_m&quot;] = pair_df[pair_df$turn==2,&quot;P0m&quot;] + (psi_1 + pair_df[pair_df$turn==2,&quot;P1m&quot;])*(pair_df[pair_df$turn==1,&quot;eta_f&quot;]) #females #eta_k{t=2} = mu_k + (psi + psi_k)*(eta_j{t=1}) pair_df[pair_df$turn==2,&quot;eta_f&quot;] = pair_df[pair_df$turn==2,&quot;P0f&quot;] + (psi_1 + pair_df[pair_df$turn==2,&quot;P1f&quot;])*(pair_df[pair_df$turn==1,&quot;eta_m&quot;]) #add intercept and residuals (other fixed effects could be added here as well) pair_df$AG_m = alpha_0 + pair_df$eta_m + pair_df$resAGm pair_df$AG_f = alpha_0 + pair_df$eta_f + pair_df$resAGf #add residual feedback process pair_df[pair_df$turn==2,&quot;AG_m&quot;] = pair_df[pair_df$turn==2,&quot;AG_m&quot;] + phi * pair_df[pair_df$turn==1,&quot;resAGf&quot;] pair_df[pair_df$turn==2,&quot;AG_f&quot;] = pair_df[pair_df$turn==2,&quot;AG_f&quot;] + phi * pair_df[pair_df$turn==1,&quot;resAGm&quot;] By adding together the SRN and residual feedback processes, we finally get the measured aggression trait values for males AG_m and females AG_f. Note that, because of the feedback process, it is more straightforward to specify these Gaussian responses by adding together their constitutive components, than by trying to sample responses directly from a distribution, e.g. such as \\(z_{jt} \\sim \\mathrm{MVNormal}(\\eta_{jt}+\\xi_{jt}, \\boldsymbol{\\Sigma})\\). We will similarly modify our basic animal model code in Stan when accounting for this ARMA process. To aid in structuring our Stan model, we can also create some additional values and indices for males and females, which can be used to pull the appropriate focal and partner trait values from the vectors SRN parameters. The data can then be collected together in a list for Stan. #individual indices Im = I/2 #number of males If = I/2 #number of females N_sex = (I/2)*2 #total observations per sex idm&lt;-pair_df$ID_m #male ID idf&lt;-pair_df$ID_f #female ID idf&lt;-idf - Im #within female vector #data prep for Stan stan_data &lt;- list(N_sex = N_sex, I = I, Im=Im, If = If, idm = idm, idf = idf, AG_m = pair_df$AG_m, AG_f = pair_df$AG_f, time = pair_df$turn, A = A_mat) 2.4 Coding the model Were now prepared to code up our formal model in Stan. The basic structure builds on the animal model presented in Chapter 1 ((1.5)) with some small changes in labels, so we only direct attention toward new features of the social animal model code. Firstly, we need to declare the new data were passing into the model data { //indices and scalars used for model specification int&lt;lower=1&gt; N_sex; //total aggression observations per sex (I/2 * 2 repeated measures) int&lt;lower=0&gt; I; //total individuals (M + F) int&lt;lower=0&gt; Im; //number of males int&lt;lower=0&gt; If; //number of females int&lt;lower=1&gt; idm[N_sex]; //index of male AG observations (of length N_sex) int&lt;lower=1&gt; idf[N_sex]; //index of female AG observations //empirical data matrix[I,I] A; //relatedness matrix real AG_m[N_sex]; //male aggression measurements real AG_f[N_sex]; //female aggression measurements real time[N_sex]; //time index (1,2 per individual) } transformed data{ matrix[I,I] LA = cholesky_decompose(A); //lower-triangle A matrix } Then we adjust the parameters and transformed parameters. For the parameters, all we need to do is change the population regression coefficient \\(\\beta_1\\) to the population interaction coefficient \\(\\psi_1\\) and add a new residual feedback coefficient \\(\\phi\\). To facilitate identification, we set \\(-1 &lt;\\phi &lt; 1\\). Note that for efficiency weve dropped the previous cor labels from the lower Cholesky correlation matrices. The transformed parameters can otherwise be left as they previously were. Note that separate (co)variances could instead be estimated here for males and females here by declaring duplicate objects with sex-specific labels (and appropriately scaled relatedness matrices). parameters { //population effects real alpha_0; //aggression global intercept real psi_1; //expected interaction coefficient real&lt;lower=-1,upper=1&gt; phi; //(-1,1) ensures unique solution //random effects (standard deviations) vector&lt;lower=0, upper = 1&gt;[2] sd_P; //phenotypic SRN mu &amp; psi SDs vector&lt;lower=0, upper = 1&gt;[2] sd_R; //male &amp; female residual SDs cholesky_factor_corr[2] LG; //genetic SRN correlations cholesky_factor_corr[2] LE; //permanent environmental SRN correlations cholesky_factor_corr[2] LR; //sex-specific residual correlations matrix[I,2] std_devG; //individual-level unscaled G SRN deviations matrix[I,2] std_devE; //individual-level unscaled E SRN deviations //SRN heritability parmameters, i.e. Var(G_RN) / Var(P_RN) //see supplementary appendix SI for further explanation of this parameter vector&lt;lower=0,upper=1&gt;[2] SRN_h2; } transformed parameters { vector&lt;lower=0&gt;[2] sd_G; //SDs of G effects (derived from sd_P) vector&lt;lower=0&gt;[2] sd_E; //SDs of E effects (derived from sd_P) matrix[I,2] SRN_P; //scaled P SRN parameter deviations matrix[I,2] SRN_G; //scaled G SRN parameter deviations matrix[I,2] SRN_E; //scaled E SRN parameter deviations //standard deviations of genetic effects //simplified from sqrt ( total RN phenotype variance * h2 ) sd_G[1] = sd_P[1] * sqrt(SRN_h2[1]); //genetic SD for RN intercepts sd_G[2] = sd_P[2] * sqrt(SRN_h2[2]); //genetic SD for RN slopes //standard deviations of environmental effects (total phenotype SD * proportion environment SD) sd_E[1] = sd_P[1] * sqrt(1 - SRN_h2[1]); //environment SD for RN intercepts sd_E[2] = sd_P[2] * sqrt(1 - SRN_h2[2]); //environment SD for RN slopes //matrix normal parameterization of Kronecker product between G and A SRN_G = LA * std_devG * diag_pre_multiply(sd_G, LG)&#39; ; //non-centered parameterization of permanent environmental effects SRN_E = std_devE * diag_pre_multiply(sd_E, LE)&#39;; //phenotypic RN effects (P = G + E); here G = additive genetic effects SRN_P = SRN_G + SRN_E; } We could separate the male and female SRN parameters in the transformed parameters block and save them along with the other estimated parameters, but this would be redundant. Instead, we aid coding by creating temporary sex-specific vectors in the model block. We also create temporary vectors for defining the time-specific SRN trait values and residuals. As noted above, we declare the residual vectors explicitly in the model, rather than using a standard generative distribution, because we need to flexibly specify the time-lagged associations among focal and social partner residuals. model{ //separate male and female vectors for efficiency matrix[Im,2] SRN_Pm = SRN_P[1:Im]; //male SRN phenotypic deviations matrix[If,2] SRN_Pf = SRN_P[(Im+1):I]; //female SRN phenotypic deviations //separate SRN intercepts and slopes (phenotypic deviations) vector[Im] mu_m = col(SRN_Pm,1); //SRN intercepts vector[If] mu_f = col(SRN_Pf,1); vector[Im] psi_m = col(SRN_Pm,2); //SRN slopes vector[If] psi_f = col(SRN_Pf,2); //initialize vectors for constructing individual-centered linear predictors vector[N_sex] eta_m; //male SRN trait value vector[N_sex] eta_f; //female SRN trait value vector[N_sex] linpred_m; //total expected value for male responses vector[N_sex] linpred_f; //total expected value for female responses vector[N_sex] epsilon_m; //residual for male responses vector[N_sex] epsilon_f; //residual for female responses //... We can now use a conditional statement in Stan to first calculate the SRN trait values \\(\\boldsymbol{\\eta}\\) and \\(\\boldsymbol{\\eta}&#39;\\). Here we use the previously created indices of IDs and time stamps to ensure that each observation is appropriately matched between focal individual and social partners. //Male and female aggression response model for (n in 1:N_sex) { //SRN trait values //assumes that n = 1 in the context of an ongoing social interaction //if n = 1 prior to social context, then specify eta[t=1] = mu_j instead if (time[n]==1) { //male eta[t=1] = mu_j + (psi + psi_j)*(mu_k) eta_m[n] = mu_m[idm[n]] + (psi_1 + psi_m[idm[n]])*(mu_f[idf[n]]) ; //female eta[t=1] = mu_k + (psi + psi_k)*(mu_j) eta_f[n] = mu_f[idf[n]] + (psi_1 + psi_f[idf[n]])*(mu_m[idm[n]]); } else { //male eta[t=2] = mu_j + (psi + psi_j)*(eta_k[t=1]) eta_m[n] = mu_m[idm[n]] + (psi_1 + psi_m[idm[n]])*(eta_Wf[n-1]); //female eta[t=2] = mu_k + (psi + psi_k)*(eta_j[t=1]) eta_f[n] = mu_f[idf[n]] + (psi_1 + psi_f[idf[n]])*(eta_Wm[n-1]); } //... The global intercept \\(\\mu_0\\) and any other fixed or random effects of interest can then be added along with the SRN trait value subject to feedback. //add global intercept and between-individual parameters to linear predictor //other fixed effects can also be added here linpred_m[n] = alpha_0 + eta_m[n]; linpred_f[n] = alpha_0 + eta_f[n]; //... With these values in place, the initial residual value for each male and female partner at time \\(t=1\\) can be calculated and subsequently used to estimate residual feedback at \\(t=2\\), as well as to specify any remaining correlation between the focal and partner residual trait values. The parameter priors are also placed below to finish off the model block. //residual trait values if(time[n]==1) { epsilon_m [n] = AG_m[n] - linpred_m[n]; epsilon_f [n] = AG_f[n] - linpred_f[n]; } else { linpred_m[n] = linpred_m[n] + phi * epsilon_f[n-1]; epsilon_m[n] = AG_m[n] - linpred_m[n]; linpred_f[n] = linpred_f[n] + phi * epsilon_m[n-1]; epsilon_f[n] = AG_f[n] - linpred_f[n]; } //correlated residuals between partners [epsilon_m[n],epsilon_f[n]]&#39; ~ multi_normal_cholesky([0,0], diag_pre_multiply(sd_R, LR)); } //end of for (n in 1:N_sex) //model priors //fixed effects alpha_0 ~ std_normal(); psi_1 ~ std_normal(); phi ~ std_normal(); //random effects to_vector(sd_P) ~ cauchy(0,1); to_vector(sd_R) ~ cauchy(0,1); LG ~ lkj_corr_cholesky(2); LE ~ lkj_corr_cholesky(2); LR ~ lkj_corr_cholesky(2); to_vector(std_devG) ~ std_normal(); to_vector(std_devE) ~ std_normal(); //reaction norm heritability to_vector(SRN_h2) ~ beta(1.2,1.2); } Things can be finished off by declaring the relevant generated quantities. generated quantities{ //cor and cov matrices of SRN parameters and residuals matrix[2,2] Gcor = LG * LG&#39;; //G SRN correlation matric matrix[2,2] Ecor = LE * LE&#39;; //E SRN correlation matric matrix[2,2] Rcor = LR * LR&#39;; //residual correlation matrix matrix[2,2] Rcov = diag_matrix(sd_R)*Rcor*diag_matrix(sd_R); //residual covariance matrix[2,2] Gcov = diag_matrix(sd_G)*Gcor*diag_matrix(sd_G); //G SRN covariance matrix[2,2] Ecov = diag_matrix(sd_E)*Ecor*diag_matrix(sd_E); //E SRN covariance matrix[2,2] Pcov = Gcov + Ecov; //P SRN covariance matrix[2,2] Pcor = inverse(diag_matrix(sd_P))*Pcov*inverse(diag_matrix(sd_P)); //P SRN correlation //variances vector&lt;lower=0&gt;[2] V_P = sd_P .* sd_P; vector&lt;lower=0&gt;[2] V_G = sd_G .* sd_G; vector&lt;lower=0&gt;[2] V_E = sd_E .* sd_E; vector&lt;lower=0&gt;[2] V_R = sd_R .* sd_R; } Putting everything together now. write(&quot; data { //indices and scalars used for model specification int&lt;lower=1&gt; N_sex; //total aggression observations per sex (I/2 * 2 repeated measures) int&lt;lower=0&gt; I; //total individuals (M + F) int&lt;lower=0&gt; Im; //number of males int&lt;lower=0&gt; If; //number of females int&lt;lower=1&gt; idm[N_sex]; //index of male AG observations (of length N_sex) int&lt;lower=1&gt; idf[N_sex]; //index of female AG observations //empirical data matrix[I,I] A; //relatedness matrix real AG_m[N_sex]; //male aggression measurements real AG_f[N_sex]; //female aggression measurements real time[N_sex]; //time index (1,2 per individual) } transformed data{ matrix[I,I] LA = cholesky_decompose(A); //lower-triangle A matrix } parameters { //population effects real alpha_0; //aggression global intercept real psi_1; //expected interaction coefficient real&lt;lower=-1,upper=1&gt; phi; //(-1,1) ensures unique solution //random effects (standard deviations) vector&lt;lower=0, upper = 1&gt;[2] sd_P; //phenotypic SRN mu &amp; psi SDs vector&lt;lower=0, upper = 1&gt;[2] sd_R; //male &amp; female residual SDs cholesky_factor_corr[2] LG; //genetic SRN correlations cholesky_factor_corr[2] LE; //permanent environmental SRN correlations cholesky_factor_corr[2] LR; //sex-specific residual correlations matrix[I,2] std_devG; //individual-level unscaled G SRN deviations matrix[I,2] std_devE; //individual-level unscaled E SRN deviations //SRN heritability parmameters, i.e. Var(G_RN) / Var(P_RN) //see supplementary appendix SI for further explanation of this parameter vector&lt;lower=0,upper=1&gt;[2] SRN_h2; } transformed parameters { vector&lt;lower=0&gt;[2] sd_G; //SDs of G effects (derived from sd_P) vector&lt;lower=0&gt;[2] sd_E; //SDs of E effects (derived from sd_P) matrix[I,2] SRN_P; //scaled P SRN parameter deviations matrix[I,2] SRN_G; //scaled G SRN parameter deviations matrix[I,2] SRN_E; //scaled E SRN parameter deviations //standard deviations of genetic effects //simplified from sqrt ( total RN phenotype variance * h2 ) sd_G[1] = sd_P[1] * sqrt(SRN_h2[1]); //genetic SD for RN intercepts sd_G[2] = sd_P[2] * sqrt(SRN_h2[2]); //genetic SD for RN slopes //standard deviations of environmental effects (total phenotype SD * proportion environment SD) sd_E[1] = sd_P[1] * sqrt(1 - SRN_h2[1]); //environment SD for RN intercepts sd_E[2] = sd_P[2] * sqrt(1 - SRN_h2[2]); //environment SD for RN slopes //matrix normal parameterization of Kronecker product between G and A SRN_G = LA * std_devG * diag_pre_multiply(sd_G, LG)&#39; ; //non-centered parameterization of permanent environmental effects SRN_E = std_devE * diag_pre_multiply(sd_E, LE)&#39;; //phenotypic RN effects (P = G + E); here G = additive genetic effects SRN_P = SRN_G + SRN_E; } model{ //separate male and female vectors for efficiency matrix[Im,2] SRN_Pm = SRN_P[1:Im]; //male SRN phenotypic deviations matrix[If,2] SRN_Pf = SRN_P[(Im+1):I]; //female SRN phenotypic deviations //separate SRN intercepts and slopes (phenotypic deviations) vector[Im] mu_m = col(SRN_Pm,1); //SRN intercepts vector[If] mu_f = col(SRN_Pf,1); vector[Im] psi_m = col(SRN_Pm,2); //SRN slopes vector[If] psi_f = col(SRN_Pf,2); //initialize vectors for constructing individual-centered linear predictors vector[N_sex] eta_m; //male SRN trait value vector[N_sex] eta_f; //female SRN trait value vector[N_sex] linpred_m; //total expected value for male responses vector[N_sex] linpred_f; //total expected value for female responses vector[N_sex] epsilon_m; //residual for male responses vector[N_sex] epsilon_f; //residual for female responses //Male and female aggression response model for (n in 1:N_sex) { //SRN trait values //assumes that n = 1 in the context of an ongoing social interaction //if n = 1 prior to social context, then specify eta[t=1] = mu_j instead if (time[n]==1) { //male eta[t=1] = mu_j + (psi + psi_j)*(mu_k) eta_m[n] = mu_m[idm[n]] + (psi_1 + psi_m[idm[n]])*(mu_f[idf[n]]) ; //female eta[t=1] = mu_k + (psi + psi_k)*(mu_j) eta_f[n] = mu_f[idf[n]] + (psi_1 + psi_f[idf[n]])*(mu_m[idm[n]]); } else { //male eta[t=2] = mu_j + (psi + psi_j)*(eta_k[t=1]) eta_m[n] = mu_m[idm[n]] + (psi_1 + psi_m[idm[n]])*(eta_f[n-1]); //female eta[t=2] = mu_k + (psi + psi_k)*(eta_j[t=1]) eta_f[n] = mu_f[idf[n]] + (psi_1 + psi_f[idf[n]])*(eta_m[n-1]); } //add global intercept and between-individual parameters to linear predictor //other fixed effects can also be added here linpred_m[n] = alpha_0 + eta_m[n]; linpred_f[n] = alpha_0 + eta_f[n]; //residual trait values if(time[n]==1) { epsilon_m [n] = AG_m[n] - linpred_m[n]; epsilon_f [n] = AG_f[n] - linpred_f[n]; } else { linpred_m[n] = linpred_m[n] + phi * epsilon_f[n-1]; epsilon_m[n] = AG_m[n] - linpred_m[n]; linpred_f[n] = linpred_f[n] + phi * epsilon_m[n-1]; epsilon_f[n] = AG_f[n] - linpred_f[n]; } //correlated residuals between partners [epsilon_m[n],epsilon_f[n]]&#39; ~ multi_normal_cholesky([0,0], diag_pre_multiply(sd_R, LR)); } //model priors //fixed effects alpha_0 ~ std_normal(); psi_1 ~ std_normal(); phi ~ std_normal(); //random effects to_vector(sd_P) ~ cauchy(0,1); to_vector(sd_R) ~ cauchy(0,1); LG ~ lkj_corr_cholesky(2); LE ~ lkj_corr_cholesky(2); LR ~ lkj_corr_cholesky(2); to_vector(std_devG) ~ std_normal(); to_vector(std_devE) ~ std_normal(); //reaction norm heritability to_vector(SRN_h2) ~ beta(1.2,1.2); } generated quantities{ //cor and cov matrices of SRN parameters and residuals matrix[2,2] Gcor = LG * LG&#39;; //G SRN correlation matric matrix[2,2] Ecor = LE * LE&#39;; //E SRN correlation matric matrix[2,2] Rcor = LR * LR&#39;; //residual correlation matrix matrix[2,2] Rcov = diag_matrix(sd_R)*Rcor*diag_matrix(sd_R); //residual covariance matrix[2,2] Gcov = diag_matrix(sd_G)*Gcor*diag_matrix(sd_G); //G SRN covariance matrix[2,2] Ecov = diag_matrix(sd_E)*Ecor*diag_matrix(sd_E); //E SRN covariance matrix[2,2] Pcov = Gcov + Ecov; //P SRN covariance matrix[2,2] Pcor = inverse(diag_matrix(sd_P))*Pcov*inverse(diag_matrix(sd_P)); //P SRN correlation //variances vector&lt;lower=0&gt;[2] V_P = sd_P .* sd_P; vector&lt;lower=0&gt;[2] V_G = sd_G .* sd_G; vector&lt;lower=0&gt;[2] V_E = sd_E .* sd_E; vector&lt;lower=0&gt;[2] V_R = sd_R .* sd_R; }&quot;, &quot;sam3_1.stan&quot;) 2.5 Estimating the model We can now use our simulated random sample to estimate the full quantitative genetic SAM, and well run the the model for additional iterations to promote sufficient sampling of the individual-level parameters. A quick plot of the model results can give us an indication of whether the converse directions of the true SRN feedback (-0.5) and residual feedback (+0.5) processes are being appropriately estimated, as well the accuracy of recovering the total phenotypic variance (V = 0.6) and the genetic (r = 0.3), permanent environmental (r = 0.3), and residual (r = -0.3) correlations. library(rstan) sam_3.1 = stan_model(&quot;sam3_1.stan&quot;) stan_results3.1 &lt;- sampling(sam_3.1, data=stan_data, init = 0, warmup=1500, iter = 3000, chains=4, cores=4, control=list(adapt_delta=0.90) ) library(bayesplot) mcmc_areas(stan_results3.1, pars = c( &quot;psi_1&quot;, &quot;phi&quot;, &quot;V_P[1]&quot;, &quot;V_P[2]&quot;, &quot;Gcor[2,1]&quot;, &quot;Ecor[2,1]&quot;, &quot;Rcor[2,1]&quot;, &quot;Pcor[2,1]&quot;, &quot;SRN_h2[1]&quot;, &quot;SRN_h2[2]&quot;), prob = 0.9 ) Despite the modest sample size for a quantitative genetic study, the SAM does a good job of detecting the opposing directional effects of SRN and residual feedback, as well as of residual and intrinsic trait value correlations. It is also noticeable that, despite the greater uncertainty in the genetic and permanent environmental correlations, the overall phenotypic variance is more precisely estimated. Thus, even when pedigrees are not sufficiently informative to confidently infer genetic effects, SAMs can still be used to estimate evolutionary parameters on phenotypes. 2.6 Failure to detect assortment We can attempt to estimate the assortment coefficient matrix, following Eq. 4 of Martin and Jaeggi (2021), with posterior distributions for the assortment coefficients for SRN intercepts and slopes given by \\[ \\beta_{\\bar{\\mu&#39;}\\mu} = \\Pr \\left ( \\frac{ \\mathrm{cov}( \\boldsymbol{\\mu}, \\boldsymbol{\\bar{\\mu}&#39;}) } {\\mathrm{var}(\\boldsymbol{\\mu})} \\mid \\boldsymbol{z}, \\boldsymbol{z&#39;}, \\boldsymbol{\\Theta} \\right ) \\] \\[ \\beta_{\\bar{\\psi&#39;}\\psi} = \\Pr \\left ( \\frac{ \\mathrm{cov}( \\boldsymbol{\\psi}, \\boldsymbol{\\bar{\\psi}&#39;}) } {\\mathrm{var}(\\boldsymbol{\\psi})} \\mid \\boldsymbol{z}, \\boldsymbol{z&#39;}, \\boldsymbol{\\Theta} \\right ) \\] The posterior of the full assortment coefficient matrix is \\[\\boldsymbol{ \\mathrm{B}_{\\alpha}} = \\Pr \\left ( \\begin{bmatrix} \\beta_{\\bar{\\mu&#39;}\\mu} &amp; \\beta_{\\bar{\\psi&#39;}\\mu} \\\\ \\beta_{\\bar{\\mu&#39;}\\psi} &amp; \\beta_{\\bar{\\psi&#39;}\\psi} \\end{bmatrix} \\mid \\boldsymbol{z}, \\boldsymbol{z&#39;}, \\boldsymbol{\\Theta} \\right ) \\] We can manually calculate this posterior matrix by post-processing the MCMC samples from our model. In this case, we only need to organize the male and female responses together and calculate the appropriate (co)variances, as each individual has a single partner. We therefore arbitrarily treat males as focal individuals, as the coefficient is equivalent in this case for both sexes. #extract posteriors post &lt;- rstan::extract(stan_results3.1) SRN_focal1 &lt;- post$SRN_P[,(1:Im),1] #male intercepts SRN_focal2 &lt;- post$SRN_P[,(1:Im),2] #male slopes SRN_partner1 &lt;- post$SRN_P[,(Im + unique(idf)),1] #female intercepts SRN_partner2 &lt;- post$SRN_P[,(Im + unique(idf)),2] #female intercepts #assortment matrix Beta_alpha = list() #generate matrices across each posterior sample for(j in 1:nrow(SRN_focal1)) { Beta_mat = matrix(NA,2,2) #mu&#39; ~ mu Beta_mat[1,1] = cov(SRN_focal1[j,], SRN_partner1[j,])/var(SRN_focal1[j,]) #mu&#39; ~ psi Beta_mat[2,1] = cov(SRN_focal2[j,], SRN_partner1[j,])/var(SRN_focal2[j,]) #psi&#39; ~ mu Beta_mat[1,2] = cov(SRN_focal1[j,], SRN_partner2[j,])/var(SRN_focal1[j,]) #psi&#39; ~ psi Beta_mat[2,2] = cov(SRN_focal2[j,], SRN_partner2[j,])/var(SRN_focal2[j,]) Beta_alpha[[j]] = Beta_mat } #extract beta_mu&#39;mu (assortment on RN intercepts) Beta_mu = unlist(lapply(Beta_alpha, function(x) x[1,1])) mean(Beta_mu) ## [1] 0.02805728 hist(Beta_mu) Perhaps surprisingly, we see that the model is not doing a good job of detecting the positive assortment between partners SRN intercepts (r = 0.3), instead centering the assortment coefficient near to zero. Given our sample and effect size, it is unlikely that this would be caused by conservative model priors, and weve seen above that the model is doing a good job of estimating the other population parameters such as the interaction coefficient/SRN slope. Why would this be the case, given that this same approach is effective for estimating assortment in the between partner (3) and within-and-between partner SAMs (4)? In these latter models, variation across partners can be used to differentiate within-partner plasticity (SRN slopes) from between-partner assortment using within-individual centering. This leads to appropriate recovery of the assortment coefficient from the posterior SRN parameters, as individuals SRN parameters are accurately adjusted for between-individual heterogeneity in the social environment. However, in the within partner model, individuals only have a single social partner, and were unable to partition and adjust the random effect accordingly. For this reason, although the within partner model can provide accurate estimates of social plasticity and other population parameters, assortment is better estimated with multiple partner designs and within-individual centering. 2.7 Phenotypic model Note that a phenotypic version of this within partner model can easily be specified by simplifying the random effects to a single set of phenotypic SRN intercepts and slopes. write(&quot; data { //indices and scalars used for model specification int&lt;lower=1&gt; N_sex; //total aggression observations per sex (I/2 * 2 repeated measures) int&lt;lower=0&gt; I; //total individuals (M + F) int&lt;lower=0&gt; Im; //number of males int&lt;lower=0&gt; If; //number of females int&lt;lower=1&gt; idm[N_sex]; //index of male AG observations (of length N_sex) int&lt;lower=1&gt; idf[N_sex]; //index of female AG observations //empirical data real AG_m[N_sex]; //male aggression measurements real AG_f[N_sex]; //female aggression measurements real time[N_sex]; //time index (1,2 per individual) } parameters { //population effects real alpha_0; //aggression global intercept real psi_1; //expected interaction coefficient real&lt;lower=-1,upper=1&gt; phi; //(-1,1) ensures unique solution //random effects (standard deviations) vector&lt;lower=0, upper = 1&gt;[2] sd_P; //phenotypic SRN mu &amp; psi SDs vector&lt;lower=0, upper = 1&gt;[2] sd_R; //male &amp; female residual SDs cholesky_factor_corr[2] LP; //P SRN correlations cholesky_factor_corr[2] LR; //sex-specific residual correlations matrix[I,2] std_devP; //individual-level unscaled P SRN deviations } transformed parameters { matrix[I,2] SRN_P; //scaled P SRN parameter deviations //non-centered parameterization of permanent environmental effects SRN_P = std_devP * diag_pre_multiply(sd_P, LP)&#39;; } model{ //separate male and female vectors for efficiency matrix[Im,2] SRN_Pm = SRN_P[1:Im]; //male SRN phenotypic deviations matrix[If,2] SRN_Pf = SRN_P[(Im+1):I]; //female SRN phenotypic deviations //separate SRN intercepts and slopes (phenotypic deviations) vector[Im] mu_m = col(SRN_Pm,1); //SRN intercepts vector[If] mu_f = col(SRN_Pf,1); vector[Im] psi_m = col(SRN_Pm,2); //SRN slopes vector[If] psi_f = col(SRN_Pf,2); //initialize vectors for constructing individual-centered linear predictors vector[N_sex] eta_m; //male SRN trait value vector[N_sex] eta_f; //female SRN trait value vector[N_sex] linpred_m; //total expected value for male responses vector[N_sex] linpred_f; //total expected value for female responses vector[N_sex] epsilon_m; //residual for male responses vector[N_sex] epsilon_f; //residual for female responses //Male and female aggression response model for (n in 1:N_sex) { //SRN trait values //assumes that n = 1 in the context of an ongoing social interaction //if n = 1 prior to social context, then specify eta[t=1] = mu_j instead if (time[n]==1) { //male eta[t=1] = mu_j + (psi + psi_j)*(mu_k) eta_m[n] = mu_m[idm[n]] + (psi_1 + psi_m[idm[n]])*(mu_f[idf[n]]) ; //female eta[t=1] = mu_k + (psi + psi_k)*(mu_j) eta_f[n] = mu_f[idf[n]] + (psi_1 + psi_f[idf[n]])*(mu_m[idm[n]]); } else { //male eta[t=2] = mu_j + (psi + psi_j)*(eta_k[t=1]) eta_m[n] = mu_m[idm[n]] + (psi_1 + psi_m[idm[n]])*(eta_f[n-1]); //female eta[t=2] = mu_k + (psi + psi_k)*(eta_j[t=1]) eta_f[n] = mu_f[idf[n]] + (psi_1 + psi_f[idf[n]])*(eta_m[n-1]); } //add global intercept and between-individual parameters to linear predictor //other fixed effects can also be added here linpred_m[n] = alpha_0 + eta_m[n]; linpred_f[n] = alpha_0 + eta_f[n]; //residual trait values if(time[n]==1) { epsilon_m [n] = AG_m[n] - linpred_m[n]; epsilon_f [n] = AG_f[n] - linpred_f[n]; } else { linpred_m[n] = linpred_m[n] + phi * epsilon_f[n-1]; epsilon_m[n] = AG_m[n] - linpred_m[n]; linpred_f[n] = linpred_f[n] + phi * epsilon_m[n-1]; epsilon_f[n] = AG_f[n] - linpred_f[n]; } //correlated residuals between partners [epsilon_m[n],epsilon_f[n]]&#39; ~ multi_normal_cholesky([0,0], diag_pre_multiply(sd_R, LR)); } //model priors //fixed effects alpha_0 ~ std_normal(); psi_1 ~ std_normal(); phi ~ std_normal(); //random effects to_vector(sd_P) ~ cauchy(0,1); to_vector(sd_R) ~ cauchy(0,1); LP ~ lkj_corr_cholesky(2); LR ~ lkj_corr_cholesky(2); to_vector(std_devP) ~ std_normal(); } generated quantities{ //cor and cov matrices of SRN parameters and residuals matrix[2,2] Gcor = LP * LP&#39;; //P SRN correlation matric matrix[2,2] Rcor = LR * LR&#39;; //residual correlation matrix matrix[2,2] Rcov = diag_matrix(sd_R)*Rcor*diag_matrix(sd_R); //residual covariance matrix[2,2] Gcov = diag_matrix(sd_P)*Pcor*diag_matrix(sd_P); //P SRN covariance //variances vector&lt;lower=0&gt;[2] V_P = sd_P .* sd_P vector&lt;lower=0&gt;[2] V_R = sd_R .* sd_R; }&quot;, &quot;sam3_1P.stan&quot;) Resources "],["between-partner-sam.html", "3 Between partner SAM 3.1 Simulate data 3.2 Estimate the model 3.3 Estimating assortment 3.4 Phenotypic model", " 3 Between partner SAM Here we modify the within partner SAM for a between partner study design without repeated measures within partners. As explained in the main text [Martin and Jaeggi (2021); see Eq 3.2], this model can be considered as a simplification of the within partner model to remove feedback effects within partners (i.e. \\(t=1\\)). We therefore avoid repeating the detailed commentary on the formal and computational aspects of the model provided in the previous chapter. In contrast to within partner SAM, which fails to properly estimate assortment (2.6), a between partner SAM can be used to effectively partition assortment on SRN parameters using within-individual centering. The between partner SAM for a measurement \\(i\\) of aggression \\(z_{ijt=1}\\) in focal individual \\(j\\) during a single interaction period \\(t=1\\) is given by \\[z_{ijt=1} = \\mu_0 + \\eta_{ijt=1} + \\epsilon_{ijt=1}\\] \\[\\eta_{ijt=1} = \\mu_j + \\left( \\psi_1 + \\psi_j \\right)\\mu_k&#39;\\] \\[\\mu_j = \\mu_{\\mathrm{A}j} + \\mu_{\\mathrm{E}j}, \\quad \\psi_j = \\psi_{\\mathrm{A}j} + \\psi_{\\mathrm{E}j}\\] Note that the SRN measurement simply reduces to the residual trait value \\(\\epsilon_{ijt=1}\\) because there is no temporal information for partitioning residual feedback effects. When there individuals are non-randomly distributed across social partners (e.g. due to assortment), the SRN trait value should instead be decomposed into within \\(\\eta_{W}\\) and between \\(\\eta_{B}\\) partner components to adjust for unbalanced sampling \\[\\eta_{Wijt=1} = \\mu_j + \\left( \\psi_1 + \\psi_j \\right) \\left( \\mu_k&#39; - \\bar{\\mu}&#39;_K \\right)\\] \\[\\eta_{Bijt=1} =\\left( \\psi_1 + \\psi_j \\right) \\bar{\\mu}&#39;_K \\] where \\(\\bar{\\mu}&#39;_K\\) is the average SRN intercept of an individuals social partners. To appropriately adjust the intrinsic SRN parameters for the between-partner component, we need to introduce an additional regression parameter \\(\\beta_{B}\\) so that \\[z_{ijt=1} = \\mu_0 + \\eta_{Wijt=1} + \\beta_{B}\\eta_{Bijt=1} + \\epsilon_{ijt=1}\\] The equivalent specification can be given for the social partners aggression measure \\(z_{ikt=1}&#39;\\) \\[z_{ikt=1}&#39; = \\mu_0 + \\eta_{Wikt=1}&#39; + \\beta_{B}\\eta_{Bikt=1}&#39; + \\epsilon_{ikt=1}&#39;\\] \\[\\eta_{Wikt=1}&#39; = \\mu_k&#39; + \\left( \\psi_1 + \\psi_k&#39; \\right) \\left( \\mu_j - \\bar{\\mu}_J \\right) \\] \\[\\eta_{Bikt=1}&#39; = \\mu_k&#39; + \\left( \\psi_1 + \\psi_k&#39; \\right) \\bar{\\mu}_J\\] \\[\\mu_k&#39; = \\mu_{\\mathrm{A}k}&#39; + \\mu_{\\mathrm{E}j}&#39;, \\quad \\psi_k&#39; = \\psi_{\\mathrm{A}k}&#39; + \\psi_{\\mathrm{E}k}&#39;\\] The random effects are assumed to be well-described by multivariate normal distributions. \\[\\begin{bmatrix} \\boldsymbol{\\mu_{\\mathrm{A}}}, \\boldsymbol{\\mu&#39;_{\\mathrm{A}}},\\boldsymbol{\\psi_{\\mathrm{A}}},\\boldsymbol{\\psi}&#39;_{\\mathrm{A}} \\end{bmatrix}^{\\mathrm{T}} \\sim \\mathrm{MVNormal}(\\boldsymbol{0}, \\boldsymbol{\\mathrm{G}} \\otimes \\boldsymbol{\\mathrm{A}} ) \\] \\[\\begin{bmatrix} \\boldsymbol{\\mu_{\\mathrm{E}}}, \\boldsymbol{\\mu&#39;_{\\mathrm{E}}},\\boldsymbol{\\psi_{\\mathrm{E}}},\\boldsymbol{\\psi}&#39;_{\\mathrm{E}} \\end{bmatrix}^{\\mathrm{T}} \\sim \\mathrm{MVNormal}(\\boldsymbol{0}, \\boldsymbol{\\mathrm{E}} \\otimes \\boldsymbol{\\mathrm{I}} ) \\] \\[\\begin{bmatrix} \\boldsymbol{\\epsilon}, \\boldsymbol{\\epsilon}&#39; \\end{bmatrix}^{\\mathrm{T}} \\sim \\mathrm{MVNormal}(\\boldsymbol{0}, \\boldsymbol{\\mathrm{\\Sigma}} ) \\] We also assume that the social reaction norm (SRN) intercept and slope (co)variances are equivalent for focal (\\(\\boldsymbol{\\mu},\\boldsymbol{\\psi}\\)) and social partners (\\(\\boldsymbol{\\mu}&#39;,\\boldsymbol{\\psi}&#39;\\)). The \\(\\boldsymbol{G}\\) matrix can therefore be reduced to a 2x2 matrix for all individuals in the population \\[\\boldsymbol{\\mathrm{G}}= \\begin{bmatrix} \\mathrm{var([\\boldsymbol{\\mu},\\boldsymbol{\\mu}&#39;])} &amp; \\mathrm{cov([\\boldsymbol{\\mu},\\boldsymbol{\\mu}&#39;],[\\boldsymbol{\\psi},\\boldsymbol{\\psi}&#39;])} \\\\ \\mathrm{cov([\\boldsymbol{\\psi},\\boldsymbol{\\psi}&#39;],[\\boldsymbol{\\mu},\\boldsymbol{\\mu}&#39;])} &amp; \\mathrm{var([\\boldsymbol{\\psi},\\boldsymbol{\\psi}&#39;])} \\end{bmatrix}\\] The residual matrix \\(\\boldsymbol{\\Sigma}\\) estimates the association among focal and social partners residuals. \\[\\boldsymbol{\\Sigma}= \\begin{bmatrix} \\mathrm{var(\\boldsymbol{\\epsilon})} &amp; \\mathrm{cov}(\\boldsymbol{\\epsilon},\\boldsymbol{\\epsilon}&#39;) \\\\ \\mathrm{cov}(\\boldsymbol{\\epsilon}&#39;,\\boldsymbol{\\epsilon}) &amp; \\mathrm{var(\\boldsymbol{\\epsilon&#39;})} \\end{bmatrix}\\] This model is, therefore, appropriate for situations where the distinction between focal and partner is semi-arbitrary, e.g. when measuring within-sex interactions or when males and females exhibit similar patterns of phenotypic variation. In this case, we make the latter assumption for simplicity. To account for differences between the responses of focal individuals and social partners, the model can simply be extended with additional parameters, e.g. specifying separate \\(G_M\\) and \\(G_F\\) matrices for males and female respective genetic (co)variances and so on. 3.1 Simulate data We now need to simulate interactions across multiple partners. Fortunately, we follow the same basic approach as the previous chapter, including use of the the custom pedfun() function introduced in Ch. 1.5 for generating a genetic VCV. For heuristic purposes, we can consider our simulation as capturing interactions and assortment of each individual with four lifetime partners. library(mvtnorm) #common settings I_partner = 4 #partners/individual I_obs = 1 #observations/individual/seasonal partner I_sample = I_partner*I_obs #samples/individual #population properties I = 300 #total individuals for simulation popmin=400 popmax=600 ngenerations = 10 nids&lt;-sample(popmin:popmax, ngenerations, replace=TRUE) #N / generation epm = sample(seq(0.15, 0.25,by=0.05),1) #extra-pair mating nonb = sample(seq(0.4,0.6,by=0.05),1) #proportion of non-breeding / generation #relatedness matrix A_mat &lt;- pedfun(popmin=popmin, popmax=popmax, ngenerations=ngenerations, epm=epm, nonb=nonb, nids=nids, I=I, missing=FALSE) ##################################################################### #Parameter values ##################################################################### alpha_0 = 0 #global intercept psi_1 = -0.5 #population interaction coefficient phi = 0.5 #residual feedback coefficient (epsilon_j ~ epsilon_t-1k) SD_intercept = 0.3 #standard deviation of SRN intercepts SD_slope = 0.3 #SD of SRN slopes r_alpha = 0.3 #assortment coefficient (expressed as correlation) r_G = 0 #genetic correlation of random intercepts and slopes r_E = 0 #environmental correlation r_R = -0.3 #residual effect correlation (epsilon_tj = epsilon_tk) V_G = 0.3 #genetic variance of REs V_E = 0.3 #genetic variance of REs res_V = 1 #Random effect correlations G_cor &lt;- matrix(c(1,r_G,r_G,1), nrow=2, ncol=2) #mu_A, beta_A G_sd &lt;- c(sqrt(V_G),sqrt(V_G)) #G effect sds G_cov &lt;- diag(G_sd) %*% G_cor %*% diag(G_sd) E_cor &lt;- matrix(c(1,r_E,r_E,1), nrow=2, ncol=2) #mu_E, beta_E E_sd &lt;- c(sqrt(V_E),sqrt(V_E)) #E effect sds E_cov &lt;- diag(E_sd) %*% E_cor %*% diag(E_sd) #matrices G_block &lt;- G_cov %x% A_mat E_block &lt;- E_cov %x% diag(1,I) #generate correlated REs Gvalues &lt;- rmvnorm(1, mean=rep(0,I*2), sigma=G_block) G_val = data.frame(matrix(Gvalues, nrow=I, ncol=2)) cor(G_val) ## X1 X2 ## X1 1.000000000 -0.005873213 ## X2 -0.005873213 1.000000000 Evalues &lt;- rmvnorm(1, mean=rep(0,I*2), sigma=E_block) E_val = data.frame(matrix(Evalues, nrow=I, ncol=2)) cor(E_val) ## X1 X2 ## X1 1.000000000 -0.007809677 ## X2 -0.007809677 1.000000000 #combine temporary object for all SRN parameters #use shorthand mu = 0, psi = 1 P = cbind(G_val,E_val) colnames(P) = c(&quot;A0&quot;, &quot;A1&quot;, &quot;E0&quot;, &quot;E1&quot;) #individual phenotypic REs #use shorthand mu = 0, psi = 1 P$P0 = P$A0 + P$E0 P$P1 = P$A1 + P$E1 #add ID P$ID = seq(1:I) The assortment procedure is fundamentally the same but now considers multiple partners. For demonstrative purposes, we now assume that assortment occurs for SRN slopes rather than intercepts, which directly assesses whether the model can appropriately partition variation due to plasticity and assortment. library(dplyr) library(MASS) pairs = list() for (j in 1:I_partner){ #male RN intercept (x I_partner for multiple lifetime partners) sort.m &lt;- data.frame(P1_m = P$P1[1:(I/2)], ID_m = (1:(I/2)) ) sort.m&lt;-sort.m[order(sort.m[,&quot;P1_m&quot;]),] #female phenotypic RN slopes sort.f &lt;- data.frame(P1_f = P$P1[(I/2 + 1):I], ID_f = ((I/2+1):I) ) sort.f&lt;-sort.f[order(sort.f[,&quot;P1_f&quot;]),] #generate random dataset with desired rank-order correlation temp_mat &lt;- matrix(r_alpha, ncol = 2, nrow = 2) #cor of male and female values diag(temp_mat) &lt;- 1 #cor matrix #sim values temp_data1&lt;- mvrnorm(n = I/2, mu = c(0, 0), Sigma = temp_mat, empirical=TRUE) #ranks of random data rm &lt;- rank(temp_data1[ , 1], ties.method = &quot;first&quot;) rf &lt;- rank(temp_data1[ , 2], ties.method = &quot;first&quot;) #induce cor through rank-ordering of RN vectors cor(sort.m$P1_m[rm], sort.f$P1_f[rf]) #sort partner ids into dataframe partner.id = data.frame(ID_m = sort.m$ID_m[rm], ID_f = sort.f$ID_f[rf]) partner.id = partner.id[order(partner.id[,&quot;ID_m&quot;]),] #add to list pairs[[j]] = partner.id } partner.id = bind_rows(pairs) partner.id = partner.id[order(partner.id$ID_m),] #put all dyads together partner.id$dyadn = seq(1:nrow(partner.id)) #add values back to dataframe (male and joint) partner.id$P0m &lt;- P$P0[match(partner.id$ID_m,P$ID)] partner.id$P0f &lt;- P$P0[match(partner.id$ID_f,P$ID)] partner.id$P1m &lt;- P$P1[match(partner.id$ID_m,P$ID)] partner.id$P1f &lt;- P$P1[match(partner.id$ID_f,P$ID)] partner.id$A0m &lt;- P$A0[match(partner.id$ID_m,P$ID)] partner.id$A0f &lt;- P$A0[match(partner.id$ID_f,P$ID)] partner.id$A1m &lt;- P$A1[match(partner.id$ID_m,P$ID)] partner.id$A1f &lt;- P$A1[match(partner.id$ID_f,P$ID)] partner.id$E0m &lt;- P$E0[match(partner.id$ID_m,P$ID)] partner.id$E0f &lt;- P$E0[match(partner.id$ID_f,P$ID)] partner.id$E1m &lt;- P$E1[match(partner.id$ID_m,P$ID)] partner.id$E1f &lt;- P$E1[match(partner.id$ID_f,P$ID)] #check correlation again cor(partner.id$P1m, partner.id$P1f) ## [1] 0.2982545 We can now calculate observed aggression measures for a single observation within each dyad. #number of dyads ndyad = nrow(partner.id) pair_df = partner.id #congruent with repeated measures code #correlated residuals between male and females R_cor &lt;- matrix(c(1,r_R,r_R,1), nrow=2, ncol=2) res_sd &lt;- sqrt(res_V) R_cov &lt;- diag(c(res_sd,res_sd)) %*% R_cor %*% diag(c(res_sd,res_sd)) res_ind&lt;-data.frame(rmvnorm(nrow(pair_df), c(0,0), R_cov)) pair_df$resAGm = res_ind$X1 pair_df$resAGf = res_ind$X2 #add interaction number pair_df$turn = rep(1,ndyad) #males #eta_j{t=1} = mu_j + (psi + psi_j)*mu_k pair_df[pair_df$turn==1,&quot;eta_m&quot;] = pair_df[pair_df$turn==1,&quot;P0m&quot;] + (psi_1 + pair_df[pair_df$turn==1,&quot;P1m&quot;])*(pair_df[pair_df$turn==1,&quot;P0f&quot;]) #females #eta_k{t=1} = mu_k +(psi + psi_k)*mu_j pair_df[pair_df$turn==1,&quot;eta_f&quot;] = pair_df[pair_df$turn==1,&quot;P0f&quot;] + (psi_1 + pair_df[pair_df$turn==1,&quot;P1f&quot;])*(pair_df[pair_df$turn==1,&quot;P0m&quot;]) #add intercept and residuals (other fixed effects could be added here as well) pair_df$AG_m = alpha_0 + pair_df$eta_m + pair_df$resAGm pair_df$AG_f = alpha_0 + pair_df$eta_f + pair_df$resAGf #create indices for STan Im = I/2 #number of males If = I/2 #number of females N_sex = (I/2)*I_partner #total observations per sex idm&lt;-pair_df$ID_m #male ID idf&lt;-pair_df$ID_f #female ID idf&lt;-idf - Im #within female vector #all partners for each individual #partner IDs for male individuals partners_m&lt;-data.frame(idfocal = rep(1:(I/2)), #all partners ID partner1 = NA, partner2 = NA, partner3 = NA, partner4 = NA) for(i in 1:(I/2)){partners_m[i,c(2:5)] &lt;-partner.id[partner.id$ID_m==i,&quot;ID_f&quot;]} #partner IDs for female individuals partners_f&lt;-data.frame(idfocal = rep((I/2+1):I), #all partners ID partner1 = NA, partner2 = NA, partner3 = NA, partner4 = NA) for(i in (I/2+1):I){partners_f[i-(I/2),c(2:5)] &lt;-partner.id[partner.id$ID_f==i,&quot;ID_m&quot;]} #data prep for Stan stan_data &lt;- list(N_sex = N_sex, I = I, Im=Im, If = If, idm = idm, idf = idf, partners_m = partners_m, partners_f = partners_f, AG_m = pair_df$AG_m, AG_f = pair_df$AG_f, time = pair_df$turn, A = A_mat) It may also be of interest to calculate the true average partner values that well need to center the statistical model. #calculate mean partner phenotype for each subject #average female for male partners mean_0m &lt;- aggregate(P0f ~ ID_m, mean, data = partner.id) names(mean_0m)[2] &lt;- &quot;meanP0m&quot; mean_1m &lt;- aggregate(P1f ~ ID_m, mean, data = partner.id) names(mean_1m)[2] &lt;- &quot;meanP1m&quot; partner.id$meanP0m &lt;- mean_0m$meanP0m[match(partner.id$ID_m,mean_0m$ID_m)] partner.id$meanP1m &lt;- mean_1m$meanP1m[match(partner.id$ID_m,mean_1m$ID_m)] #average male for female partners mean_0f &lt;- aggregate(P0m ~ ID_f, mean, data = partner.id) names(mean_0f)[2] &lt;- &quot;meanP0f&quot; mean_1f &lt;- aggregate(P1m ~ ID_f, mean, data = partner.id) names(mean_1f)[2] &lt;- &quot;meanP1f&quot; partner.id$meanP0f &lt;- mean_0f$meanP0f[match(partner.id$ID_f,mean_0f$ID_f)] partner.id$meanP1f &lt;- mean_1f$meanP1f[match(partner.id$ID_f,mean_1f$ID_f)] For empirical data where the true partner values are unknown, we wont want to average raw partner values subject to measurement error, but instead estimate them directly in our Stan model. 3.2 Estimate the model To code the model, we begin by simplifying the within partner model to remove SRN and residual feedback from the male and female responses, and then we expand it by adding new code for the within-individual centering procedure. write(&quot; data { //indices and scalars used for model specification int&lt;lower=1&gt; N_sex; //total aggression observations per sex (I/2 * 4 lifetime partners) int&lt;lower=0&gt; I; //total individuals (M + F) int&lt;lower=0&gt; Im; //number of males int&lt;lower=0&gt; If; //number of females int&lt;lower=1&gt; idm[N_sex]; //index of male AG observations (of length N_sex) int&lt;lower=1&gt; idf[N_sex]; //index of female AG observations int&lt;lower=1&gt; partners_m [Im,5]; //index of male partner IDs, first column is focal ID (1 + 4 IDs) int&lt;lower=1&gt; partners_f [If,5]; //index of female partner IDs, first column is focal ID (1 + 4 IDs) //empirical data matrix[I,I] A; //relatedness matrix real AG_m[N_sex]; //male aggression measurements real AG_f[N_sex]; //female aggression measurements real time[N_sex]; //time index (=1 for all measures) } transformed data{ matrix[I,I] LA = cholesky_decompose(A); //lower-triangle A matrix } parameters { //population effects real alpha_0; //aggression global intercept real psi_1; //expected interaction coefficient real beta_B; //slope of between-partner component //no way to partition feedback when t=1 //real&lt;lower=-1,upper=1&gt; phi; //(-1,1) ensures unique solution //random effects (standard deviations) vector&lt;lower=0, upper = 1&gt;[2] sd_P; //phenotypic SRN mu &amp; psi SDs vector&lt;lower=0, upper = 1&gt;[2] sd_R; //male &amp; female residual SDs cholesky_factor_corr[2] LG; //genetic SRN correlations cholesky_factor_corr[2] LE; //permanent environmental SRN correlations cholesky_factor_corr[2] LR; //sex-specific residual correlations matrix[I,2] std_devG; //individual-level unscaled G SRN deviations matrix[I,2] std_devE; //individual-level unscaled E SRN deviations //SRN heritability parmameters, i.e. Var(G_RN) / Var(P_RN) //see supplementary appendix SI for further explanation of this parameter vector&lt;lower=0,upper=1&gt;[2] SRN_h2; } transformed parameters { vector&lt;lower=0&gt;[2] sd_G; //SDs of G effects (derived from sd_P) vector&lt;lower=0&gt;[2] sd_E; //SDs of E effects (derived from sd_P) matrix[I,2] SRN_P; //scaled P SRN parameter deviations matrix[I,2] SRN_G; //scaled G SRN parameter deviations matrix[I,2] SRN_E; //scaled E SRN parameter deviations matrix[If, 2] partner_meanm; //average SRN parameters of males&#39; partners matrix[Im, 2] partner_meanf; //average SRN parameters of females&#39; partners //standard deviations of genetic effects //simplified from sqrt ( total RN phenotype variance * h2 ) sd_G[1] = sd_P[1] * sqrt(SRN_h2[1]); //genetic SD for RN intercepts sd_G[2] = sd_P[2] * sqrt(SRN_h2[2]); //genetic SD for RN slopes //standard deviations of environmental effects (total phenotype SD * proportion environment SD) sd_E[1] = sd_P[1] * sqrt(1 - SRN_h2[1]); //environment SD for RN intercepts sd_E[2] = sd_P[2] * sqrt(1 - SRN_h2[2]); //environment SD for RN slopes //matrix normal parameterization of Kronecker product between G and A SRN_G = LA * std_devG * diag_pre_multiply(sd_G, LG)&#39; ; //non-centered parameterization of permanent environmental effects SRN_E = std_devE * diag_pre_multiply(sd_E, LE)&#39;; //phenotypic RN effects (P = G + E); here G = additive genetic effects SRN_P = SRN_G + SRN_E; //calculate the mean SRN parameters of each male&#39;s lifetime partners for(i in 1:Im) partner_meanm[i] = [mean(col(SRN_P[partners_m[i,2:5]],1)), mean(col(SRN_P[partners_m[i,2:5]],2))]; //calculate the mean SRN parameters of each female&#39;s lifetime partners for(i in 1:If) partner_meanf[i] = [mean(col(SRN_P[partners_f[i,2:5]],1)), mean(col(SRN_P[partners_f[i,2:5]],2))]; } model{ //separate male and female vectors for efficiency matrix[Im,2] SRN_Pm = SRN_P[1:Im]; //male SRN phenotypic deviations matrix[If,2] SRN_Pf = SRN_P[(Im+1):I]; //female SRN phenotypic deviations //separate SRN intercepts and slopes (phenotypic deviations) vector[Im] mu_m = col(SRN_Pm,1); //SRN intercepts vector[If] mu_f = col(SRN_Pf,1); vector[Im] psi_m = col(SRN_Pm,2); //SRN slopes vector[If] psi_f = col(SRN_Pf,2); //separate mean partner SRN intercepts and slopes vector[Im] mu_meanm = col(partner_meanm,1); //mean partner SRN intercept for males vector[If] mu_meanf = col(partner_meanf,1); //...for females vector[Im] psi_meanm = col(partner_meanm,2); //mean partner SRN slope for males vector[If] psi_meanf = col(partner_meanf,2); //...for females //add in new vectors for within-individual centering vector[N_sex] eta_Wm; //male SRN trait value vector[N_sex] eta_Wf; //female SRN trait value vector[N_sex] eta_Bm; //individual male SRN trait value toward average partner vector[N_sex] eta_Bf; //individual female SRN trait toward average partner //other components of linear predictor vector[N_sex] linpred_m; //total expected value for male responses vector[N_sex] linpred_f; //total expected value for female responses vector[N_sex] epsilon_m; //residual for male responses vector[N_sex] epsilon_f; //residual for female responses //Male and female aggression response model for (n in 1:N_sex) { //SRN trait values (within-individual centered) //there is no residual feedback, so only t = 1 //within-male male eta[t=1] = mu_j + (psi + psi_j)*(mu_k - mean_mu_K) eta_Wm[n] = mu_m[idm[n]] + (psi_1 + psi_m[idm[n]])*(mu_f[idf[n]] - mu_meanm[idm[n]]) ; //female eta[t=1] = mu_k + (psi + psi_k)*(mu_j - mean_mu_J) eta_Wf[n] = mu_f[idf[n]] + (psi_1 + psi_f[idf[n]])*(mu_m[idm[n]] - mu_meanf[idf[n]]); //average time=1 individual eta (used for feedback process) //between male eta[t=1] = mu_j + psi_j*mean_mu_K eta_Bm[n] = (psi_1 + psi_m[idm[n]])*mu_meanm[idm[n]]; //between female eta[t=1] = mu_k + psi_k*mean_mu_J eta_Bf[n] = (psi_1 + psi_f[idf[n]])*mu_meanf[idf[n]]; //add global intercept and between-individual parameters to linear predictor //other fixed effects can also be added here linpred_m[n] = alpha_0 + eta_Wm[n] + beta_B*eta_Bm[n] ; linpred_f[n] = alpha_0 + eta_Wf[n] + beta_B*eta_Bf[n] ; //there is no residual feedback, so only t = 1 epsilon_m [n] = AG_m[n] - linpred_m[n]; epsilon_f [n] = AG_f[n] - linpred_f[n]; //correlated residuals between partners [epsilon_m[n],epsilon_f[n]]&#39; ~ multi_normal_cholesky([0,0], diag_pre_multiply(sd_R, LR)); } //model priors //fixed effects alpha_0 ~ std_normal(); psi_1 ~ std_normal(); beta_B ~ std_normal(); //random effects to_vector(sd_P) ~ cauchy(0,1); to_vector(sd_R) ~ cauchy(0,1); LG ~ lkj_corr_cholesky(2); LE ~ lkj_corr_cholesky(2); LR ~ lkj_corr_cholesky(2); to_vector(std_devG) ~ std_normal(); to_vector(std_devE) ~ std_normal(); //reaction norm heritability to_vector(SRN_h2) ~ beta(1.2,1.2); } generated quantities{ //cor and cov matrices of SRN parameters and residuals matrix[2,2] Gcor = LG * LG&#39;; //G SRN correlation matric matrix[2,2] Ecor = LE * LE&#39;; //E SRN correlation matric matrix[2,2] Rcor = LR * LR&#39;; //residual correlation matrix matrix[2,2] Rcov = diag_matrix(sd_R)*Rcor*diag_matrix(sd_R); //residual covariance matrix[2,2] Gcov = diag_matrix(sd_G)*Gcor*diag_matrix(sd_G); //G SRN covariance matrix[2,2] Ecov = diag_matrix(sd_E)*Ecor*diag_matrix(sd_E); //E SRN covariance matrix[2,2] Pcov = Gcov + Ecov; //P SRN covariance matrix[2,2] Pcor = inverse(diag_matrix(sd_P))*Pcov*inverse(diag_matrix(sd_P)); //P SRN correlation //variances vector&lt;lower=0&gt;[2] V_P = sd_P .* sd_P; vector&lt;lower=0&gt;[2] V_G = sd_G .* sd_G; vector&lt;lower=0&gt;[2] V_E = sd_E .* sd_E; vector&lt;lower=0&gt;[2] V_R = sd_R .* sd_R; }&quot;, &quot;sam3_2.stan&quot;) As a reminder, this is the structure of the data list necessary for estimating this model. str(stan_data) ## List of 12 ## $ N_sex : num 600 ## $ I : num 300 ## $ Im : num 150 ## $ If : num 150 ## $ idm : int [1:600] 1 1 1 1 2 2 2 2 3 3 ... ## $ idf : num [1:600] 40 79 36 40 106 19 35 88 30 8 ... ## $ partners_m:&#39;data.frame&#39;: 150 obs. of 5 variables: ## ..$ idfocal : int [1:150] 1 2 3 4 5 6 7 8 9 10 ... ## ..$ partner1: int [1:150] 190 256 180 269 191 239 298 151 206 253 ... ## ..$ partner2: int [1:150] 229 169 158 203 287 154 253 151 175 157 ... ## ..$ partner3: int [1:150] 186 185 279 158 174 268 241 220 238 299 ... ## ..$ partner4: int [1:150] 190 238 198 255 171 278 233 272 229 154 ... ## $ partners_f:&#39;data.frame&#39;: 150 obs. of 5 variables: ## ..$ idfocal : int [1:150] 151 152 153 154 155 156 157 158 159 160 ... ## ..$ partner1: int [1:150] 8 24 40 6 27 59 10 3 25 56 ... ## ..$ partner2: int [1:150] 8 55 55 10 46 83 42 4 30 77 ... ## ..$ partner3: int [1:150] 46 72 69 29 102 111 54 77 101 79 ... ## ..$ partner4: int [1:150] 125 109 76 81 122 121 120 121 115 138 ... ## $ AG_m : num [1:600] -0.707 -6.326 -3.71 0.422 0.879 ... ## $ AG_f : num [1:600] -0.762 2.839 0.263 -0.587 0.53 ... ## $ time : num [1:600] 1 1 1 1 1 1 1 1 1 1 ... ## $ A : num [1:300, 1:300] 1 0.021 0.0125 0.0535 0.0179 ... ## ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. ..$ : chr [1:300] &quot;ID5001&quot; &quot;ID4701&quot; &quot;ID4984&quot; &quot;ID4857&quot; ... ## .. ..$ : chr [1:300] &quot;ID5001&quot; &quot;ID4701&quot; &quot;ID4984&quot; &quot;ID4857&quot; ... Lets now estimate the model. library(rstan) sam_3.2 = stan_model(&quot;sam3_2.stan&quot;) stan_results3.2 &lt;- sampling(sam_3.2, data=stan_data, init = 0, warmup=1500, iter = 3000, chains=4, cores=4, control=list(adapt_delta=0.90) ) library(bayesplot) mcmc_areas(stan_results3.2, pars = c( &quot;psi_1&quot;, &quot;beta_B&quot;, &quot;V_P[1]&quot;, &quot;V_P[2]&quot;, &quot;Gcor[2,1]&quot;, &quot;Ecor[2,1]&quot;, &quot;Rcor[2,1]&quot;, &quot;Pcor[2,1]&quot;, &quot;SRN_h2[1]&quot;, &quot;SRN_h2[2]&quot;), prob = 0.9 ) Overall, it seems the model is doing a good job of detecting the population SRN slope (-0.5), albeit with some uncertainty, as well as the range of the phenotypic variance of SRN intercepts and slopes (0.6), the phenotypic correlation between SRN parameters (0.3), and the SRN heritability of intercepts and slopes (0.5). 3.3 Estimating assortment We can also now use the mean partner values calculated in the new model to estimate the assortment coefficients of interest. We expect for this within-individual centered model to do a better job of detecting the known positive assortment between individual and social partners SRN slopes. #extract posteriors post &lt;- rstan::extract(stan_results3.2) #temporary vectors for assortment coefficients SRN_PV = post$V_P SRN_Psd = post$sd_P SRN_PVmean = post$V_P / I_partner #expected variance for mean of partners SRN_Psdmean = sqrt(SRN_PVmean) #expected SD for mean of partners SRN_focal1 &lt;- post$SRN_P[,,1] #individual intercepts SRN_focal2 &lt;- post$SRN_P[,,2] #individual slopes SRN_partner1 &lt;- cbind(post$partner_meanm[,,1], post$partner_meanf[,,1]) SRN_partner2 &lt;- cbind(post$partner_meanm[,,2], post$partner_meanf[,,2]) #scale mean partner variance to variance of single partner SRN_partner1s = SRN_partner1 for(j in 1:nrow(SRN_partner1)) {SRN_partner1s[j,] = ( SRN_partner1[j,] / SRN_Psdmean[j,1] ) * SRN_Psd[j,1] } SRN_partner2s = SRN_partner2 for(j in 1:nrow(SRN_partner2)) {SRN_partner2s[j,] = ( SRN_partner2[j,] / SRN_Psdmean[j,2] ) * SRN_Psd[j,2] } #assortment matrix Beta_alpha = list() #generate matrices across each posterior sample for(j in 1:nrow(SRN_focal1)) { Beta_mat = matrix(NA,2,2) #mu&#39; ~ mu Beta_mat[1,1] = cov(SRN_focal1[j,], SRN_partner1s[j,])/var(SRN_focal1[j,]) #mu&#39; ~ psi Beta_mat[2,1] = cov(SRN_focal2[j,], SRN_partner1s[j,])/var(SRN_focal2[j,]) #psi&#39; ~ mu Beta_mat[1,2] = cov(SRN_focal1[j,], SRN_partner2s[j,])/var(SRN_focal1[j,]) #psi&#39; ~ psi Beta_mat[2,2] = cov(SRN_focal2[j,], SRN_partner2s[j,])/var(SRN_focal2[j,]) Beta_alpha[[j]] = Beta_mat } #extract beta_psi&#39;psi (assortment on SRN slopes) Beta_psi = unlist(lapply(Beta_alpha, function(x) x[2,2])) mean(Beta_psi); sum(Beta_psi &gt; 0)/length(Beta_psi) ## [1] 0.154266 ## [1] 0.979 As expected, although the estimated assortment coefficient \\(\\beta_{\\bar{\\psi&#39;}\\psi}\\) is downwardly estimated from its true value 0.3, positive assortment of moderate effect size is detected. 3.4 Phenotypic model A phenotypic between partner model can also be estimated whenever quantitative genetic information is missing. write(&quot; data { //indices and scalars used for model specification int&lt;lower=1&gt; N_sex; //total aggression observations per sex (I/2 * 4 lifetime partners) int&lt;lower=0&gt; I; //total individuals (M + F) int&lt;lower=0&gt; Im; //number of males int&lt;lower=0&gt; If; //number of females int&lt;lower=1&gt; idm[N_sex]; //index of male AG observations (of length N_sex) int&lt;lower=1&gt; idf[N_sex]; //index of female AG observations int&lt;lower=1&gt; partners_m [Im,5]; //index of male partner IDs, first column is focal ID (1 + 4 IDs) int&lt;lower=1&gt; partners_f [If,5]; //index of female partner IDs, first column is focal ID (1 + 4 IDs) //empirical data matrix[I,I] A; //relatedness matrix real AG_m[N_sex]; //male aggression measurements real AG_f[N_sex]; //female aggression measurements real time[N_sex]; //time index (=1 for all measures) } transformed data{ matrix[I,I] LA = cholesky_decompose(A); //lower-triangle A matrix } parameters { //population effects real alpha_0; //aggression global intercept real psi_1; //expected interaction coefficient real beta_B; //slope of between-partner component //no way to partition feedback when t=1 //real&lt;lower=-1,upper=1&gt; phi; //(-1,1) ensures unique solution //random effects (standard deviations) vector&lt;lower=0, upper = 1&gt;[2] sd_P; //phenotypic SRN mu &amp; psi SDs vector&lt;lower=0, upper = 1&gt;[2] sd_R; //male &amp; female residual SDs cholesky_factor_corr[2] LP; //phenotypic SRN correlations cholesky_factor_corr[2] LR; //sex-specific residual correlations matrix[I,2] std_devP; //individual-level unscaled G SRN deviations } transformed parameters { vector&lt;lower=0&gt;[2] sd_P; //SDs of P effects matrix[I,2] SRN_P; //scaled P SRN parameter deviations matrix[If, 2] partner_meanm; //average SRN parameters of males&#39; partners matrix[Im, 2] partner_meanf; //average SRN parameters of females&#39; partners //non-centered parameterization of phenotypic effects SRN_P = std_devP * diag_pre_multiply(sd_P, LP)&#39;; //calculate the mean SRN parameters of each male&#39;s lifetime partners for(i in 1:Im) partner_meanm[i] = [mean(col(SRN_P[partners_m[i,2:5]],1)), mean(col(SRN_P[partners_m[i,2:5]],2))]; //calculate the mean SRN parameters of each female&#39;s lifetime partners for(i in 1:If) partner_meanf[i] = [mean(col(SRN_P[partners_f[i,2:5]],1)), mean(col(SRN_P[partners_f[i,2:5]],2))]; } model{ //separate male and female vectors for efficiency matrix[Im,2] SRN_Pm = SRN_P[1:Im]; //male SRN phenotypic deviations matrix[If,2] SRN_Pf = SRN_P[(Im+1):I]; //female SRN phenotypic deviations //separate SRN intercepts and slopes (phenotypic deviations) vector[Im] mu_m = col(SRN_Pm,1); //SRN intercepts vector[If] mu_f = col(SRN_Pf,1); vector[Im] psi_m = col(SRN_Pm,2); //SRN slopes vector[If] psi_f = col(SRN_Pf,2); //separate mean partner SRN intercepts and slopes vector[Im] mu_meanm = col(partner_meanm,1); //mean partner SRN intercept for males vector[If] mu_meanf = col(partner_meanf,1); //...for females vector[Im] psi_meanm = col(partner_meanm,2); //mean partner SRN slope for males vector[If] psi_meanf = col(partner_meanf,2); //...for females //add in new vectors for within-individual centering vector[N_sex] eta_Wm; //male SRN trait value vector[N_sex] eta_Wf; //female SRN trait value vector[N_sex] eta_Bm; //individual male SRN trait value toward average partner vector[N_sex] eta_Bf; //individual female SRN trait toward average partner //other components of linear predictor vector[N_sex] linpred_m; //total expected value for male responses vector[N_sex] linpred_f; //total expected value for female responses vector[N_sex] epsilon_m; //residual for male responses vector[N_sex] epsilon_f; //residual for female responses //Male and female aggression response model for (n in 1:N_sex) { //SRN trait values (within-individual centered) //there is no residual feedback, so only t = 1 //within-male male eta[t=1] = mu_j + (psi + psi_j)*(mu_k - mean_mu_K) eta_Wm[n] = mu_m[idm[n]] + (psi_1 + psi_m[idm[n]])*(mu_f[idf[n]] - mu_meanm[idm[n]]) ; //female eta[t=1] = mu_k + (psi + psi_k)*(mu_j - mean_mu_J) eta_Wf[n] = mu_f[idf[n]] + (psi_1 + psi_f[idf[n]])*(mu_m[idm[n]] - mu_meanf[idf[n]]); //average time=1 individual eta (used for feedback process) //between male eta[t=1] = mu_j + psi_j*mean_mu_K eta_Bm[n] = (psi_1 + psi_m[idm[n]])*mu_meanm[idm[n]]; //between female eta[t=1] = mu_k + psi_k*mean_mu_J eta_Bf[n] = (psi_1 + psi_f[idf[n]])*mu_meanf[idf[n]]; //add global intercept and between-individual parameters to linear predictor //other fixed effects can also be added here linpred_m[n] = alpha_0 + eta_Wm[n] + beta_B*eta_Bm[n] ; linpred_f[n] = alpha_0 + eta_Wf[n] + beta_B*eta_Bf[n] ; //there is no residual feedback, so only t = 1 epsilon_m [n] = AG_m[n] - linpred_m[n]; epsilon_f [n] = AG_f[n] - linpred_f[n]; //correlated residuals between partners [epsilon_m[n],epsilon_f[n]]&#39; ~ multi_normal_cholesky([0,0], diag_pre_multiply(sd_R, LR)); } //model priors //fixed effects alpha_0 ~ std_normal(); psi_1 ~ std_normal(); beta_B ~ std_normal(); //random effects to_vector(sd_P) ~ cauchy(0,1); to_vector(sd_R) ~ cauchy(0,1); LP ~ lkj_corr_cholesky(2); LR ~ lkj_corr_cholesky(2); to_vector(std_devP) ~ std_normal(); //reaction norm heritability to_vector(SRN_h2) ~ beta(1.2,1.2); } generated quantities{ //cor and cov matrices of SRN parameters and residuals matrix[2,2] Pcor = LP * LP&#39;; //P SRN correlation matrix matrix[2,2] Rcor = LR * LR&#39;; //residual correlation matrix matrix[2,2] Pcov = diag_matrix(sd_P)*Pcor*diag_matrix(sd_P); //phenotypic covariance matrix[2,2] Rcov = iag_matrix(sd_R)*Rcor*diag_matrix(sd_R); //residual covariance //variances vector&lt;lower=0&gt;[2] V_P = sd_P .* sd_P; vector&lt;lower=0&gt;[2] V_R = sd_R .* sd_R; }&quot;, &quot;sam3_2p.stan&quot;) Resources "],["within-and-between-partner-sam.html", "4 Within-and-between partner SAM 4.1 Simulate data 4.2 Estimate the model 4.3 Estimating assortment 4.4 Phenotypic model", " 4 Within-and-between partner SAM As discussed and demonstrated in the previous chapters (2 &amp; 3), within partner variation allows for modelling the temporal dynamics of social interactions, including intrinsic and residual trait feedback, while between partner variation can be used to partition the effects of assortment and social plasticity. Study designs providing both within and between partner measurements will, therefore, tend to be optimally informative about phenotypic interactions and their evolutionary consequences. The formal model for a between-and-within partner SAM combines the basic latent ARMA feedback process of the within partner SAM (Ch 2) with the within-individual centering used to remove bias from the SRN slopes of the between partner SAM (Ch 3). The model for a measurement \\(i\\) of aggression \\(z_{ijt}\\) in focal individual \\(j\\) during a single interaction period \\(t\\) is given by \\[z_{ijt} = \\mu_0 + \\eta_{Wijt} + \\beta_{B}\\eta_{Bijt} + \\xi_{ijt}\\] where \\(\\eta_{Wijt}\\) is the within-individual centered plastic response to the social partner SRN trait value \\[\\eta_{Wijt} = \\begin{Bmatrix} \\mu_j + \\left( \\psi_1 + \\psi_j \\right) \\left( \\mu_k&#39; - \\bar{\\mu}&#39;_K \\right) &amp; \\mathrm{if} \\ t = 1 \\\\ \\mu_j + \\left( \\psi_1 + \\psi_j \\right) \\left( \\eta_{ikt-1}&#39; - \\bar{\\eta}&#39;_{iKt-1} \\right) &amp; \\mathrm{else} \\end{Bmatrix} \\] with \\(\\beta_{B}\\eta_{Bijt}\\) reflecting the association with the average partner SRN trait value \\[\\eta_{Bijt} = \\begin{Bmatrix} \\left( \\psi_1 + \\psi_j \\right) \\bar{\\mu}&#39;_K &amp; \\mathrm{if} \\ t = 1 \\\\ \\left( \\psi_1 + \\psi_j \\right) \\bar{\\eta}&#39;_{iKt-1} &amp; \\mathrm{else} \\end{Bmatrix} \\] scaled by the between partner regression coefficient \\(\\beta_{B}\\). In addition, \\(\\xi_{ijt}\\) captures SRN measurement error caused by residual feedback over time \\[\\xi_{ijt} = \\begin{Bmatrix} \\epsilon_{ijt} &amp; \\mathrm{if} \\ t = 1 \\\\ \\epsilon_{ijt} + \\phi\\epsilon_{ikt-1}&#39; &amp; \\mathrm{else} \\end{Bmatrix} \\] Similarly, for the social partner \\[z_{ikt}&#39; = \\mu_0 + \\eta_{Wikt}&#39; + \\beta_B\\eta_{Bikt}&#39; + \\xi_{ikt}&#39;\\] \\[\\eta_{Wikt}&#39; = \\begin{Bmatrix} \\mu_k&#39; + \\left( \\psi_1 + \\psi_k&#39; \\right)\\left( \\mu_j - \\bar{\\mu}_J \\right) &amp; \\mathrm{if} \\ t = 1 \\\\ \\mu_k&#39; + \\left( \\psi_1 + \\psi_k&#39; \\right)\\left( \\eta_{ijt} - \\bar{\\eta}_{iJt} \\right) &amp; \\mathrm{else} \\end{Bmatrix} \\] \\[\\eta_{Bikt}&#39; = \\begin{Bmatrix} \\left( \\psi_1 + \\psi_k&#39; \\right) \\bar{\\mu}_J &amp; \\mathrm{if} \\ t = 1 \\\\ \\left( \\psi_1 + \\psi_k&#39; \\right) \\bar{\\eta}_{iJt} &amp; \\mathrm{else} \\end{Bmatrix} \\] \\[\\xi_{ikt}&#39; = \\begin{Bmatrix} \\epsilon_{ikt}&#39; &amp; \\mathrm{if} \\ t = 1 \\\\ \\epsilon_{ikt}&#39; + \\phi\\epsilon_{ijt-1} &amp; \\mathrm{else} \\end{Bmatrix} \\] The random effects are assumed to be well-described by multivariate normal distributions. \\[\\mu_j = \\mu_{\\mathrm{A}j} + \\mu_{\\mathrm{E}j}, \\quad \\psi_j = \\psi_{\\mathrm{A}j} + \\psi_{\\mathrm{E}j}\\] \\[\\mu_k&#39; = \\mu_{\\mathrm{A}k}&#39; + \\mu_{\\mathrm{E}j}&#39;, \\quad \\psi_k&#39; = \\psi_{\\mathrm{A}k}&#39; + \\psi_{\\mathrm{E}k}&#39;\\] \\[\\begin{bmatrix} \\boldsymbol{\\mu_{\\mathrm{A}}}, \\boldsymbol{\\mu&#39;_{\\mathrm{A}}},\\boldsymbol{\\psi_{\\mathrm{A}}},\\boldsymbol{\\psi}&#39;_{\\mathrm{A}} \\end{bmatrix}^{\\mathrm{T}} \\sim \\mathrm{MVNormal}(\\boldsymbol{0}, \\boldsymbol{\\mathrm{G}} \\otimes \\boldsymbol{\\mathrm{A}} ) \\] \\[\\begin{bmatrix} \\boldsymbol{\\mu_{\\mathrm{E}}}, \\boldsymbol{\\mu&#39;_{\\mathrm{E}}},\\boldsymbol{\\psi_{\\mathrm{E}}},\\boldsymbol{\\psi}&#39;_{\\mathrm{E}} \\end{bmatrix}^{\\mathrm{T}} \\sim \\mathrm{MVNormal}(\\boldsymbol{0}, \\boldsymbol{\\mathrm{E}} \\otimes \\boldsymbol{\\mathrm{I}} ) \\] \\[\\begin{bmatrix} \\boldsymbol{\\epsilon}, \\boldsymbol{\\epsilon}&#39; \\end{bmatrix}^{\\mathrm{T}} \\sim \\mathrm{MVNormal}(\\boldsymbol{0}, \\boldsymbol{\\mathrm{\\Sigma}} ) \\] We also assume that the social reaction norm (SRN) intercept and slope (co)variances are equivalent for focal (\\(\\boldsymbol{\\mu},\\boldsymbol{\\psi}\\)) and social partners (\\(\\boldsymbol{\\mu}&#39;,\\boldsymbol{\\psi}&#39;\\)). The \\(\\boldsymbol{G}\\) matrix can therefore be reduced to a 2x2 matrix for all individuals in the population \\[\\boldsymbol{\\mathrm{G}}= \\begin{bmatrix} \\mathrm{var([\\boldsymbol{\\mu},\\boldsymbol{\\mu}&#39;])} &amp; \\mathrm{cov([\\boldsymbol{\\mu},\\boldsymbol{\\mu}&#39;],[\\boldsymbol{\\psi},\\boldsymbol{\\psi}&#39;])} \\\\ \\mathrm{cov([\\boldsymbol{\\psi},\\boldsymbol{\\psi}&#39;],[\\boldsymbol{\\mu},\\boldsymbol{\\mu}&#39;])} &amp; \\mathrm{var([\\boldsymbol{\\psi},\\boldsymbol{\\psi}&#39;])} \\end{bmatrix}\\] The residual matrix \\(\\boldsymbol{\\Sigma}\\) estimates the association among focal and social partners residuals. \\[\\boldsymbol{\\Sigma}= \\begin{bmatrix} \\mathrm{var(\\boldsymbol{\\epsilon})} &amp; \\mathrm{cov}(\\boldsymbol{\\epsilon},\\boldsymbol{\\epsilon}&#39;) \\\\ \\mathrm{cov}(\\boldsymbol{\\epsilon}&#39;,\\boldsymbol{\\epsilon}) &amp; \\mathrm{var(\\boldsymbol{\\epsilon&#39;})} \\end{bmatrix}\\] This model is, therefore, appropriate for situations where the distinction between focal and partner is semi-arbitrary, e.g. when measuring within-sex interactions or when males and females exhibit similar patterns of phenotypic variation. In this case, we make the latter assumption for simplicity. To account for differences between the responses of focal individuals and social partners, the model can simply be extended with additional parameters, e.g. specifying separate \\(G_M\\) and \\(G_F\\) matrices for males and female respective genetic (co)variances and so on. 4.1 Simulate data We can simulate data from this model using the custom pedfun() function introduced in Ch. 1.5, as well by integrating the basic simulation approach outlined in the previous SAM chapters for repeated interactions with partners (Ch. 2) as well as across partners (Ch. 3). We assume that interactions occur with 4 lifetime partners with two measurements per individual within each dyad. This empirical information allows us to more effectively partition within and between dyad variation. library(mvtnorm) #common settings I_partner = 4 #partners/individual I_obs = 2 #observations/individual/seasonal partner I_sample = I_partner*I_obs #samples/individual #population properties I=300 #total individuals for simulation popmin=400 popmax=600 ngenerations = 10 nids&lt;-sample(popmin:popmax, ngenerations, replace=TRUE) #N / generation epm = sample(seq(0.15, 0.25,by=0.05),1) #extra-pair mating nonb = sample(seq(0.4,0.6,by=0.05),1) #proportion of non-breeding / generation #relatedness matrix A_mat &lt;- pedfun(popmin=popmin, popmax=popmax, ngenerations=ngenerations, epm=epm, nonb=nonb, nids=nids, I=I, missing=FALSE) ##################################################################### #Parameter values ##################################################################### alpha_0 = 0 #global intercept psi_1 = 0.5 #population interaction coefficient phi = 0.5 #residual feedback coefficient (epsilon_j ~ epsilon_t-1k) SD_intercept = 0.3 #standard deviation of SRN intercepts SD_slope = 0.3 #SD of SRN slopes r_alpha = 0.3 #assortment coefficient (expressed as correlation) r_G = 0.3 #genetic correlation of random intercepts and slopes r_E = 0.3 #environmental correlation r_R = -0.3 #residual effect correlation (epsilon_tj = epsilon_tk) V_G = 0.3 #genetic variance of REs V_E = 0.3 #genetic variance of REs res_V = 1 #Random effect correlations G_cor &lt;- matrix(c(1,r_G,r_G,1), nrow=2, ncol=2) #mu_A, beta_A G_sd &lt;- c(sqrt(V_G),sqrt(V_G)) #G effect sds G_cov &lt;- diag(G_sd) %*% G_cor %*% diag(G_sd) E_cor &lt;- matrix(c(1,r_E,r_E,1), nrow=2, ncol=2) #mu_E, beta_E E_sd &lt;- c(sqrt(V_E),sqrt(V_E)) #E effect sds E_cov &lt;- diag(E_sd) %*% E_cor %*% diag(E_sd) #matrices G_block &lt;- G_cov %x% A_mat E_block &lt;- E_cov %x% diag(1,I) #generate correlated REs Gvalues &lt;- rmvnorm(1, mean=rep(0,I*2), sigma=G_block) G_val = data.frame(matrix(Gvalues, nrow=I, ncol=2)) cor(G_val) ## X1 X2 ## X1 1.000000 0.222402 ## X2 0.222402 1.000000 Evalues &lt;- rmvnorm(1, mean=rep(0,I*2), sigma=E_block) E_val = data.frame(matrix(Evalues, nrow=I, ncol=2)) cor(E_val) ## X1 X2 ## X1 1.000000 0.309796 ## X2 0.309796 1.000000 #combine temporary object for all SRN parameters #use shorthand mu = 0, psi = 1 P = cbind(G_val,E_val) colnames(P) = c(&quot;A0&quot;, &quot;A1&quot;, &quot;E0&quot;, &quot;E1&quot;) #individual phenotypic REs #use shorthand mu = 0, psi = 1 P$P0 = P$A0 + P$E0 P$P1 = P$A1 + P$E1 #add ID P$ID = seq(1:I) The structure of dyads is sampled to match the expected SRN intercept correlation among individuals and their social partners. For this simulation, we assume that partners assort on their SRN slopes rather than intercepts. This is of course arbitrary but allows us to directly assess how well the model can partition within- and between-individual sources of partner covariation. After determining the dyads and organizing their trait values, the data frame is then expanded to account for multiple observations with the same social partner. library(dplyr) library(MASS) pairs = list() for (j in 1:I_partner){ #male additive genetic RN slopes (x I_partner for multiple lifetime partners) sort.m &lt;- data.frame(P1_m = P$P1[1:(I/2)], ID_m = (1:(I/2)) ) sort.m&lt;-sort.m[order(sort.m[,&quot;P1_m&quot;]),] #female phenotypic RN slopes sort.f &lt;- data.frame(P1_f = P$P1[(I/2 + 1):I], ID_f = ((I/2+1):I) ) sort.f&lt;-sort.f[order(sort.f[,&quot;P1_f&quot;]),] #generate random dataset with desired rank-order correlation temp_mat &lt;- matrix(r_alpha, ncol = 2, nrow = 2) #cor of male and female values diag(temp_mat) &lt;- 1 #cor matrix #sim values temp_data1&lt;-MASS::mvrnorm(n = I/2, mu = c(0, 0), Sigma = temp_mat, empirical=TRUE) #ranks of random data rm &lt;- rank(temp_data1[ , 1], ties.method = &quot;first&quot;) rf &lt;- rank(temp_data1[ , 2], ties.method = &quot;first&quot;) #induce cor through rank-ordering of RN vectors cor(sort.m$P1_m[rm], sort.f$P1_f[rf]) #sort partner ids into dataframe partner.id = data.frame(ID_m = sort.m$ID_m[rm], ID_f = sort.f$ID_f[rf]) partner.id = partner.id[order(partner.id[,&quot;ID_m&quot;]),] #add to list pairs[[j]] = partner.id } partner.id = bind_rows(pairs) partner.id[order(partner.id$ID_m),] ## ID_m ID_f ## 1 1 222 ## 151 1 225 ## 301 1 240 ## 451 1 252 ## 2 2 246 ## 152 2 194 ## 302 2 184 ## 452 2 236 ## 3 3 260 ## 153 3 287 ## 303 3 287 ## 453 3 295 ## 4 4 175 ## 154 4 241 ## 304 4 272 ## 454 4 191 ## 5 5 193 ## 155 5 294 ## 305 5 200 ## 455 5 199 ## 6 6 188 ## 156 6 168 ## 306 6 270 ## 456 6 205 ## 7 7 292 ## 157 7 162 ## 307 7 170 ## 457 7 276 ## 8 8 165 ## 158 8 262 ## 308 8 285 ## 458 8 247 ## 9 9 220 ## 159 9 193 ## 309 9 160 ## 459 9 258 ## 10 10 164 ## 160 10 214 ## 310 10 275 ## 460 10 269 ## 11 11 176 ## 161 11 205 ## 311 11 253 ## 461 11 176 ## 12 12 242 ## 162 12 216 ## 312 12 177 ## 462 12 296 ## 13 13 255 ## 163 13 184 ## 313 13 284 ## 463 13 228 ## 14 14 300 ## 164 14 159 ## 314 14 255 ## 464 14 245 ## 15 15 232 ## 165 15 209 ## 315 15 299 ## 465 15 235 ## 16 16 152 ## 166 16 157 ## 316 16 264 ## 466 16 217 ## 17 17 179 ## 167 17 212 ## 317 17 209 ## 467 17 243 ## 18 18 178 ## 168 18 265 ## 318 18 223 ## 468 18 291 ## 19 19 182 ## 169 19 215 ## 319 19 186 ## 469 19 181 ## 20 20 158 ## 170 20 163 ## 320 20 176 ## 470 20 204 ## 21 21 283 ## 171 21 188 ## 321 21 239 ## 471 21 280 ## 22 22 157 ## 172 22 295 ## 322 22 195 ## 472 22 188 ## 23 23 254 ## 173 23 244 ## 323 23 192 ## 473 23 180 ## 24 24 293 ## 174 24 211 ## 324 24 281 ## 474 24 277 ## 25 25 285 ## 175 25 286 ## 325 25 183 ## 475 25 170 ## 26 26 167 ## 176 26 210 ## 326 26 159 ## 476 26 298 ## 27 27 238 ## 177 27 260 ## 327 27 242 ## 477 27 171 ## 28 28 284 ## 178 28 173 ## 328 28 188 ## 478 28 151 ## 29 29 261 ## 179 29 249 ## 329 29 190 ## 479 29 194 ## 30 30 244 ## 180 30 233 ## 330 30 215 ## 480 30 186 ## 31 31 298 ## 181 31 299 ## 331 31 291 ## 481 31 293 ## 32 32 166 ## 182 32 152 ## 332 32 293 ## 482 32 169 ## 33 33 187 ## 183 33 272 ## 333 33 295 ## 483 33 163 ## 34 34 239 ## 184 34 164 ## 334 34 224 ## 484 34 238 ## 35 35 214 ## 185 35 239 ## 335 35 245 ## 485 35 283 ## 36 36 190 ## 186 36 238 ## 336 36 194 ## 486 36 172 ## 37 37 198 ## 187 37 248 ## 337 37 157 ## 487 37 275 ## 38 38 224 ## 188 38 224 ## 338 38 210 ## 488 38 233 ## 39 39 229 ## 189 39 245 ## 339 39 221 ## 489 39 223 ## 40 40 219 ## 190 40 203 ## 340 40 297 ## 490 40 226 ## 41 41 274 ## 191 41 275 ## 341 41 294 ## 491 41 164 ## 42 42 234 ## 192 42 235 ## 342 42 259 ## 492 42 207 ## 43 43 243 ## 193 43 237 ## 343 43 300 ## 493 43 255 ## 44 44 202 ## 194 44 151 ## 344 44 154 ## 494 44 285 ## 45 45 205 ## 195 45 191 ## 345 45 267 ## 495 45 206 ## 46 46 218 ## 196 46 270 ## 346 46 169 ## 496 46 168 ## 47 47 272 ## 197 47 197 ## 347 47 206 ## 497 47 279 ## 48 48 253 ## 198 48 257 ## 348 48 230 ## 498 48 292 ## 49 49 183 ## 199 49 243 ## 349 49 236 ## 499 49 273 ## 50 50 208 ## 200 50 300 ## 350 50 229 ## 500 50 227 ## 51 51 271 ## 201 51 161 ## 351 51 252 ## 501 51 201 ## 52 52 273 ## 202 52 223 ## 352 52 187 ## 502 52 246 ## 53 53 299 ## 203 53 255 ## 353 53 181 ## 503 53 253 ## 54 54 295 ## 204 54 251 ## 354 54 269 ## 504 54 286 ## 55 55 155 ## 205 55 174 ## 355 55 193 ## 505 55 262 ## 56 56 225 ## 206 56 293 ## 356 56 244 ## 506 56 287 ## 57 57 180 ## 207 57 217 ## 357 57 274 ## 507 57 183 ## 58 58 189 ## 208 58 228 ## 358 58 278 ## 508 58 224 ## 59 59 256 ## 209 59 289 ## 359 59 220 ## 509 59 222 ## 60 60 278 ## 210 60 273 ## 360 60 296 ## 510 60 261 ## 61 61 154 ## 211 61 208 ## 361 61 282 ## 511 61 184 ## 62 62 194 ## 212 62 167 ## 362 62 204 ## 512 62 257 ## 63 63 267 ## 213 63 154 ## 363 63 151 ## 513 63 214 ## 64 64 297 ## 214 64 195 ## 364 64 249 ## 514 64 231 ## 65 65 191 ## 215 65 177 ## 365 65 178 ## 515 65 229 ## 66 66 151 ## 216 66 284 ## 366 66 288 ## 516 66 240 ## 67 67 252 ## 217 67 277 ## 367 67 196 ## 517 67 155 ## 68 68 279 ## 218 68 253 ## 368 68 254 ## 518 68 195 ## 69 69 169 ## 219 69 280 ## 369 69 256 ## 519 69 159 ## 70 70 217 ## 220 70 266 ## 370 70 286 ## 520 70 187 ## 71 71 291 ## 221 71 153 ## 371 71 237 ## 521 71 209 ## 72 72 245 ## 222 72 282 ## 372 72 198 ## 522 72 160 ## 73 73 173 ## 223 73 221 ## 373 73 191 ## 523 73 208 ## 74 74 275 ## 224 74 198 ## 374 74 250 ## 524 74 189 ## 75 75 226 ## 225 75 155 ## 375 75 258 ## 525 75 250 ## 76 76 265 ## 226 76 240 ## 376 76 277 ## 526 76 173 ## 77 77 269 ## 227 77 185 ## 377 77 232 ## 527 77 161 ## 78 78 171 ## 228 78 229 ## 378 78 201 ## 528 78 225 ## 79 79 177 ## 229 79 297 ## 379 79 261 ## 529 79 203 ## 80 80 159 ## 230 80 234 ## 380 80 273 ## 530 80 179 ## 81 81 199 ## 231 81 232 ## 381 81 271 ## 531 81 167 ## 82 82 282 ## 232 82 180 ## 382 82 216 ## 532 82 213 ## 83 83 264 ## 233 83 192 ## 383 83 268 ## 533 83 268 ## 84 84 215 ## 234 84 269 ## 384 84 234 ## 534 84 154 ## 85 85 201 ## 235 85 252 ## 385 85 156 ## 535 85 244 ## 86 86 276 ## 236 86 158 ## 386 86 214 ## 536 86 152 ## 87 87 287 ## 237 87 176 ## 387 87 161 ## 537 87 190 ## 88 88 248 ## 238 88 271 ## 388 88 153 ## 538 88 278 ## 89 89 262 ## 239 89 264 ## 389 89 180 ## 539 89 177 ## 90 90 249 ## 240 90 222 ## 390 90 179 ## 540 90 211 ## 91 91 250 ## 241 91 285 ## 391 91 162 ## 541 91 219 ## 92 92 213 ## 242 92 261 ## 392 92 211 ## 542 92 271 ## 93 93 186 ## 243 93 207 ## 393 93 203 ## 543 93 266 ## 94 94 240 ## 244 94 278 ## 394 94 164 ## 544 94 260 ## 95 95 184 ## 245 95 268 ## 395 95 279 ## 545 95 212 ## 96 96 162 ## 246 96 204 ## 396 96 205 ## 546 96 200 ## 97 97 259 ## 247 97 202 ## 397 97 280 ## 547 97 290 ## 98 98 174 ## 248 98 231 ## 398 98 241 ## 548 98 242 ## 99 99 289 ## 249 99 281 ## 399 99 174 ## 549 99 263 ## 100 100 257 ## 250 100 242 ## 400 100 276 ## 550 100 216 ## 101 101 268 ## 251 101 283 ## 401 101 225 ## 551 101 284 ## 102 102 235 ## 252 102 267 ## 402 102 263 ## 552 102 294 ## 103 103 206 ## 253 103 298 ## 403 103 248 ## 553 103 220 ## 104 104 290 ## 254 104 220 ## 404 104 262 ## 554 104 175 ## 105 105 280 ## 255 105 175 ## 405 105 246 ## 555 105 270 ## 106 106 210 ## 256 106 171 ## 406 106 226 ## 556 106 300 ## 107 107 230 ## 257 107 274 ## 407 107 207 ## 557 107 174 ## 108 108 286 ## 258 108 292 ## 408 108 290 ## 558 108 218 ## 109 109 170 ## 259 109 254 ## 409 109 189 ## 559 109 162 ## 110 110 196 ## 260 110 276 ## 410 110 172 ## 560 110 178 ## 111 111 207 ## 261 111 182 ## 411 111 247 ## 561 111 274 ## 112 112 263 ## 262 112 199 ## 412 112 227 ## 562 112 185 ## 113 113 236 ## 263 113 200 ## 413 113 233 ## 563 113 210 ## 114 114 241 ## 264 114 213 ## 414 114 167 ## 564 114 196 ## 115 115 251 ## 265 115 246 ## 415 115 199 ## 565 115 158 ## 116 116 296 ## 266 116 190 ## 416 116 231 ## 566 116 281 ## 117 117 216 ## 267 117 296 ## 417 117 228 ## 567 117 288 ## 118 118 204 ## 268 118 250 ## 418 118 251 ## 568 118 299 ## 119 119 163 ## 269 119 218 ## 419 119 235 ## 569 119 248 ## 120 120 200 ## 270 120 187 ## 420 120 155 ## 570 120 289 ## 121 121 277 ## 271 121 206 ## 421 121 175 ## 571 121 254 ## 122 122 281 ## 272 122 263 ## 422 122 265 ## 572 122 234 ## 123 123 258 ## 273 123 178 ## 423 123 298 ## 573 123 265 ## 124 124 192 ## 274 124 230 ## 424 124 163 ## 574 124 259 ## 125 125 228 ## 275 125 165 ## 425 125 166 ## 575 125 251 ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 100 rows ] #put all dyads together partner.id$dyadn = seq(1:nrow(partner.id)) #add values back to dataframe (male and joint) partner.id$P0m &lt;- P$P0[match(partner.id$ID_m,P$ID)] partner.id$P0f &lt;- P$P0[match(partner.id$ID_f,P$ID)] partner.id$P1m &lt;- P$P1[match(partner.id$ID_m,P$ID)] partner.id$P1f &lt;- P$P1[match(partner.id$ID_f,P$ID)] partner.id$A0m &lt;- P$A0[match(partner.id$ID_m,P$ID)] partner.id$A0f &lt;- P$A0[match(partner.id$ID_f,P$ID)] partner.id$A1m &lt;- P$A1[match(partner.id$ID_m,P$ID)] partner.id$A1f &lt;- P$A1[match(partner.id$ID_f,P$ID)] partner.id$E0m &lt;- P$E0[match(partner.id$ID_m,P$ID)] partner.id$E0f &lt;- P$E0[match(partner.id$ID_f,P$ID)] partner.id$E1m &lt;- P$E1[match(partner.id$ID_m,P$ID)] partner.id$E1f &lt;- P$E1[match(partner.id$ID_f,P$ID)] #calculate mean partner phenotype for each subject #average female for male partners mean_0m &lt;- aggregate(P0f ~ ID_m, mean, data = partner.id) names(mean_0m)[2] &lt;- &quot;meanP0m&quot; mean_1m &lt;- aggregate(P1f ~ ID_m, mean, data = partner.id) names(mean_1m)[2] &lt;- &quot;meanP1m&quot; partner.id$meanP0m &lt;- mean_0m$meanP0m[match(partner.id$ID_m,mean_0m$ID_m)] partner.id$meanP1m &lt;- mean_1m$meanP1m[match(partner.id$ID_m,mean_1m$ID_m)] #average male for female partners mean_0f &lt;- aggregate(P0m ~ ID_f, mean, data = partner.id) names(mean_0f)[2] &lt;- &quot;meanP0f&quot; mean_1f &lt;- aggregate(P1m ~ ID_f, mean, data = partner.id) names(mean_1f)[2] &lt;- &quot;meanP1f&quot; partner.id$meanP0f &lt;- mean_0f$meanP0f[match(partner.id$ID_f,mean_0f$ID_f)] partner.id$meanP1f &lt;- mean_1f$meanP1f[match(partner.id$ID_f,mean_1f$ID_f)] #number of dyads ndyad = nrow(partner.id) #expand for repeated measures partner.id$rep &lt;- I_obs pair_df &lt;- partner.id[rep(row.names(partner.id), partner.id$rep),] #correlations cor(partner.id$P0m, partner.id$P0f) ## [1] -0.02447126 cor(partner.id$P1m, partner.id$P0f) ## [1] 0.04942133 cor(partner.id$P0m, partner.id$P1f) ## [1] 0.03231276 cor(partner.id$P1m, partner.id$P1f) ## [1] 0.2843552 The responses can now be sampled. Rather than directly within-individual centering responses and specifying the between-partner regression coefficient \\(\\beta_{B}\\) in the simulation, we assume partners respond to the total SRN trait value of their partner. Therefore, we expect \\(\\beta_{B}=1\\). ##################################################################### #Additional effects ##################################################################### #correlated residuals between male and females R_cor &lt;- matrix(c(1,r_R,r_R,1), nrow=2, ncol=2) res_sd &lt;- sqrt(res_V) R_cov &lt;- diag(c(res_sd,res_sd)) %*% R_cor %*% diag(c(res_sd,res_sd)) res_ind&lt;-data.frame(rmvnorm(nrow(pair_df), c(0,0), R_cov)) pair_df$resAGm = res_ind$X1 pair_df$resAGf = res_ind$X2 ##################################################################### #Simulate responses over t = {1,2} per partner ##################################################################### #add interaction number pair_df$turn = rep(c(1,2),ndyad) #average male social environment at time = 1 pair_df[pair_df$turn==1,&quot;meaneta_m&quot;] = pair_df[pair_df$turn==1,&quot;meanP0m&quot;] + (psi_1 + pair_df[pair_df$turn==1,&quot;meanP1m&quot;])*(pair_df[pair_df$turn==1,&quot;P0m&quot;]) #average female social environment at time = 1 pair_df[pair_df$turn==1,&quot;meaneta_f&quot;] = pair_df[pair_df$turn==1,&quot;meanP0f&quot;] + (psi_1 + pair_df[pair_df$turn==1,&quot;meanP1f&quot;])*(pair_df[pair_df$turn==1,&quot;P0f&quot;]) #individual prediction at t = 1 #males #eta_j{t=1} = mu_j + psi_j*(mu_k - mu_meanK) pair_df[pair_df$turn==1,&quot;eta_m&quot;] = pair_df[pair_df$turn==1,&quot;P0m&quot;] + (psi_1 + pair_df[pair_df$turn==1,&quot;P1m&quot;])*(pair_df[pair_df$turn==1,&quot;P0f&quot;]) #females #eta_k{t=1} = mu_k + psi_k*(mu_j - mu_meanJ) pair_df[pair_df$turn==1,&quot;eta_f&quot;] = pair_df[pair_df$turn==1,&quot;P0f&quot;] + (psi_1 + pair_df[pair_df$turn==1,&quot;P1f&quot;])*(pair_df[pair_df$turn==1,&quot;P0m&quot;]) #individual prediction at t = 2 #eta_j{t=2} = mu_j + psi_j*(eta_k{t=1} - eta_meanK{t=1}) pair_df[pair_df$turn==2,&quot;eta_m&quot;] = pair_df[pair_df$turn==2,&quot;P0m&quot;] + (psi_1 + pair_df[pair_df$turn==2,&quot;P1m&quot;])*(pair_df[pair_df$turn==1,&quot;eta_f&quot;]) #females pair_df[pair_df$turn==2,&quot;eta_f&quot;] = pair_df[pair_df$turn==2,&quot;P0f&quot;] + (psi_1 + pair_df[pair_df$turn==2,&quot;P1f&quot;])*(pair_df[pair_df$turn==1,&quot;eta_m&quot;]) #add intercept and residual pair_df$AG_m = alpha_0 + pair_df$eta_m + pair_df$resAGm pair_df$AG_f = alpha_0 + pair_df$eta_f + pair_df$resAGf #add residual feedback pair_df[pair_df$turn==2,&quot;AG_m&quot;] = pair_df[pair_df$turn==2,&quot;AG_m&quot;] + phi * pair_df[pair_df$turn==1,&quot;resAGf&quot;] pair_df[pair_df$turn==2,&quot;AG_f&quot;] = pair_df[pair_df$turn==2,&quot;AG_f&quot;] + phi * pair_df[pair_df$turn==1,&quot;resAGm&quot;] This data frame is combined with indices of male and female IDs in a list for Stan. ##################################################################### #Prepare data for Stan ##################################################################### #individual indices Im = I/2 #number of males If = I/2 #number of females N_sex = (I/2)*2*4 #total observations per sex idm&lt;-pair_df$ID_m #male ID idf&lt;-pair_df$ID_f #female ID idf&lt;-idf - (Im) #index within female vector #partner IDs for male individuals partners_m&lt;-data.frame(idfocal = rep(1:(I/2)), #all partners ID partner1 = NA, partner2 = NA, partner3 = NA, partner4 = NA) for(i in 1:(I/2)){partners_m[i,c(2:5)] &lt;-partner.id[partner.id$ID_m==i,&quot;ID_f&quot;]} #partner IDs for female individuals partners_f&lt;-data.frame(idfocal = rep((I/2+1):I), #all partners ID partner1 = NA, partner2 = NA, partner3 = NA, partner4 = NA) for(i in (I/2+1):I){partners_f[i-(I/2),c(2:5)] &lt;-partner.id[partner.id$ID_f==i,&quot;ID_m&quot;]} ###################### #data prep for Stan stan_data &lt;- list(N_sex = N_sex, I = I, Im=Im, If = If, idm = idm, idf = idf, partners_m = partners_m, partners_f = partners_f, AG_m = pair_df$AG_m, AG_f = pair_df$AG_f, time = pair_df$turn, A = A_mat) 4.2 Estimate the model The within and between partner model code extends the within individual centered, between partner model to account for longitudinal feedback effects within dyads. These changes are accomplished in the parameters as well as the model program blocks. In the latter, a conditional statement is added to account for the effects on \\(\\eta_{ijt}\\) and \\(\\eta&#39;_{ikt}\\) at \\(t=1\\) and \\(t&gt;1\\), and similarly for the residual feedback effects \\(\\xi_j\\) and \\(\\xi&#39;_k\\). write(&quot; data { //indices and scalars used for model specification int&lt;lower=1&gt; N_sex; //total aggression observations per sex (I/2 * 4 lifetime partners) int&lt;lower=0&gt; I; //total individuals (M + F) int&lt;lower=0&gt; Im; //number of males int&lt;lower=0&gt; If; //number of females int&lt;lower=1&gt; idm[N_sex]; //index of male AG observations (of length N_sex) int&lt;lower=1&gt; idf[N_sex]; //index of female AG observations int&lt;lower=1&gt; partners_m [Im,5]; //index of male partner IDs, first column is focal ID (1 + 4 IDs) int&lt;lower=1&gt; partners_f [If,5]; //index of female partner IDs, first column is focal ID (1 + 4 IDs) //empirical data matrix[I,I] A; //relatedness matrix real AG_m[N_sex]; //male aggression measurements real AG_f[N_sex]; //female aggression measurements real time[N_sex]; //time index (=1 for all measures) } transformed data{ matrix[I,I] LA = cholesky_decompose(A); //lower-triangle A matrix } parameters { //population effects real alpha_0; //aggression global intercept real psi_1; //expected interaction coefficient real beta_B; //between partner effect real&lt;lower=-1,upper=1&gt; phi; //(-1,1) ensures unique solution //random effects (standard deviations) vector&lt;lower=0, upper = 1&gt;[2] sd_P; //phenotypic SRN mu &amp; psi SDs vector&lt;lower=0, upper = 1&gt;[2] sd_R; //male &amp; female residual SDs cholesky_factor_corr[2] LG; //genetic SRN correlations cholesky_factor_corr[2] LE; //permanent environmental SRN correlations cholesky_factor_corr[2] LR; //sex-specific residual correlations matrix[I,2] std_devG; //individual-level unscaled G SRN deviations matrix[I,2] std_devE; //individual-level unscaled E SRN deviations //SRN heritability parmameters, i.e. Var(G_RN) / Var(P_RN) //see supplementary appendix SI for further explanation of this parameter vector&lt;lower=0,upper=1&gt;[2] SRN_h2; } transformed parameters { vector&lt;lower=0&gt;[2] sd_G; //SDs of G effects (derived from sd_P) vector&lt;lower=0&gt;[2] sd_E; //SDs of E effects (derived from sd_P) matrix[I,2] SRN_P; //scaled P SRN parameter deviations matrix[I,2] SRN_G; //scaled G SRN parameter deviations matrix[I,2] SRN_E; //scaled E SRN parameter deviations matrix[If, 2] partner_meanm; //average SRN parameters of males&#39; partners matrix[Im, 2] partner_meanf; //average SRN parameters of females&#39; partners //standard deviations of genetic effects //simplified from sqrt ( total RN phenotype variance * h2 ) sd_G[1] = sd_P[1] * sqrt(SRN_h2[1]); //genetic SD for RN intercepts sd_G[2] = sd_P[2] * sqrt(SRN_h2[2]); //genetic SD for RN slopes //standard deviations of environmental effects (total phenotype SD * proportion environment SD) sd_E[1] = sd_P[1] * sqrt(1 - SRN_h2[1]); //environment SD for RN intercepts sd_E[2] = sd_P[2] * sqrt(1 - SRN_h2[2]); //environment SD for RN slopes //matrix normal parameterization of Kronecker product between G and A SRN_G = LA * std_devG * diag_pre_multiply(sd_G, LG)&#39; ; //non-centered parameterization of permanent environmental effects SRN_E = std_devE * diag_pre_multiply(sd_E, LE)&#39;; //phenotypic RN effects (P = G + E); here G = additive genetic effects SRN_P = SRN_G + SRN_E; //calculate the mean SRN parameters of each male&#39;s lifetime partners for(i in 1:Im) partner_meanm[i] = [mean(col(SRN_P[partners_m[i,2:5]],1)), mean(col(SRN_P[partners_m[i,2:5]],2))]; //calculate the mean SRN parameters of each female&#39;s lifetime partners for(i in 1:If) partner_meanf[i] = [mean(col(SRN_P[partners_f[i,2:5]],1)), mean(col(SRN_P[partners_f[i,2:5]],2))]; } model{ //separate male and female vectors for efficiency matrix[Im,2] SRN_Pm = SRN_P[1:Im]; //male SRN phenotypic deviations matrix[If,2] SRN_Pf = SRN_P[(Im+1):I]; //female SRN phenotypic deviations //separate SRN intercepts and slopes (phenotypic deviations) vector[Im] mu_m = col(SRN_Pm,1); //SRN intercepts vector[If] mu_f = col(SRN_Pf,1); vector[Im] psi_m = col(SRN_Pm,2); //SRN slopes vector[If] psi_f = col(SRN_Pf,2); //separate mean partner SRN intercepts and slopes (deviations) vector[Im] mu_meanm = col(partner_meanm,1); //mean partner SRN intercept for males vector[If] mu_meanf = col(partner_meanf,1); //...for females vector[Im] psi_meanm = col(partner_meanm,2); //mean partner SRN slope for males vector[If] psi_meanf = col(partner_meanf,2); //...for females //initialize vectors for constructing individual-centered linear predictors vector[N_sex] eta_Wm; //within-individual centered male SRN trait value vector[N_sex] eta_Wf; //within-individual centered female SRN trait value vector[N_sex] eta_Bm; //individual male SRN trait value toward average partner vector[N_sex] eta_Bf; //individual female SRN trait toward average partner vector[N_sex] eta_meanm; //average SRN partner values for males vector[N_sex] eta_meanf; //average SRN partner values for females vector[N_sex] linpred_m; //expected value for male responses vector[N_sex] linpred_f; //expected value for female responses vector[N_sex] epsilon_m; //residuals for male responses vector[N_sex] epsilon_f; //residuals for male responses //Male and female aggression response model for (n in 1:N_sex) { //SRN trait values //assumes that n = 1 in the context of an ongoing social interaction //if n = 1 prior to social context, then specify eta[t=1] = mu_j instead if (time[n]==1) { //within-individual centered eta //male eta[t=1] = mu_j + psi_j*(mu_k - mu_meanK) eta_Wm[n] = mu_m[idm[n]] + (psi_1 + psi_m[idm[n]])*(mu_f[idf[n]] - mu_meanm[idm[n]]) ; //female eta[t=1] = mu_k + psi_k*(mu_j - mu_meanJ) eta_Wf[n] = mu_f[idf[n]] + (psi_1 + psi_f[idf[n]])*(mu_m[idm[n]] - mu_meanf[idf[n]]); //average individual eta //male eta[t=1] = mu_j + psi_j*mu_k eta_Bm[n] = (psi_1 + psi_m[idm[n]])*mu_meanm[idm[n]]; //female eta[t=1] = mu_k + psi_k*mu_j eta_Bf[n] = (psi_1 + psi_f[idf[n]])*mu_meanf[idf[n]]; //average partner eta[t=1] //average eta males&#39; partners [t=1] = mu_meanK + psi_meanK*mu_j eta_meanm[n] = mu_meanm[idm[n]] + (psi_1 + psi_meanm[idm[n]])*mu_m[idm[n]]; //average eta females&#39; partners [t=1] = mu_meanJ + psi_meanJ*mu_k eta_meanf[n] = mu_meanf[idf[n]] + (psi_1 + psi_meanf[idf[n]])*mu_f[idf[n]]; } else { //within-individual centered eta //male eta[t=2] = mu_j + psi_j*(eta_k[t=1] - eta_meanK[t=1]) eta_Wm[n] = mu_m[idm[n]] + (psi_1 + psi_m[idm[n]])*(eta_Wf[n-1] - eta_meanm[n-1]); //female eta[t=2] = mu_k + psi_k*(eta_j[t=1] - eta_meanJ[t=1]) eta_Wf[n] = mu_f[idf[n]] + (psi_1 + psi_f[idf[n]])*(eta_Wm[n-1] - eta_meanf[n-1]); //average individual eta //male average eta[t=2] = mu_j + psi_j*eta_meanK[t=1] eta_Bm[n] = (psi_1 + psi_m[idm[n]])*eta_meanm[n-1]; //female average eta[t=2] = mu_k + psi_k*eta_meanJ[t=1] eta_Bf[n] = (psi_1 + psi_f[idf[n]])*eta_meanf[n-1]; //average eta males&#39; partners [t=1] = mu_meanK + psi_meanK*mean eta_j[t-1] eta_meanm[n] = mu_meanm[idm[n]] + (psi_1 + psi_meanm[idm[n]])*(mu_m[idm[n]] + eta_Bm[n-1]); //female average partner eta eta_meanf[n] = mu_meanf[idf[n]] + (psi_1 + psi_meanf[idf[n]])*(mu_f[idf[n]] + eta_Bf[n-1]); } //add global intercept and between-individual parameters to linear predictor //other fixed effects can also be added here linpred_m[n] = alpha_0 + eta_Wm[n] + beta_B*eta_Bm[n]; //+beta_B*eta_Bm[n] linpred_f[n] = alpha_0 + eta_Wf[n] + beta_B*eta_Bf[n]; //+beta_B*eta_Bf[n] //residual trait values if(time[n]==1) { epsilon_m [n] = AG_m[n] - linpred_m[n]; epsilon_f [n] = AG_f[n] - linpred_f[n]; } else { linpred_m[n] = linpred_m[n] + phi * epsilon_f[n-1]; epsilon_m[n] = AG_m[n] - linpred_m[n]; linpred_f[n] = linpred_f[n] + phi * epsilon_m[n-1]; epsilon_f[n] = AG_f[n] - linpred_f[n]; } //correlated residuals between partners [epsilon_m[n],epsilon_f[n]]&#39; ~ multi_normal_cholesky([0,0], diag_pre_multiply(sd_R, LR)); } //model priors //fixed effects alpha_0 ~ std_normal(); psi_1 ~ std_normal(); beta_B ~ std_normal(); phi ~ std_normal(); //random effects to_vector(sd_P) ~ cauchy(0,1); to_vector(sd_R) ~ cauchy(0,1); LG ~ lkj_corr_cholesky(2); LE ~ lkj_corr_cholesky(2); LR ~ lkj_corr_cholesky(2); to_vector(std_devG) ~ std_normal(); to_vector(std_devE) ~ std_normal(); //reaction norm heritability to_vector(SRN_h2) ~ beta(1.2,1.2); } generated quantities{ //cor and cov matrices of SRN parameters and residuals matrix[2,2] Gcor = LG * LG&#39;; //G SRN correlation matric matrix[2,2] Ecor = LE * LE&#39;; //E SRN correlation matric matrix[2,2] Rcor = LR * LR&#39;; //residual correlation matrix matrix[2,2] Rcov = diag_matrix(sd_R)*Rcor*diag_matrix(sd_R); //residual covariance matrix[2,2] Gcov = diag_matrix(sd_G)*Gcor*diag_matrix(sd_G); //G SRN covariance matrix[2,2] Ecov = diag_matrix(sd_E)*Ecor*diag_matrix(sd_E); //E SRN covariance matrix[2,2] Pcov = Gcov + Ecov; //P SRN covariance matrix[2,2] Pcor = inverse(diag_matrix(sd_P))*Pcov*inverse(diag_matrix(sd_P)); //P SRN correlation //variances vector&lt;lower=0&gt;[2] V_P = sd_P .* sd_P; vector&lt;lower=0&gt;[2] V_G = sd_G .* sd_G; vector&lt;lower=0&gt;[2] V_E = sd_E .* sd_E; vector&lt;lower=0&gt;[2] V_R = sd_R .* sd_R; }&quot;, &quot;sam3_3w.stan&quot;) Depending on the sample size set during the simulation, this model will likely take 30+ min to finish sampling. The total number of iterations can be reduced to save time, but is set to a large value here to ensure sufficient effective sample sizes for some parameters. library(rstan) sam_3.3 = stan_model(&quot;sam3_3w.stan&quot;) stan_results3.3 &lt;- sampling(sam_3.3, data=stan_data, init = 0, warmup=1500, iter = 3000, chains=4, cores=4, control=list(adapt_delta=0.90) ) library(bayesplot) mcmc_areas(stan_results3.3, pars = c( &quot;psi_1&quot;, &quot;beta_B&quot;, &quot;V_P[1]&quot;, &quot;V_P[2]&quot;, &quot;Gcor[2,1]&quot;, &quot;Ecor[2,1]&quot;, &quot;Rcor[2,1]&quot;, &quot;Pcor[2,1]&quot;, &quot;SRN_h2[1]&quot;, &quot;SRN_h2[2]&quot;), prob = 0.9 ) The model seems to be doing well overall, detecting the negative population SRN slope (-0.5) as well as approximating the locaiton of the total phenotypic variance of SRN intercepts and slopes (0.6), the phenotypic correlation between SRN parameters (0.3), the SRN heritability of intercepts and slopes (0.5), and the expected between partner regresson coefficient (1). 4.3 Estimating assortment The mean partner intrinsic trait values calculated in the model can now be used to estimate the assortment coefficients of interest. #extract posteriors post &lt;- rstan::extract(stan_results3.3) #temporary vectors for assortment coefficients SRN_PV = post$V_P SRN_Psd = post$sd_P SRN_PVmean = post$V_P / I_partner #expected variance for mean of partners SRN_Psdmean = sqrt(SRN_PVmean) #expected SD for mean of partners SRN_focal1 &lt;- post$SRN_P[,,1] #individual intercepts SRN_focal2 &lt;- post$SRN_P[,,2] #individual slopes SRN_partner1 &lt;- cbind(post$partner_meanm[,,1], post$partner_meanf[,,1]) SRN_partner2 &lt;- cbind(post$partner_meanm[,,2], post$partner_meanf[,,2]) #scale mean partner variance to variance of single partner SRN_partner1s = SRN_partner1 for(j in 1:nrow(SRN_partner1)) {SRN_partner1s[j,] = ( SRN_partner1[j,] / SRN_Psdmean[j,1] ) * SRN_Psd[j,1] } SRN_partner2s = SRN_partner2 for(j in 1:nrow(SRN_partner2)) {SRN_partner2s[j,] = ( SRN_partner2[j,] / SRN_Psdmean[j,2] ) * SRN_Psd[j,2] } #assortment matrix Beta_alpha = list() #generate matrices across each posterior sample for(j in 1:nrow(SRN_focal1)) { Beta_mat = matrix(NA,2,2) #mu&#39; ~ mu Beta_mat[1,1] = cov(SRN_focal1[j,], SRN_partner1s[j,])/var(SRN_focal1[j,]) #mu&#39; ~ psi Beta_mat[2,1] = cov(SRN_focal2[j,], SRN_partner1s[j,])/var(SRN_focal2[j,]) #psi&#39; ~ mu Beta_mat[1,2] = cov(SRN_focal1[j,], SRN_partner2s[j,])/var(SRN_focal1[j,]) #psi&#39; ~ psi Beta_mat[2,2] = cov(SRN_focal2[j,], SRN_partner2s[j,])/var(SRN_focal2[j,]) Beta_alpha[[j]] = Beta_mat } #extract beta_mu&#39;mu (assortment on SRN intercepts) Beta_psi = unlist(lapply(Beta_alpha, function(x) x[2,2])) median(Beta_psi); sum(Beta_psi &gt; 0)/length(Beta_psi) ## [1] 0.2282148 ## [1] 1 Positive assortment of moderate effect size is detected. 4.4 Phenotypic model A phenotypic within and between partner model can also be estimated whenever quantitative genetic information is missing. write(&quot; data { //indices and scalars used for model specification int&lt;lower=1&gt; N_sex; //total aggression observations per sex (I/2 * 4 lifetime partners) int&lt;lower=0&gt; I; //total individuals (M + F) int&lt;lower=0&gt; Im; //number of males int&lt;lower=0&gt; If; //number of females int&lt;lower=1&gt; idm[N_sex]; //index of male AG observations (of length N_sex) int&lt;lower=1&gt; idf[N_sex]; //index of female AG observations int&lt;lower=1&gt; partners_m [Im,5]; //index of male partner IDs, first column is focal ID (1 + 4 IDs) int&lt;lower=1&gt; partners_f [If,5]; //index of female partner IDs, first column is focal ID (1 + 4 IDs) //empirical data real AG_m[N_sex]; //male aggression measurements real AG_f[N_sex]; //female aggression measurements real time[N_sex]; //time index (=1 for all measures) } parameters { //population effects real alpha_0; //aggression global intercept real psi_1; //expected interaction coefficient real beta_B; //between partner effect real&lt;lower=-1,upper=1&gt; phi; //(-1,1) ensures unique solution //no way to partition feedback when t=1 //real&lt;lower=-1,upper=1&gt; phi; //(-1,1) ensures unique solution //random effects (standard deviations) vector&lt;lower=0, upper = 1&gt;[2] sd_P; //phenotypic SRN mu &amp; psi SDs vector&lt;lower=0, upper = 1&gt;[2] sd_R; //male &amp; female residual SDs cholesky_factor_corr[2] LP; //phenotypic SRN correlations cholesky_factor_corr[2] LR; //sex-specific residual correlations matrix[I,2] std_devP; //individual-level unscaled P SRN deviations } transformed parameters { matrix[I,2] SRN_P; //scaled P SRN parameter deviations matrix[I,2] SRN_G; //scaled G SRN parameter deviations matrix[I,2] SRN_E; //scaled E SRN parameter deviations matrix[If, 2] partner_meanm; //average SRN parameters of males&#39; partners matrix[Im, 2] partner_meanf; //average SRN parameters of females&#39; partners //non-centered parameterization of phenotypic effects SRN_P = std_devP * diag_pre_multiply(sd_P, LP)&#39;; //calculate the mean SRN parameters of each male&#39;s lifetime partners for(i in 1:Im) partner_meanm[i] = [mean(col(SRN_P[partners_m[i,2:5]],1)), mean(col(SRN_P[partners_m[i,2:5]],2))]; //calculate the mean SRN parameters of each female&#39;s lifetime partners for(i in 1:If) partner_meanf[i] = [mean(col(SRN_P[partners_f[i,2:5]],1)), mean(col(SRN_P[partners_f[i,2:5]],2))]; } model{ //separate male and female vectors for efficiency matrix[Im,2] SRN_Pm = SRN_P[1:Im]; //male SRN phenotypic deviations matrix[If,2] SRN_Pf = SRN_P[(Im+1):I]; //female SRN phenotypic deviations //separate SRN intercepts and slopes (phenotypic deviations) vector[Im] mu_m = col(SRN_Pm,1); //SRN intercepts vector[If] mu_f = col(SRN_Pf,1); vector[Im] psi_m = col(SRN_Pm,2); //SRN slopes vector[If] psi_f = col(SRN_Pf,2); //separate mean partner SRN intercepts and slopes (deviations) vector[Im] mu_meanm = col(partner_meanm,1); //mean partner SRN intercept for males vector[If] mu_meanf = col(partner_meanf,1); //...for females vector[Im] psi_meanm = col(partner_meanm,2); //mean partner SRN slope for males vector[If] psi_meanf = col(partner_meanf,2); //...for females //initialize vectors for constructing individual-centered linear predictors vector[N_sex] eta_Wm; //within-individual centered male SRN trait value vector[N_sex] eta_Wf; //within-individual centered female SRN trait value vector[N_sex] eta_Bm; //individual male SRN trait value toward average partner vector[N_sex] eta_Bf; //individual female SRN trait toward average partner vector[N_sex] eta_meanm; //average SRN partner values for males vector[N_sex] eta_meanf; //average SRN partner values for females vector[N_sex] linpred_m; //expected value for male responses vector[N_sex] linpred_f; //expected value for female responses vector[N_sex] epsilon_m; //residuals for male responses vector[N_sex] epsilon_f; //residuals for male responses //Male and female aggression response model for (n in 1:N_sex) { //SRN trait values //assumes that n = 1 in the context of an ongoing social interaction //if n = 1 prior to social context, then specify eta[t=1] = mu_j instead if (time[n]==1) { //within-individual centered eta //male eta[t=1] = mu_j + psi_j*(mu_k - mu_meanK) eta_Wm[n] = mu_m[idm[n]] + (psi_1 + psi_m[idm[n]])*(mu_f[idf[n]] - mu_meanm[idm[n]]) ; //female eta[t=1] = mu_k + psi_k*(mu_j - mu_meanJ) eta_Wf[n] = mu_f[idf[n]] + (psi_1 + psi_f[idf[n]])*(mu_m[idm[n]] - mu_meanf[idf[n]]); //average individual eta //male eta[t=1] = mu_j + psi_j*mu_k eta_Bm[n] = (psi_1 + psi_m[idm[n]])*mu_meanm[idm[n]]; //female eta[t=1] = mu_k + psi_k*mu_j eta_Bf[n] = (psi_1 + psi_f[idf[n]])*mu_meanf[idf[n]]; //average partner eta[t=1] //average eta males&#39; partners [t=1] = mu_meanK + psi_meanK*mu_j eta_meanm[n] = mu_meanm[idm[n]] + (psi_1 + psi_meanm[idm[n]])*mu_m[idm[n]]; //average eta females&#39; partners [t=1] = mu_meanJ + psi_meanJ*mu_k eta_meanf[n] = mu_meanf[idf[n]] + (psi_1 + psi_meanf[idf[n]])*mu_f[idf[n]]; } else { //within-individual centered eta //male eta[t=2] = mu_j + psi_j*(eta_k[t=1] - eta_meanK[t=1]) eta_Wm[n] = mu_m[idm[n]] + (psi_1 + psi_m[idm[n]])*(eta_Wf[n-1] - eta_meanm[n-1]); //female eta[t=2] = mu_k + psi_k*(eta_j[t=1] - eta_meanJ[t=1]) eta_Wf[n] = mu_f[idf[n]] + (psi_1 + psi_f[idf[n]])*(eta_Wm[n-1] - eta_meanf[n-1]); //average individual eta //male average eta[t=2] = mu_j + psi_j*eta_meanK[t=1] eta_Bm[n] = (psi_1 + psi_m[idm[n]])*eta_meanm[n-1]; //female average eta[t=2] = mu_k + psi_k*eta_meanJ[t=1] eta_Bf[n] = (psi_1 + psi_f[idf[n]])*eta_meanf[n-1]; //average eta males&#39; partners [t=1] = mu_meanK + psi_meanK*mean eta_j[t-1] eta_meanm[n] = mu_meanm[idm[n]] + (psi_1 + psi_meanm[idm[n]])*(mu_m[idm[n]] + eta_Bm[n-1]); //female average partner eta eta_meanf[n] = mu_meanf[idf[n]] + (psi_1 + psi_meanf[idf[n]])*(mu_f[idf[n]] + eta_Bf[n-1]); } //add global intercept and between-individual parameters to linear predictor //other fixed effects can also be added here linpred_m[n] = alpha_0 + eta_Wm[n] + beta_B*eta_Bm[n]; //+beta_B*eta_Bm[n] linpred_f[n] = alpha_0 + eta_Wf[n] + beta_B*eta_Bf[n]; //+beta_B*eta_Bf[n] //residual trait values if(time[n]==1) { epsilon_m [n] = AG_m[n] - linpred_m[n]; epsilon_f [n] = AG_f[n] - linpred_f[n]; } else { linpred_m[n] = linpred_m[n] + phi * epsilon_f[n-1]; epsilon_m[n] = AG_m[n] - linpred_m[n]; linpred_f[n] = linpred_f[n] + phi * epsilon_m[n-1]; epsilon_f[n] = AG_f[n] - linpred_f[n]; } //correlated residuals between partners [epsilon_m[n],epsilon_f[n]]&#39; ~ multi_normal_cholesky([0,0], diag_pre_multiply(sd_R, LR)); } //model priors //fixed effects alpha_0 ~ std_normal(); psi_1 ~ std_normal(); beta_B ~ std_normal(); phi ~ std_normal(); //random effects to_vector(sd_P) ~ cauchy(0,1); to_vector(sd_R) ~ cauchy(0,1); LP ~ lkj_corr_cholesky(2); LR ~ lkj_corr_cholesky(2); to_vector(std_devP) ~ std_normal(); } generated quantities{ //cor and cov matrices of SRN parameters and residuals matrix[2,2] Pcor = LP * LP&#39;; //P SRN correlation matrix matrix[2,2] Rcor = LR * LR&#39;; //residual correlation matrix matrix[2,2] Pcov = diag_matrix(sd_P)*Pcor*diag_matrix(sd_P); //phenotypic covariance matrix[2,2] Rcov = iag_matrix(sd_R)*Rcor*diag_matrix(sd_R); //residual covariance //variances vector&lt;lower=0&gt;[2] V_P = sd_P .* sd_P; vector&lt;lower=0&gt;[2] V_R = sd_R .* sd_R; }&quot;, &quot;sam3_3p.stan&quot;) "],["fitness-model.html", "5 Fitness model 5.1 Simulate data 5.2 Estimating the model 5.3 Estimating assortment 5.4 Estimating selection differentials and genetic responses", " 5 Fitness model This chapter is a work in progress. Previous chapters showed how to estimate SRNs and assortment on SRN parameters using SAMs. In this chapter, well extend this basic approach to model how between-individual variation in SRN parameters affects individuals relative fitness, which well then use to predict patterns of adaptive social evolution in the phenotype. Our basic fitness model considers linear directional selection on each individuals SRN intercept \\(\\mu_j\\) and slope \\(\\psi_j\\), as well as directional social selection due to partner SRN intercepts \\(\\mu&#39;_k\\) and slopes \\(\\psi&#39;_k\\). In addition, the magnitude of this directional selection is modulated by the interactive effects of the joint individual and partner phenotypes \\(\\mu_j\\mu&#39;_k\\) and \\(\\psi_j\\psi&#39;_k\\). These interactive effects reflect synergy (+) or antagonism (-) between the trait values of individuals and their social partners. In Martin and Jaeggi (2021), the fitness model is formally presented for the effects of the average social partner. For the purposes of this simulation, we instead consider a fitness model for the reproductive success of each individual and partner dyad across multiple reproductive seasons, rather than the effect of the average partner across seasons. In particular, following the within and between partner model (Ch. 4 ), we assume that individuals are sampled repeated within partners (2x) across multiple partners (x4). For the fitness model, we assume that these pairs are (serially) monogamous breeding partners measured across breeding seasons, with a single fitness measure (e.g. fledgling success) taken once per pair at the end of the breeding season. Estimating fitness effects across these repeated measures provides more power for the estimation of selection and assortment, on the assumption that fitness effects do not meaningfully vary across breeding seasons. This may be unrealistic for a variety of reasons (e.g. density-dependent effects), in which case the fitness model can be expanded with season-specific coefficients. The model for relative fitness \\(w\\) measure \\(i\\) of individual \\(j\\) with partner \\(k\\) is therefore given as \\[w_{ijk} = \\nu_0 + \\beta_{N1} + \\beta_{N2} + \\beta_{S1} + \\beta_{S2} + \\beta_{I2} + \\beta_{I2} \\] where we. Note that the interpretation of the regression coefficients is contingent on the potentially arbitrary designation of focal and social partner sex. In this case, we treat males as focals, such that \\(\\boldsymbol{\\beta_N}\\) represent nonsocial selection gradients on male SRNs, while \\(\\boldsymbol{\\beta_S}\\) represent social selection gradients acting on males due to female mating partners. For females in this simplified context of purely monogamous reproduction, the interpretation is reversed, given that \\(w_{ijk}\\) is the shared fitness of both partners during their interaction. Under the further simplifying assumptions that \\[\\beta_{N1}=\\beta_{S1}\\] and \\[\\beta_{N2}=\\beta_{S2}\\], a single selection differential can be used to characterize both males and females in the population. Of course, this will often be unrealistic, and males and female partners will often have only partially shared fitness outcomes, in which case more general sex-specific response models can also be specified \\[w_{ij} = \\nu_0 + \\beta_{N1}\\mu_j + \\beta_{N2}\\psi_j + \\beta_{S1}\\mu&#39;_k + \\beta_{S2}\\psi&#39;_k + \\beta_{I2}(\\mu_j\\mu&#39;_k) + \\beta_{I2}(\\psi_j\\psi&#39;_k) \\] \\[w&#39;_{ik} = \\nu_0 + \\beta&#39;_{N1}\\mu&#39;_k + \\beta&#39;_{N2}\\psi&#39;_k + \\beta&#39;_{S1}\\mu_j + \\beta&#39;_{S2}\\psi_j + \\beta&#39;_{I2}(\\mu&#39;_k\\mu_j) + \\beta&#39;_{I2}(\\psi&#39;_k\\psi_j) \\] For pedagogical purposes, we simulate data under the simpler shared dyadic fitness model and will consider more complex cases in subsequent SAM extensions. 5.1 Simulate data The initial simulation approach is identical to previous chapters and can be reviewed there. We generate data appropriate for the within and between partner SAM, assuming that assortment occurs between dyadic partners for SRN slopes. library(mvtnorm) #common settings I_partner = 4 #partners/individual I_obs = 2 #observations/individual/seasonal partner I_sample = I_partner*I_obs #samples/individual #population properties I=300 #total individuals for simulation popmin=400 popmax=600 ngenerations = 10 nids&lt;-sample(popmin:popmax, ngenerations, replace=TRUE) #N / generation epm = sample(seq(0.15, 0.25,by=0.05),1) #extra-pair mating nonb = sample(seq(0.4,0.6,by=0.05),1) #proportion of non-breeding / generation #relatedness matrix A_mat &lt;- pedfun(popmin=popmin, popmax=popmax, ngenerations=ngenerations, epm=epm, nonb=nonb, nids=nids, I=I, missing=FALSE) ##################################################################### #Parameter values ##################################################################### alpha_0 = 0 #global intercept psi_1 = -0.5 #population interaction coefficient phi = 0.5 #residual feedback coefficient (epsilon_j ~ epsilon_t-1k) SD_intercept = 0.3 #standard deviation of SRN intercepts SD_slope = 0.3 #SD of SRN slopes r_alpha = 0.3 #assortment coefficient (expressed as correlation) r_G = 0.3 #genetic correlation of random intercepts and slopes r_E = 0.3 #environmental correlation r_R = -0.3 #residual effect correlation (epsilon_tj = epsilon_tk) V_G = 0.3 #genetic variance of REs V_E = 0.3 #genetic variance of REs res_V = 1 #Random effect correlations G_cor &lt;- matrix(c(1,r_G,r_G,1), nrow=2, ncol=2) #mu_A, beta_A G_sd &lt;- c(sqrt(V_G),sqrt(V_G)) #G effect sds G_cov &lt;- diag(G_sd) %*% G_cor %*% diag(G_sd) E_cor &lt;- matrix(c(1,r_E,r_E,1), nrow=2, ncol=2) #mu_E, beta_E E_sd &lt;- c(sqrt(V_E),sqrt(V_E)) #E effect sds E_cov &lt;- diag(E_sd) %*% E_cor %*% diag(E_sd) #matrices G_block &lt;- G_cov %x% A_mat E_block &lt;- E_cov %x% diag(1,I) #generate correlated REs Gvalues &lt;- rmvnorm(1, mean=rep(0,I*2), sigma=G_block) G_val = data.frame(matrix(Gvalues, nrow=I, ncol=2)) cor(G_val) ## X1 X2 ## X1 1.0000000 0.2398965 ## X2 0.2398965 1.0000000 Evalues &lt;- rmvnorm(1, mean=rep(0,I*2), sigma=E_block) E_val = data.frame(matrix(Evalues, nrow=I, ncol=2)) cor(E_val) ## X1 X2 ## X1 1.0000000 0.2836882 ## X2 0.2836882 1.0000000 #combine temporary object for all SRN parameters #use shorthand mu = 0, psi = 1 P = cbind(G_val,E_val) colnames(P) = c(&quot;A0&quot;, &quot;A1&quot;, &quot;E0&quot;, &quot;E1&quot;) #individual phenotypic REs #use shorthand mu = 0, psi = 1 P$P0 = P$A0 + P$E0 P$P1 = P$A1 + P$E1 #add ID P$ID = seq(1:I) library(dplyr) library(MASS) pairs = list() for (j in 1:I_partner){ #male additive genetic RN slopes (x I_partner for multiple lifetime partners) sort.m &lt;- data.frame(P1_m = P$P1[1:(I/2)], ID_m = (1:(I/2)) ) sort.m&lt;-sort.m[order(sort.m[,&quot;P1_m&quot;]),] #female phenotypic RN slopes sort.f &lt;- data.frame(P1_f = P$P1[(I/2 + 1):I], ID_f = ((I/2+1):I) ) sort.f&lt;-sort.f[order(sort.f[,&quot;P1_f&quot;]),] #generate random dataset with desired rank-order correlation temp_mat &lt;- matrix(r_alpha, ncol = 2, nrow = 2) #cor of male and female values diag(temp_mat) &lt;- 1 #cor matrix #sim values temp_data1&lt;-MASS::mvrnorm(n = I/2, mu = c(0, 0), Sigma = temp_mat, empirical=TRUE) #ranks of random data rm &lt;- rank(temp_data1[ , 1], ties.method = &quot;first&quot;) rf &lt;- rank(temp_data1[ , 2], ties.method = &quot;first&quot;) #induce cor through rank-ordering of RN vectors cor(sort.m$P1_m[rm], sort.f$P1_f[rf]) #sort partner ids into dataframe partner.id = data.frame(ID_m = sort.m$ID_m[rm], ID_f = sort.f$ID_f[rf]) partner.id = partner.id[order(partner.id[,&quot;ID_m&quot;]),] #add to list pairs[[j]] = partner.id } partner.id = bind_rows(pairs) partner.id = partner.id[order(partner.id$ID_m),] #put all dyads together partner.id$dyadn = seq(1:nrow(partner.id)) #add values back to dataframe (male and joint) partner.id$P0m &lt;- P$P0[match(partner.id$ID_m,P$ID)] partner.id$P0f &lt;- P$P0[match(partner.id$ID_f,P$ID)] partner.id$P1m &lt;- P$P1[match(partner.id$ID_m,P$ID)] partner.id$P1f &lt;- P$P1[match(partner.id$ID_f,P$ID)] partner.id$A0m &lt;- P$A0[match(partner.id$ID_m,P$ID)] partner.id$A0f &lt;- P$A0[match(partner.id$ID_f,P$ID)] partner.id$A1m &lt;- P$A1[match(partner.id$ID_m,P$ID)] partner.id$A1f &lt;- P$A1[match(partner.id$ID_f,P$ID)] partner.id$E0m &lt;- P$E0[match(partner.id$ID_m,P$ID)] partner.id$E0f &lt;- P$E0[match(partner.id$ID_f,P$ID)] partner.id$E1m &lt;- P$E1[match(partner.id$ID_m,P$ID)] partner.id$E1f &lt;- P$E1[match(partner.id$ID_f,P$ID)] #check correlation again cor(partner.id$P0m, partner.id$P0f) ## [1] 0.03458745 #calculate mean partner phenotype for each subject #average female for male partners mean_0m &lt;- aggregate(P0f ~ ID_m, mean, data = partner.id) names(mean_0m)[2] &lt;- &quot;meanP0m&quot; mean_1m &lt;- aggregate(P1f ~ ID_m, mean, data = partner.id) names(mean_1m)[2] &lt;- &quot;meanP1m&quot; partner.id$meanP0m &lt;- mean_0m$meanP0m[match(partner.id$ID_m,mean_0m$ID_m)] partner.id$meanP1m &lt;- mean_1m$meanP1m[match(partner.id$ID_m,mean_1m$ID_m)] #average male for female partners mean_0f &lt;- aggregate(P0m ~ ID_f, mean, data = partner.id) names(mean_0f)[2] &lt;- &quot;meanP0f&quot; mean_1f &lt;- aggregate(P1m ~ ID_f, mean, data = partner.id) names(mean_1f)[2] &lt;- &quot;meanP1f&quot; partner.id$meanP0f &lt;- mean_0f$meanP0f[match(partner.id$ID_f,mean_0f$ID_f)] partner.id$meanP1f &lt;- mean_1f$meanP1f[match(partner.id$ID_f,mean_1f$ID_f)] #number of dyads ndyad = nrow(partner.id) #expand for repeated measures partner.id$rep &lt;- I_obs pair_df &lt;- partner.id[rep(row.names(partner.id), partner.id$rep),] #correlations cor(partner.id$P0m, partner.id$P0f) ## [1] 0.03458745 cor(partner.id$P1m, partner.id$P0f) ## [1] 0.05812365 cor(partner.id$P0m, partner.id$P1f) ## [1] 0.1484297 cor(partner.id$P1m, partner.id$P1f) ## [1] 0.2969358 ##################################################################### #Additional effects ##################################################################### #correlated residuals between male and females R_cor &lt;- matrix(c(1,r_R,r_R,1), nrow=2, ncol=2) res_sd &lt;- sqrt(res_V) R_cov &lt;- diag(c(res_sd,res_sd)) %*% R_cor %*% diag(c(res_sd,res_sd)) res_ind&lt;-data.frame(rmvnorm(nrow(pair_df), c(0,0), R_cov)) pair_df$resAGm = res_ind$X1 pair_df$resAGf = res_ind$X2 ##################################################################### #Simulate responses over t = {1,2} per partner ##################################################################### #add interaction number pair_df$turn = rep(c(1,2),ndyad) #average male social environment at time = 1 pair_df[pair_df$turn==1,&quot;meaneta_m&quot;] = pair_df[pair_df$turn==1,&quot;meanP0m&quot;] + (psi_1 + pair_df[pair_df$turn==1,&quot;meanP1m&quot;])*(pair_df[pair_df$turn==1,&quot;P0m&quot;]) #average female social environment at time = 1 pair_df[pair_df$turn==1,&quot;meaneta_f&quot;] = pair_df[pair_df$turn==1,&quot;meanP0f&quot;] + (psi_1 + pair_df[pair_df$turn==1,&quot;meanP1f&quot;])*(pair_df[pair_df$turn==1,&quot;P0f&quot;]) #individual prediction at t = 1 #males #eta_j{t=1} = mu_j + psi_j*(mu_k - mu_meanK) pair_df[pair_df$turn==1,&quot;eta_m&quot;] = pair_df[pair_df$turn==1,&quot;P0m&quot;] + (psi_1 + pair_df[pair_df$turn==1,&quot;P1m&quot;])*(pair_df[pair_df$turn==1,&quot;P0f&quot;]) #females #eta_k{t=1} = mu_k + psi_k*(mu_j - mu_meanJ) pair_df[pair_df$turn==1,&quot;eta_f&quot;] = pair_df[pair_df$turn==1,&quot;P0f&quot;] + (psi_1 + pair_df[pair_df$turn==1,&quot;P1f&quot;])*(pair_df[pair_df$turn==1,&quot;P0m&quot;]) #individual prediction at t = 2 #eta_j{t=2} = mu_j + psi_j*(eta_k{t=1} - eta_meanK{t=1}) pair_df[pair_df$turn==2,&quot;eta_m&quot;] = pair_df[pair_df$turn==2,&quot;P0m&quot;] + (psi_1 + pair_df[pair_df$turn==2,&quot;P1m&quot;])*(pair_df[pair_df$turn==1,&quot;eta_f&quot;]) #females pair_df[pair_df$turn==2,&quot;eta_f&quot;] = pair_df[pair_df$turn==2,&quot;P0f&quot;] + (psi_1 + pair_df[pair_df$turn==2,&quot;P1f&quot;])*(pair_df[pair_df$turn==1,&quot;eta_m&quot;]) #add intercept and residual pair_df$AG_m = alpha_0 + pair_df$eta_m + pair_df$resAGm pair_df$AG_f = alpha_0 + pair_df$eta_f + pair_df$resAGf #add residual feedback pair_df[pair_df$turn==2,&quot;AG_m&quot;] = pair_df[pair_df$turn==2,&quot;AG_m&quot;] + phi * pair_df[pair_df$turn==1,&quot;resAGf&quot;] pair_df[pair_df$turn==2,&quot;AG_f&quot;] = pair_df[pair_df$turn==2,&quot;AG_f&quot;] + phi * pair_df[pair_df$turn==1,&quot;resAGm&quot;] We can now simulate the relative fitness measure for each dyad during their interaction. We set the regression coefficients for moderate effect sizes. #set coefficients nu_0 = 1 #relative fitness intercept beta_n1 = 0.3 beta_n2 = -0.3 beta_s1 = 0.3 beta_s2 = -0.3 beta_i1 = -0.3 beta_i2 = -0.3 #dyad fitness (nu_0 = 1 so that w is relative fitness w = W/W_mean for the unbiased population mean fitness) pair_df$w_mu = nu_0 + beta_n1*pair_df$P0m + beta_n2*pair_df$P1m + beta_s1*pair_df$P0f + beta_s2*pair_df$P1f + beta_i1*(pair_df$P0m*pair_df$P0f) + beta_i2*(pair_df$P1m*pair_df$P1f) #remove redundant elements w_mu&lt;-pair_df[seq(1, nrow(pair_df), by=I_obs),&quot;w_mu&quot;] #add stochastic effects (same sd as phenotype) w = w_mu + rnorm(length(w_mu),0, res_sd) Well need additional indices for the Stan code to appropriately estimate the fitness model. ##################################################################### #Prepare data for Stan ##################################################################### #individual indices Im = I/2 #number of males If = I/2 #number of females N_sex = (I/2)*2*4 #total observations per sex idm&lt;-pair_df$ID_m #male ID idf&lt;-pair_df$ID_f #female ID idf&lt;-idf - (Im) #index within female vector dyadAG &lt;- pair_df$dyadn dyadw &lt;- seq(1:ndyad) #partner IDs for male individuals partners_m&lt;-data.frame(idfocal = rep(1:(I/2)), #all partners ID partner1 = NA, partner2 = NA, partner3 = NA, partner4 = NA) for(i in 1:(I/2)){partners_m[i,c(2:5)] &lt;-partner.id[partner.id$ID_m==i,&quot;ID_f&quot;]} #partner IDs for female individuals partners_f&lt;-data.frame(idfocal = rep((I/2+1):I), #all partners ID partner1 = NA, partner2 = NA, partner3 = NA, partner4 = NA) for(i in (I/2+1):I){partners_f[i-(I/2),c(2:5)] &lt;-partner.id[partner.id$ID_f==i,&quot;ID_m&quot;]} ###################### #data prep for Stan stan_data &lt;- list(N_sex = N_sex, I = I, Im=Im, If = If, idm = idm, idf = idf, partners_m = partners_m, partners_f = partners_f, AG_m = pair_df$AG_m, AG_f = pair_df$AG_f, time = pair_df$turn, A = A_mat, #new indices and data Idyad=ndyad, dyadw = dyadw, idmw = partner.id$ID_m, idfw = c(partner.id$ID_f-Im), w = w) 5.2 Estimating the model Were now prepared to extend the Stan code for the within and between partner model to account for selection on SRN intercepts and slopes. This involves specifying the fitness model described above as an additional response model, with SRN parameters simultaneously specified on the phenotype and fitness. As described in the main text, this multi-response model will avoid various sources of statistical bias that result from estimating these models in isolation. Fortunately, in contrast to the more complex SRN model, it is quite straightforward to add the fitness model with a few additional declarations in the data, parameters, and model program blocks. These changes are separated out with comments in the code below for clarity. write(&quot; data { //indices and scalars used for model specification int&lt;lower=1&gt; N_sex; //total aggression observations per sex (I/2 * 4 lifetime partners) int&lt;lower=0&gt; I; //total individuals (M + F) int&lt;lower=0&gt; Im; //number of males int&lt;lower=0&gt; If; //number of females int&lt;lower=1&gt; idm[N_sex]; //index of male AG observations (of length N_sex) int&lt;lower=1&gt; idf[N_sex]; //index of female AG observations int&lt;lower=1&gt; partners_m [Im,5]; //index of male partner IDs, first column is focal ID (1 + 4 IDs) int&lt;lower=1&gt; partners_f [If,5]; //index of female partner IDs, first column is focal ID (1 + 4 IDs) //empirical data matrix[I,I] A; //relatedness matrix real AG_m[N_sex]; //male aggression measurements real AG_f[N_sex]; //female aggression measurements real time[N_sex]; //time index (=1 for all measures) //new fitness data int&lt;lower=1&gt; Idyad; //number of dyads int&lt;lower=1&gt; idmw[Idyad]; //index of male w observations int&lt;lower=1&gt; idfw[Idyad]; //index of female w observations int&lt;lower=1&gt; dyadw[Idyad]; //index of dyads for FS real w[Idyad]; // dyad response } transformed data{ matrix[I,I] LA = cholesky_decompose(A); //lower-triangle A matrix } parameters { //new fitness parameters real nu_0; //fitness global intercept real&lt;lower=0, upper = 1&gt;sd_delta; //residual of fitness real beta_N1; //selection gradients real beta_N2; //could also be specified as vectors real beta_S1; real beta_S2; real beta_I1; real beta_I2; //population effects real alpha_0; //aggression global intercept real psi_1; //expected interaction coefficient real beta_B; //between partner effect real&lt;lower=-1,upper=1&gt; phi; //(-1,1) ensures unique solution //no way to partition feedback when t=1 //real&lt;lower=-1,upper=1&gt; phi; //(-1,1) ensures unique solution //random effects (standard deviations) vector&lt;lower=0, upper = 1&gt;[2] sd_P; //phenotypic SRN mu &amp; psi SDs vector&lt;lower=0, upper = 1&gt;[2] sd_R; //male &amp; female residual SDs cholesky_factor_corr[2] LG; //genetic SRN correlations cholesky_factor_corr[2] LE; //permanent environmental SRN correlations cholesky_factor_corr[2] LR; //sex-specific residual correlations matrix[I,2] std_devG; //individual-level unscaled G SRN deviations matrix[I,2] std_devE; //individual-level unscaled E SRN deviations //SRN heritability parmameters, i.e. Var(G_RN) / Var(P_RN) //see supplementary appendix SI for further explanation of this parameter vector&lt;lower=0,upper=1&gt;[2] SRN_h2; } transformed parameters { vector&lt;lower=0&gt;[2] sd_G; //SDs of G effects (derived from sd_P) vector&lt;lower=0&gt;[2] sd_E; //SDs of E effects (derived from sd_P) matrix[I,2] SRN_P; //scaled P SRN parameter deviations matrix[I,2] SRN_G; //scaled G SRN parameter deviations matrix[I,2] SRN_E; //scaled E SRN parameter deviations matrix[If, 2] partner_meanm; //average SRN parameters of males&#39; partners matrix[Im, 2] partner_meanf; //average SRN parameters of females&#39; partners //standard deviations of genetic effects //simplified from sqrt ( total RN phenotype variance * h2 ) sd_G[1] = sd_P[1] * sqrt(SRN_h2[1]); //genetic SD for RN intercepts sd_G[2] = sd_P[2] * sqrt(SRN_h2[2]); //genetic SD for RN slopes //standard deviations of environmental effects (total phenotype SD * proportion environment SD) sd_E[1] = sd_P[1] * sqrt(1 - SRN_h2[1]); //environment SD for RN intercepts sd_E[2] = sd_P[2] * sqrt(1 - SRN_h2[2]); //environment SD for RN slopes //matrix normal parameterization of Kronecker product between G and A SRN_G = LA * std_devG * diag_pre_multiply(sd_G, LG)&#39; ; //non-centered parameterization of permanent environmental effects SRN_E = std_devE * diag_pre_multiply(sd_E, LE)&#39;; //phenotypic RN effects (P = G + E); here G = additive genetic effects SRN_P = SRN_G + SRN_E; //calculate the mean SRN parameters of each male&#39;s lifetime partners for(i in 1:Im) partner_meanm[i] = [mean(col(SRN_P[partners_m[i,2:5]],1)), mean(col(SRN_P[partners_m[i,2:5]],2))]; //calculate the mean SRN parameters of each female&#39;s lifetime partners for(i in 1:If) partner_meanf[i] = [mean(col(SRN_P[partners_f[i,2:5]],1)), mean(col(SRN_P[partners_f[i,2:5]],2))]; } model{ //separate male and female vectors for efficiency matrix[Im,2] SRN_Pm = SRN_P[1:Im]; //male SRN phenotypic deviations matrix[If,2] SRN_Pf = SRN_P[(Im+1):I]; //female SRN phenotypic deviations //separate SRN intercepts and slopes (phenotypic deviations) vector[Im] mu_m = col(SRN_Pm,1); //SRN intercepts vector[If] mu_f = col(SRN_Pf,1); vector[Im] psi_m = col(SRN_Pm,2); //SRN slopes vector[If] psi_f = col(SRN_Pf,2); //separate mean partner SRN intercepts and slopes (deviations) vector[Im] mu_meanm = col(partner_meanm,1); //mean partner SRN intercept for males vector[If] mu_meanf = col(partner_meanf,1); //...for females vector[Im] psi_meanm = col(partner_meanm,2); //mean partner SRN slope for males vector[If] psi_meanf = col(partner_meanf,2); //...for females //initialize vectors for constructing individual-centered linear predictors vector[N_sex] eta_Wm; //within-individual centered male SRN trait value vector[N_sex] eta_Wf; //within-individual centered female SRN trait value vector[N_sex] eta_Bm; //individual male SRN trait value toward average partner vector[N_sex] eta_Bf; //individual female SRN trait toward average partner vector[N_sex] eta_meanm; //average SRN partner values for males vector[N_sex] eta_meanf; //average SRN partner values for females vector[N_sex] linpred_m; //expected value for male responses vector[N_sex] linpred_f; //expected value for female responses vector[N_sex] epsilon_m; //residuals for male responses vector[N_sex] epsilon_f; //residuals for male responses //new fitness model declarations vector[Idyad] w_pred; //linear predictor of fitness //Male and female aggression response model for (n in 1:N_sex) { //SRN trait values //assumes that n = 1 in the context of an ongoing social interaction //if n = 1 prior to social context, then specify eta[t=1] = mu_j instead if (time[n]==1) { //within-individual centered eta //male eta[t=1] = mu_j + psi_j*(mu_k - mu_meanK) eta_Wm[n] = mu_m[idm[n]] + (psi_1 + psi_m[idm[n]])*(mu_f[idf[n]] - mu_meanm[idm[n]]) ; //female eta[t=1] = mu_k + psi_k*(mu_j - mu_meanJ) eta_Wf[n] = mu_f[idf[n]] + (psi_1 + psi_f[idf[n]])*(mu_m[idm[n]] - mu_meanf[idf[n]]); //average individual eta //male eta[t=1] = mu_j + psi_j*mu_k eta_Bm[n] = (psi_1 + psi_m[idm[n]])*mu_meanm[idm[n]]; //female eta[t=1] = mu_k + psi_k*mu_j eta_Bf[n] = (psi_1 + psi_f[idf[n]])*mu_meanf[idf[n]]; //average partner eta[t=1] //average eta males&#39; partners [t=1] = mu_meanK + psi_meanK*mu_j eta_meanm[n] = mu_meanm[idm[n]] + (psi_1 + psi_meanm[idm[n]])*mu_m[idm[n]]; //average eta females&#39; partners [t=1] = mu_meanJ + psi_meanJ*mu_k eta_meanf[n] = mu_meanf[idf[n]] + (psi_1 + psi_meanf[idf[n]])*mu_f[idf[n]]; } else { //within-individual centered eta //male eta[t=2] = mu_j + psi_j*(eta_k[t=1] - eta_meanK[t=1]) eta_Wm[n] = mu_m[idm[n]] + (psi_1 + psi_m[idm[n]])*(eta_Wf[n-1] - eta_meanm[n-1]); //female eta[t=2] = mu_k + psi_k*(eta_j[t=1] - eta_meanJ[t=1]) eta_Wf[n] = mu_f[idf[n]] + (psi_1 + psi_f[idf[n]])*(eta_Wm[n-1] - eta_meanf[n-1]); //average individual eta //male average eta[t=2] = mu_j + psi_j*eta_meanK[t=1] eta_Bm[n] = (psi_1 + psi_m[idm[n]])*eta_meanm[n-1]; //female average eta[t=2] = mu_k + psi_k*eta_meanJ[t=1] eta_Bf[n] = (psi_1 + psi_f[idf[n]])*eta_meanf[n-1]; //average eta males&#39; partners [t=1] = mu_meanK + psi_meanK*mean eta_j[t-1] eta_meanm[n] = mu_meanm[idm[n]] + (psi_1 + psi_meanm[idm[n]])*(mu_m[idm[n]] + eta_Bm[n-1]); //female average partner eta eta_meanf[n] = mu_meanf[idf[n]] + (psi_1 + psi_meanf[idf[n]])*(mu_f[idf[n]] + eta_Bf[n-1]); } //add global intercept and between-individual parameters to linear predictor //other fixed effects can also be added here linpred_m[n] = alpha_0 + eta_Wm[n] + beta_B*eta_Bm[n]; //+beta_B*eta_Bm[n] linpred_f[n] = alpha_0 + eta_Wf[n] + beta_B*eta_Bf[n]; //+beta_B*eta_Bf[n] //residual trait values if(time[n]==1) { epsilon_m [n] = AG_m[n] - linpred_m[n]; epsilon_f [n] = AG_f[n] - linpred_f[n]; } else { linpred_m[n] = linpred_m[n] + phi * epsilon_f[n-1]; epsilon_m[n] = AG_m[n] - linpred_m[n]; linpred_f[n] = linpred_f[n] + phi * epsilon_m[n-1]; epsilon_f[n] = AG_f[n] - linpred_f[n]; } //correlated residuals between partners [epsilon_m[n],epsilon_f[n]]&#39; ~ multi_normal_cholesky([0,0], diag_pre_multiply(sd_R, LR)); } //new fitness model w_pred = nu_0 + beta_N1*mu_m[idmw] + beta_N2*psi_m[idmw] + beta_S1*mu_f[idfw] + beta_S2*psi_f[idfw] + beta_I1*(mu_m[idmw].*mu_f[idfw]) + beta_I2*(psi_m[idmw].*psi_f[idfw]); w ~ normal(w_pred, sd_delta); //model priors //fixed effects alpha_0 ~ std_normal(); psi_1 ~ std_normal(); beta_B ~ std_normal(); phi ~ std_normal(); //random effects to_vector(sd_P) ~ cauchy(0,1); to_vector(sd_R) ~ cauchy(0,1); LG ~ lkj_corr_cholesky(2); LE ~ lkj_corr_cholesky(2); LR ~ lkj_corr_cholesky(2); to_vector(std_devG) ~ std_normal(); to_vector(std_devE) ~ std_normal(); //reaction norm heritability to_vector(SRN_h2) ~ beta(1.2,1.2); //new fitness priors nu_0 ~ std_normal(); sd_delta ~ cauchy(0,1); beta_N1 ~ std_normal(); beta_N2 ~ std_normal(); beta_S1 ~ std_normal(); beta_S2 ~ std_normal(); beta_I1 ~ std_normal(); beta_I2 ~ std_normal(); } generated quantities{ //cor and cov matrices of SRN parameters and residuals matrix[2,2] Gcor = LG * LG&#39;; //G SRN correlation matric matrix[2,2] Ecor = LE * LE&#39;; //E SRN correlation matric matrix[2,2] Rcor = LR * LR&#39;; //residual correlation matrix matrix[2,2] Rcov = diag_matrix(sd_R)*Rcor*diag_matrix(sd_R); //residual covariance matrix[2,2] Gcov = diag_matrix(sd_G)*Gcor*diag_matrix(sd_G); //G SRN covariance matrix[2,2] Ecov = diag_matrix(sd_E)*Ecor*diag_matrix(sd_E); //E SRN covariance matrix[2,2] Pcov = Gcov + Ecov; //P SRN covariance matrix[2,2] Pcor = inverse(diag_matrix(sd_P))*Pcov*inverse(diag_matrix(sd_P)); //P SRN correlation //variances vector&lt;lower=0&gt;[2] V_P = sd_P .* sd_P; vector&lt;lower=0&gt;[2] V_G = sd_G .* sd_G; vector&lt;lower=0&gt;[2] V_E = sd_E .* sd_E; vector&lt;lower=0&gt;[2] V_R = sd_R .* sd_R; }&quot;, &quot;sam5_w.stan&quot;) Depending on the sample size set during the simulation, this model will likely take 30+ min to finish sampling. The total number of iterations can be reduced to save time, but is set to a large value here to ensure sufficient effective sample sizes for some parameters. library(rstan) sam_5 = stan_model(&quot;sam5_w.stan&quot;) stan_results5 &lt;- sampling(sam_5, data=stan_data, init = 0, warmup=1500, iter = 3000, chains=4, cores=4, control=list(adapt_delta=0.90) ) library(bayesplot) mcmc_areas(stan_results5, pars = c( &quot;psi_1&quot;, &quot;nu_0&quot;, &quot;beta_B&quot;, &quot;beta_N1&quot;, &quot;beta_N2&quot;, &quot;beta_S1&quot;, &quot;beta_S2&quot;, &quot;beta_I1&quot;, &quot;beta_I2&quot;, &quot;V_P[1]&quot;, &quot;V_P[2]&quot;, &quot;Gcor[2,1]&quot;, &quot;Ecor[2,1]&quot;, &quot;Rcor[2,1]&quot;, &quot;Pcor[2,1]&quot;, &quot;SRN_h2[1]&quot;, &quot;SRN_h2[2]&quot;), prob = 0.9 ) The model appears to be accurately recovering the directions and relative magnitudes of the selection coefficients in the fitness model (beta_N1 = 0.3, beta_N2 = -0.3, beta_S1 = 0.3 beta_S2 = -0.3 beta_i1 = -0.3 beta_i2 = -0.3). We can further summarize all model parameters. summary(stan_results5, pars = c( &quot;psi_1&quot;, &quot;nu_0&quot;, &quot;beta_B&quot;, &quot;beta_N1&quot;, &quot;beta_N2&quot;, &quot;beta_S1&quot;, &quot;beta_S2&quot;, &quot;beta_I1&quot;, &quot;beta_I2&quot;, &quot;V_P[1]&quot;, &quot;V_P[2]&quot;, &quot;Gcor[2,1]&quot;, &quot;Ecor[2,1]&quot;, &quot;Rcor[2,1]&quot;, &quot;Pcor[2,1]&quot;, &quot;SRN_h2[1]&quot;, &quot;SRN_h2[2]&quot;), prob = c(0.05,0.95)) ## $summary ## mean se_mean sd 5% 95% n_eff Rhat ## psi_1 -0.3903350 0.0016325719 0.09588072 -0.5460350 -0.2317982 3449.1963 1.0001175 ## nu_0 1.0464404 0.0013659650 0.08466872 0.9010564 1.1806849 3842.0845 0.9998070 ## beta_B 1.1582272 0.0011243409 0.08992763 1.0161464 1.3109351 6397.2045 0.9996772 ## beta_N1 0.2166713 0.0006917691 0.06372371 0.1122317 0.3222466 8485.5461 0.9999679 ## beta_N2 -0.4348844 0.0013007100 0.08643801 -0.5782045 -0.2970516 4416.1985 1.0000227 ## beta_S1 0.2973242 0.0006436937 0.05729756 0.2066354 0.3926159 7923.4413 0.9997188 ## beta_S2 -0.3400138 0.0012541257 0.08701646 -0.4823422 -0.1978696 4814.1621 1.0001142 ## beta_I1 -0.2128305 0.0007684354 0.06844721 -0.3254360 -0.1032292 7934.0833 0.9999801 ## beta_I2 -0.3807430 0.0015619586 0.12107146 -0.5890375 -0.1889682 6008.2015 0.9999252 ## V_P[1] 0.7302824 0.0021869686 0.08216746 0.6038768 0.8806658 1411.6097 1.0016250 ## V_P[2] 0.5116032 0.0013309331 0.06739049 0.4090406 0.6301444 2563.8039 1.0029822 ## Gcor[2,1] 0.2138635 0.0126312653 0.21664447 -0.1542051 0.5441012 294.1721 1.0058479 ## Ecor[2,1] 0.2926469 0.0235324096 0.30864166 -0.2532883 0.7573681 172.0190 1.0147249 ## Rcor[2,1] -0.2690686 0.0003287690 0.02998508 -0.3175443 -0.2195421 8318.1889 0.9996757 ## Pcor[2,1] 0.2366817 0.0011571001 0.07295219 0.1139293 0.3552949 3974.9790 0.9997386 ## SRN_h2[1] 0.7421979 0.0084678822 0.14319616 0.4845081 0.9519150 285.9652 1.0096800 ## SRN_h2[2] 0.4679584 0.0112008274 0.18673900 0.1589068 0.7787813 277.9520 1.0271723 ## ## $c_summary ## , , chains = chain:1 ## ## stats ## parameter mean sd 5% 95% ## psi_1 -0.3872063 0.09861635 -0.5475365 -0.2249270 ## nu_0 1.0454135 0.08838982 0.8936080 1.1844534 ## beta_B 1.1566412 0.09090334 1.0137051 1.3167734 ## beta_N1 0.2182884 0.06627229 0.1114848 0.3295938 ## beta_N2 -0.4374454 0.08959043 -0.5856552 -0.2947141 ## beta_S1 0.2963380 0.05703432 0.2116314 0.3932979 ## beta_S2 -0.3426330 0.08642519 -0.4831848 -0.2044489 ## beta_I1 -0.2148305 0.07125097 -0.3313509 -0.1001358 ## beta_I2 -0.3766575 0.12087127 -0.5771426 -0.1781502 ## V_P[1] 0.7313821 0.08429977 0.6039588 0.8828664 ## V_P[2] 0.5065593 0.06958446 0.4011437 0.6302400 ## Gcor[2,1] 0.1899987 0.22878695 -0.2135318 0.5388491 ## Ecor[2,1] 0.3325432 0.30481811 -0.1670998 0.7817970 ## Rcor[2,1] -0.2684372 0.03030410 -0.3177025 -0.2180545 ## Pcor[2,1] 0.2372362 0.07199102 0.1144489 0.3550806 ## SRN_h2[1] 0.7549934 0.12770779 0.5260744 0.9396044 ## SRN_h2[2] 0.4502326 0.17696877 0.1616646 0.7427736 ## ## , , chains = chain:2 ## ## stats ## parameter mean sd 5% 95% ## psi_1 -0.3904770 0.09533594 -0.5485837 -0.2355674 ## nu_0 1.0449918 0.08559087 0.8993617 1.1780034 ## beta_B 1.1568600 0.09195347 1.0141436 1.3154594 ## beta_N1 0.2182140 0.06322767 0.1144289 0.3197769 ## beta_N2 -0.4348249 0.08641823 -0.5782807 -0.2958345 ## beta_S1 0.2988585 0.05789815 0.2049427 0.3944305 ## beta_S2 -0.3401048 0.08919730 -0.4868210 -0.1956962 ## beta_I1 -0.2134701 0.06619838 -0.3221781 -0.1076100 ## beta_I2 -0.3794658 0.12181226 -0.5890550 -0.1945320 ## V_P[1] 0.7249826 0.07941433 0.5983344 0.8602572 ## V_P[2] 0.5158816 0.06962922 0.4129109 0.6378239 ## Gcor[2,1] 0.2206650 0.20120273 -0.1130518 0.5267346 ## Ecor[2,1] 0.2865619 0.28599378 -0.2020181 0.7218302 ## Rcor[2,1] -0.2692795 0.02948451 -0.3169280 -0.2210957 ## Pcor[2,1] 0.2371132 0.07612683 0.1122364 0.3604815 ## SRN_h2[1] 0.7279645 0.14547160 0.4660180 0.9369054 ## SRN_h2[2] 0.4968691 0.18437576 0.1958444 0.8061198 ## ## , , chains = chain:3 ## ## stats ## parameter mean sd 5% 95% ## psi_1 -0.3917732 0.09648049 -0.5477612 -0.2307628 ## nu_0 1.0488572 0.08316790 0.9078409 1.1817644 ## beta_B 1.1590608 0.08918522 1.0159468 1.3109669 ## beta_N1 0.2138296 0.06238358 0.1112182 0.3150172 ## beta_N2 -0.4329684 0.08451736 -0.5746125 -0.3012428 ## beta_S1 0.2964357 0.05654736 0.2062017 0.3913037 ## beta_S2 -0.3400715 0.08605813 -0.4811912 -0.1970816 ## beta_I1 -0.2133280 0.06771443 -0.3239680 -0.1076524 ## beta_I2 -0.3800975 0.12051866 -0.5904230 -0.1904611 ## V_P[1] 0.7353774 0.07952662 0.6118561 0.8766857 ## V_P[2] 0.5093599 0.06383955 0.4053656 0.6203185 ## Gcor[2,1] 0.2145314 0.20571300 -0.1264824 0.5301802 ## Ecor[2,1] 0.3128922 0.29129569 -0.1910514 0.7609040 ## Rcor[2,1] -0.2692517 0.03048877 -0.3171810 -0.2175005 ## Pcor[2,1] 0.2366361 0.07220145 0.1142406 0.3543755 ## SRN_h2[1] 0.7478481 0.15073508 0.4802096 0.9663946 ## SRN_h2[2] 0.4530802 0.17775322 0.1658803 0.7673738 ## ## , , chains = chain:4 ## ## stats ## parameter mean sd 5% 95% ## psi_1 -0.3918833 0.09302662 -0.5383503 -0.23485329 ## nu_0 1.0464992 0.08139446 0.9051130 1.17189207 ## beta_B 1.1603470 0.08764506 1.0219972 1.30348050 ## beta_N1 0.2163534 0.06289935 0.1133386 0.32228418 ## beta_N2 -0.4342990 0.08516309 -0.5747470 -0.29982369 ## beta_S1 0.2976646 0.05772058 0.2037156 0.39182722 ## beta_S2 -0.3372458 0.08635158 -0.4789695 -0.19488168 ## beta_I1 -0.2096935 0.06848928 -0.3211583 -0.09782055 ## beta_I2 -0.3867511 0.12097444 -0.5930759 -0.19513848 ## V_P[1] 0.7293873 0.08500478 0.6026805 0.88582398 ## V_P[2] 0.5146118 0.06596530 0.4205497 0.63113448 ## Gcor[2,1] 0.2302588 0.22760439 -0.1683964 0.57400504 ## Ecor[2,1] 0.2385905 0.34162205 -0.3985039 0.76781440 ## Rcor[2,1] -0.2693061 0.02967232 -0.3178641 -0.22024368 ## Pcor[2,1] 0.2357412 0.07145844 0.1150878 0.34961283 ## SRN_h2[1] 0.7379856 0.14646843 0.4717008 0.96132239 ## SRN_h2[2] 0.4716516 0.20312823 0.1224836 0.80072091 5.3 Estimating assortment The mean partner intrinsic trait values calculated in the model can then be used to estimate the assortment coefficients of interest. #extract posteriors post &lt;- rstan::extract(stan_results5) #temporary vectors for assortment coefficients SRN_PV = post$V_P SRN_Psd = post$sd_P SRN_PVmean = post$V_P / I_partner #expected variance for mean of partners SRN_Psdmean = sqrt(SRN_PVmean) #expected SD for mean of partners SRN_focal1 &lt;- post$SRN_P[,,1] #individual intercepts SRN_focal2 &lt;- post$SRN_P[,,2] #individual slopes SRN_partner1 &lt;- cbind(post$partner_meanm[,,1], post$partner_meanf[,,1]) SRN_partner2 &lt;- cbind(post$partner_meanm[,,2], post$partner_meanf[,,2]) #scale mean partner variance to variance of single partner SRN_partner1s = SRN_partner1 for(j in 1:nrow(SRN_partner1)) {SRN_partner1s[j,] = ( SRN_partner1[j,] / SRN_Psdmean[j,1] ) * SRN_Psd[j,1] } SRN_partner2s = SRN_partner2 for(j in 1:nrow(SRN_partner2)) {SRN_partner2s[j,] = ( SRN_partner2[j,] / SRN_Psdmean[j,2] ) * SRN_Psd[j,2] } #assortment matrix Beta_alpha = list() #generate matrices across each posterior sample for(j in 1:nrow(SRN_focal1)) { Beta_mat = matrix(NA,2,2) #mu&#39; ~ mu Beta_mat[1,1] = cov(SRN_focal1[j,], SRN_partner1s[j,])/var(SRN_focal1[j,]) #mu&#39; ~ psi Beta_mat[2,1] = cov(SRN_focal2[j,], SRN_partner1s[j,])/var(SRN_focal2[j,]) #psi&#39; ~ mu Beta_mat[1,2] = cov(SRN_focal1[j,], SRN_partner2s[j,])/var(SRN_focal1[j,]) #psi&#39; ~ psi Beta_mat[2,2] = cov(SRN_focal2[j,], SRN_partner2s[j,])/var(SRN_focal2[j,]) Beta_alpha[[j]] = Beta_mat } #extract beta_mu&#39;mu (assortment on SRN intercepts) Beta_mu = unlist(lapply(Beta_alpha, function(x) x[2,2])) median(Beta_psi); sum(Beta_psi &gt; 0)/length(Beta_psi) ## [1] 0.2282148 ## [1] 1 Positive assortment of moderate effect size is detected and is estimated to be slightly larger than the true population value. 5.4 Estimating selection differentials and genetic responses Were now in a position to estimate the effects of selection. First, we should calculate the true selection differential and response to gauge the degree of bias and uncertainty in our empirical estimates. Following XXX, XXXX Now we can calculate our empirical prediction and compare. #generate other relevant matrices Beta_N = matrix(c(post$beta_N1,post$beta_N2),ncol=2) Beta_S = matrix(c(post$beta_S1,post$beta_S2),ncol=2) P = post$Pcov G = post$Gcov #selection differential #initialize dataframe s_SRN = data.frame(s_mu = rep(NA,nrow(Beta_N)), s_psi = rep(NA,nrow(Beta_N))) #populate with selection differentials for(j in 1:nrow(P)){ s_SRN[j,] = P[j,,] %*% t(t(Beta_N[j,])) + diag(diag(P[j,,]),2,) %*% Beta_alpha[[j]] %*% t(t(Beta_S[j,])) } apply(s_SRN,2,median); apply(s_SRN,2,mad) ## s_mu s_psi ## 0.07488649 -0.21237178 ## s_mu s_psi ## 0.04768784 0.04804364 #response to selection #initialize dataframe response_SRN = data.frame(delta_mu= rep(NA,nrow(Beta_N)), delta_psi = rep(NA,nrow(Beta_N))) #populate with response to selection for(j in 1:nrow(G)){ response_SRN[j,] = G[j,,] %*% t(t(Beta_N[j,])) + diag(diag(G[j,,]),2,) %*% Beta_alpha[[j]] %*% t(t(Beta_S[j,])) } apply(response_SRN,2,median); apply(response_SRN,2,mad) ## delta_mu delta_psi ## 0.06771619 -0.09220271 ## delta_mu delta_psi ## 0.04736033 0.05201362 Resources "],["extending-sams.html", "6 Extending SAMs", " 6 Extending SAMs body { text-align: justify} This chapter is a work in progress. "],["resources.html", "Resources", " Resources "]]
